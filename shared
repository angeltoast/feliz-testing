#!/bin/bash

# The Feliz installation scripts for Arch Linux
# 13 August 2016

# /common/shared - Variables and functions used by both sqiff and cliff

# Developed by Elizabeth Mills

# Please read the introduction in the README file

#
# Partition variables and arrays
#
declare -a AddPartList    # Array of additional partitions eg: /dev/sda5
declare -a AddPartMount   # Array of mountpoints for the same partitions eg: /home
declare -a AddPartType    # Array of format type for the same partitions eg: ext4
declare -a PartitionArray # Array of long identifiers
declare -a NewArray       # For copying any array
declare -A LabellingArray # Associative array of user labels for partitions
declare -A Labelled       # Associative array of labelled partitions
declare -A FileSystem     # Associative array of filesystem types (ext* swap)
SwapPartition=""          # eg: /dev/sda3
FormatSwap="N"            # User selects whether to reuse swap
MakeSwap="Y"
SwapFile=""               # eg: 2G
IsSwap=""                 # Result of lsblk test
RootPartition=""          # eg: /dev/sda2
RootType=""               # eg: ext4
Partition=""              # eg: sda1
AutoPart=0                # Flag - changes to 1 if auto-partition is chosen
UseDisk="sda"             # Used if more than one disk
DiskDetails=0             # Size of selected disk
#
# Grub & kernelvariables
#
GrubDevice=""             # eg: /dev/sda
Kernel="1"                # Default 1 = LTS
IsInVbox="N"              # Result of test to see if installation is in Virtualbox
OSprober="Y"
#
# Location variables
#
CountryCode=""            # eg: GB ... for mirrorlist
CountryLocale=""          # eg: en_GB.UTF-8
Countrykbd=""             # eg: uk
ZONE=""                   # eg: Europe For time
SUBZONE=""                # eg: London
#
# Desktop environment, display manager and greeter variables
#
DesktopEnvironment="None" # eg: xfce4
GoodiesXfce=""
GoodiesGnome=""
GoodiesOpenbox=""
DisplayManager=""         # eg: lightdm
Greeter=""                # eg: lightdm-gtk-greeter (Not required for some DMs)
#
# Root and user variables
#
HostName=""               # eg: arch-linux
UserName=""               # eg: archie
Scope=""                  # Installation scope ... 'Full' or 'Basic'
#
# Global user input variables
#
Response=""
Result=""
#
# Miscellaneous
#
helpMESSAGE=""            # Used by help system
declare -a Options        # For listgen functions
#
# ---- Arrays for extra Applications ----
#
CategoriesList="Accessories Desktop_Environments Graphical Internet Multimedia Office Programming Window_Managers"
Categories[1]="Accessories"
Categories[2]="Desktop_Environments"
Categories[3]="Graphical"
Categories[4]="Internet"
Categories[5]="Multimedia"
Categories[6]="Office"
Categories[7]="Programming"
Categories[8]="Window_Managers"
# Accessories
Accessories="brasero conky gnome-calculator gedit gparted nautilus gnome-terminal"
LongAccs[1]="Disc burning application from Gnome"
LongAccs[2]="Desktop time and system information"
LongAccs[3]="Calculator for your taskbar"
LongAccs[4]="The text editor from Gnome"
LongAccs[5]="Tool to make/delete/resize partitions"
LongAccs[6]="The file-manager from Gnome"
LongAccs[7]="The Gnome terminal emulator"
# Desktops
Desktops="Cinnamon Deepin Gnome KDE LXDE LXQt Mate Xfce"
LongDesk[1]="Slick DE from the Mint team      "
LongDesk[2]="The Deepin Desktop Environment"
LongDesk[3]="Full-featured, modern DE"
LongDesk[4]="Plasma 5 and accessories pack"
LongDesk[5]="Traditional, lightweight DE"
LongDesk[6]="Lightweight and modern Qt DE"
LongDesk[7]="Traditional DE from the Mint team"
LongDesk[8]="Lightweight, highly configurable DE"
# Graphical
Graphical="evince gimp imagemagick gthumb simple-scan xsane"
LongGraph[1]="Reader for PDF & other document formats"
LongGraph[2]="Advanced image editing suite"
LongGraph[3]="Command-line image manipulation"
LongGraph[4]="Image viewer & basic editor"
LongGraph[5]="A simple scanner GUI"
LongGraph[6]="Full-featured GTK-based sane frontend"
# Internet
Internet="chromium epiphany filezilla firefox qbittorrent thunderbird transmission-gtk"
LongNet[1]="Open source web browser from Google     "
LongNet[2]="Gnome WebKitGTK+ browser (aka Web)"
LongNet[3]="Fast & reliable FTP, FTPS & SFTP client"
LongNet[4]="Extensible browser from Mozilla"
LongNet[5]="Open source BitTorrent client"
LongNet[6]="Feature-rich email client from Mozilla"
LongNet[7]="Easy-to-use BitTorrent client"
# Multimedia
Multimedia="avidemux-gtk banshee handbrake openshot vlc xfburn"
LongMulti[1]="Easy-to-use video editor               "
LongMulti[2]="Feature-rich audio player"
LongMulti[3]="Simple yet powerful video transcoder"
LongMulti[4]="Easy-to-use non-linear video editor"
LongMulti[5]="Middleweight video player"
LongMulti[6]="GUI CD burner"
# Office
Office="abiword gnumeric libreoffice orage scribus"
LongOffice[1]="Full-featured word processor        "
LongOffice[2]="Spreadsheet program from GNOME"
LongOffice[3]="Open-source office software suite"
LongOffice[4]="Calendar & task manager (incl with Xfce)"
LongOffice[5]="Desktop publishing program"
# Programming
Programming="bluefish codeblocks emacs geany git netbeans"
LongProg[1]="GTK+ IDE with support for Python plugins  "
LongProg[2]="Open source & cross-platform C/C++ IDE"
LongProg[3]="Extensible, customizable text editor"
LongProg[4]="Advanced text editor & IDE"
LongProg[5]="Open source distributed version control system"
LongProg[6]="Integrated development environment (IDE)"
# WindowManagers
WindowManagers="Enlightenment Fluxbox JWM Openbox cairo-dock docky fbpanel tint2"
LongWMs[1]="Window manager and toolkit"
LongWMs[2]="Light, fast and versatile WM"
LongWMs[3]="(Joe's Window Manager) Featherweight WM"
LongWMs[4]="Lightweight, powerful & configurable stacking WM"
LongWMs[5]="Customizable dock & launcher application"
LongWMs[6]="For opening applications & managing windows"
LongWMs[7]="Desktop panel"
LongWMs[8]="Desktop panel"

# -------------------------   -------------------------
# Functions           Line    Functions           Line
# -------------------------   -------------------------
# ReflectorMirrorList  164    ChangeRootPartition  427
# LocalMirrorList      174    ChangeSwapPartition  435
# Parted               189    ChangePartitions     443
# MakePartitionList    194    AddExtras            455
# BuildPartitionLists  208    MountPartitions      468
# UpdateArray          299    InstallDM            532
# RunAutoPart          325    InstallLuxuries      567
# SetLabel             401    UserAdd              655
# -------------------------   -------------------------

ReflectorMirrorList() { # Use reflector (added to archiso) to generate fast mirror list
  TPecho "Generating mirrorlist"
  reflector --verbose -l 5 --sort rate --save /etc/pacman.d/mirrorlist 2>> feliz.log
  if [ $? -gt 0 ]; then
    LocalMirrorList
  else
    chmod +r /etc/pacman.d/mirrorlist 2>> feliz.log
  fi
}

LocalMirrorList() { # In case Reflector fails, generate and save a shortened
  # mirrorlist of only the mirrors defined in the CountryCode variable.
  URL="https://www.archlinux.org/mirrorlist/?country=${CountryCode}&use_mirror_status=on"
  MirrorTemp=$(mktemp --suffix=-mirrorlist) 2>> feliz.log
  # Use curl to get list of mirrors from the Arch mirrorlist ${URL} to ${MirrorTemp}
  curl -so ${MirrorTemp} ${URL} 2>> feliz.log
  # Use sed to filter entries
  sed -i 's/^#Server/Server/g' ${MirrorTemp} 2>> feliz.log
  # Make a safe copy of existing mirrorlist
  mv -f /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig 2>> feliz.log
  # Replace existing mirrorlist with new local mirrorlist
  mv -f ${MirrorTemp} /etc/pacman.d/mirrorlist 2>> feliz.log
  chmod +r /etc/pacman.d/mirrorlist 2>> feliz.log
}

Parted() {
  parted --script /dev/${UseDisk} "$1" 2>> feliz.log
}

MakePartitionList() {
  # Call BuildPartitionLists function to generate an array of partitions
  # This is not a first call, so first empty the existing array
  local x=0
  local HowMany="${#PartitionArray[@]}"
  until [ ${x} -eq ${HowMany} ]
  do
    unset PartitionArray[$x]
    x=$((x+1))
  done
  BuildPartitionLists # Then rebuild
}

BuildPartitionLists() { # First called by CheckParts to generate details of partitions for display, then by feliz to prepare partition arrays for selection for root, swap and others
  
  # 1) Prepare two arrays from attached devices using blkid (installed with Feliz)
    # First an array of all partitions up to sd*99
    #                           |includes word | select 1st field | cut /dev/ | remove colon
    ListTypeIDs=`blkid /dev/sd* | grep ' TYPE' | awk '{print $1}' | cut -c 6- | sed s/://g`
    # Then a matching array of types
    #                         |includes word |  select last field   | remove TYPE | remove quotes
    ListTypes=`blkid /dev/sd* | grep ' TYPE' | awk '{print $(NF-1)}' | cut -c 6- | sed s/\"//g`
    # Add records from those two indexed arrays into the associative array
    local Counter=0
    for i in ${ListTypeIDs}
    do
      x=0
      for l in ${ListTypes}
      do
        if [ $x -eq $Counter ]; then
          FileSystem[$i]=$l # ... get the matching type
          break
        fi
        x=$((x+1))
      done
      Counter=$((Counter+1))
    done
  
  # 2) Find all up to sd*99 with LABEL | select 1st field | remove /dev/ | remove colon
  ListLabelledIDs=`sudo blkid /dev/sd* | grep LABEL | awk '{print $1}' | cut -c 6- | sed s/://g`
  # If at least one labelled partition found, get a matching list of labels (remove quotes)
  if [ -n "$ListLabelledIDs" ]; then
    ListLabelledLabels=`sudo blkid /dev/sd* | grep LABEL | awk '{print $2}' | cut -c 7- | sed s/\"//g`
  fi
  # Add records from those two indexed arrays into associative array
  Counter=0
  for i in ${ListLabelledIDs}
  do
    x=0
    for l in ${ListLabelledLabels}
    do
      if [ $x -eq $Counter ]; then
        Labelled[$i]=$l # ... get the matching label
        break
      fi
      x=$((x+1))
    done
    Counter=$((Counter+1))
  done
  local HowManyLabelled="${#Labelled[@]}"
  
  # 3) Find any partitions flagged as bootable
  ListAll=`sudo sfdisk -l | grep /dev | grep '*' | awk '{print $1}' | cut -c 6-`
  declare -a Flagged
  Counter=0
  for i in $ListAll
  do
    Flagged[${Counter}]="$i"
    Counter=$((Counter+1))
  done
  local HowManyFlagged="${#Flagged[@]}"
  # 4) Prepare list of short identifiers (sda1 sda2 ...)
  PartitionList=""
  ShowPartitions=`lsblk -l | grep 'part' | awk '{print $1}'`
  # 5) Run through short identifiers, checking the three arrays for a match
  Counter=0 # For count of partitions
  Label=""
  for part in ${ShowPartitions}
  do
  # First test Flagged
    local x=0
    until [ ${x} -eq ${HowManyFlagged} ]
    do
      if [ $part = "${Flagged[$x]}" ]; then
        Bootable="(Bootable)"
        break
      else
        Bootable=""
      fi
      x=$((x+1))
    done
    # Next test Labelled
    ThisPart=${Labelled[${part}]} # Find the record in Labelled that matches the current iteration
    if [ -n "${ThisPart}" ]; then
      Label="${ThisPart}"
    fi
    # Finally get the filesystem type
    ThisPart=${FileSystem[${part}]} # Find the record in FileSystem that matches the current iteration
    LongID=`lsblk -l | grep ${part} | awk '{print $1 " " $4 " " $7}'`
    PartitionArray[${Counter}]="$LongID $ThisPart ${Label} ${Bootable}"
    Label=""
    # Save the short ID for later functions
    PartitionList="${PartitionList} ${part}"
    (( Counter+=1 ))
  done
  PARTITIONS=${Counter}
}

UpdateArray() { # Remove the selected partition from $PartitionArray[]
  # Called by AllocateRoot, AllocateSwap and MorePartitions
  local Counter=0
  declare -a NewArray  # Empty NewArray
  # Build NewArray excluding the partition selected in the calling function
  for p in "${PartitionArray[@]}"
  do
    First=`echo $p | cut -c 1-5`
    if [ $First ]; then
      if [ ${PassPart} != ${First} ]; then
        NewArray[${Counter}]="$p"
        (( Counter+=1 ))
      fi
    fi
  done
  # Then copy NewArray into PartitionArray
  Counter=0
  for p in "${NewArray[@]}"
  do
    PartitionArray[${Counter}]=${NewArray[$Counter]}
    Counter=$((Counter+1))
  done
  unset PartitionArray[$Counter] # Delete the last element
}

RunAutoPart() {
  GrubDevice="/dev/${UseDisk}"
  Home="N"
  # Get disk size
  DiskSize=`lsblk -l | grep "${UseDisk}\ " | awk '{print $4}' | sed s/G//g`
  # Create partitions and set variables for mounting
  Parted "mklabel msdos"
  if [ $DiskSize -ge 40 ]; then
    # Device is large enough for a separate /home partition and larger
    # /root (20 GiB) and /swap (8 GiB)
    Parted "mkpart primary linux-swap 1MiB 8GiB"
    SwapPartition="${GrubDevice}1"
    MakeSwap="Y"
    # Root partition 15GiB
    Parted "mkpart primary ext4 8GiB 28GiB"
    Parted "set 2 boot on"
    RootPartition="${GrubDevice}2"
    RootType="ext4"
    # Home partition = remainder (size from 19GiB to maximum available)
    Parted "mkpart primary ext4 28GiB 100%"
    AddPartList[0]="${GrubDevice}3" # Add to the array of additional partitions
    AddPartMount[0]="/home"
    AddPartType[0]="ext4"
    Home="Y"
  elif [ $DiskSize -ge 30 ]; then
    # Device is just large enough for a separate /home partition
    # Swap 4GiB
    Parted "mkpart primary linux-swap 1MiB 4GiB"
    SwapPartition="${GrubDevice}1"
    MakeSwap="Y"
    # Root partition 15GiB
    Parted "mkpart primary ext4 4GiB 19GiB"
    Parted "set 2 boot on"
    RootPartition="${GrubDevice}2"
    RootType="ext4"
    # Home partition = remainder (size from 19GiB to maximum available)
    Parted "mkpart primary ext4 19GiB 100%"
    AddPartList[0]="${GrubDevice}3" # Add to the array of additional partitions
    AddPartMount[0]="/home"
    AddPartType[0]="ext4"
    Home="Y"
  elif [ $DiskSize -ge 18 ]; then
    # Swap 4Gib and one main partition up to 20GiB
    Parted "mkpart primary linux-swap 1MiB 4GiB"
    SwapPartition="${GrubDevice}1"
    MakeSwap="Y"
    Parted "mkpart primary ext4 4GiB 100%"
    Parted "set 2 boot on"
    RootPartition="${GrubDevice}2"
    RootType="ext4"
  elif [ $DiskSize -gt 10 ]; then
    # Swap 2Gib and one main partition up to 16GiB
    Parted "mkpart primary linux-swap 1MiB 2GiB"
    SwapPartition="${GrubDevice}1"
    Parted "mkpart primary ext4 2GiB 100%"
    Parted "set 2 boot on"
    RootPartition="${GrubDevice}2"
    RootType="ext4"
    SwapFile="2G"
    SwapPartition=""
  else # If disk < 10 Gb
    # Swap file and one main partition up to 10GiB
    Parted "mkpart primary ext4 1MiB 100%"
    Parted "set 1 boot on"
    RootPartition="${GrubDevice}1"
    RootType="ext4"
    SwapFile="2G"
    SwapPartition=""
  fi
  ShowPart1="Swap: `lsblk -l | grep "${UseDisk}1" | awk '{print $4}'`" >/dev/null
  ShowPart2="Root: `lsblk -l | grep "${UseDisk}2" | awk '{print $4}'`" >/dev/null
  ShowPart3=""
  AutoPart=1 # Set flag to 'on' for mounting
}

SetLabel() { # Called from the root, swap and extra partitions routines
# ... each passing a single argument containing the partition ID
# Build an associative array of partitions (LabellingArray[]) as
# declared in felizrunning with other arrays
PartitionID=$1
local HowMany="${#PartitionArray[@]}"
local x=0
until [ ${x} -eq ${HowMany} ]
do
  CompareID=`echo ${PartitionArray[${x}]} | awk '{print $1}'`
  if [ -z ${CompareID} ]; then
    x=$((x+1))
    continue
  fi
  if [ ${CompareID} = ${PartitionID} ]; then # If the partition is in the array, it has a label
  #  Label=`echo ${PartitionArray[${x}]} | awk '{print $4}'` # Save the label
  Label=`echo ${PartitionArray[${x}]}`
  fi
  x=$((x+1))
done
}

#
# Review stage ---------------------------------------------------------
#

ChangeRootPartition() {
# Start array with SwapPartition
  Ignorelist[0]=${SwapPartition}
  local Counter=1
  AddExtras
  MakePartitionList
}

ChangeSwapPartition() {
# Start array with RootPartition
  Ignorelist[0]=${RootPartition}
  Counter=1
  AddExtras
  MakePartitionList
}

ChangePartitions() {
  # Copy RootPartition and SwapPartition into temporary array
  Ignorelist[0]=${RootPartition}
  local Counter=1
  if [ ${SwapPartition} ]; then
    Ignorelist[1]=${SwapPartition}
    Counter=2
  fi
  Ignores=${#Ignorelist[@]} # Save a count for later
  MakePartitionList
}

AddExtras() {
  # Called by ChangeSwapPartition and ChangeRootPartition with
  # Ignorelist started and Counter set to next record number
  # Add each field (extra partition) from AddPartList into the array:
  for a in ${AddPartList[@]}; do
    Ignorelist[$Counter]=$a
    Counter=$((Counter+1))
  done
  Ignores=${#Ignorelist[@]} # Save a count for later
}

#
# Install stage --------------------------------------------------------
#

MountPartitions() {
  case $RootType in
  "") echo "Not formatting root partition" >> feliz.log
  ;;
  *) TPecho "Preparing and mounting partitions" ""
    umount ${RootPartition} /mnt >/dev/null 2>> feliz.log
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${RootPartition} | grep 'ext\|btrfs' | cut -c26-30` 2>> feliz.log
    if [ ${CurrentType} ] && [ $RootType = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${RootPartition} 2>> feliz.log
    elif [ $RootType = "btrfs" ]; then
      mkfs.btrfs -f ${RootPartition} 2>> feliz.log
    else
      Partition=`echo $RootPartition | cut -c 6-` 2>> feliz.log
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${RootType} ${RootPartition} 2>> feliz.log
    fi
  esac
  mount ${RootPartition} /mnt 2>> feliz.log # eg: mount /dev/sda1 /mnt
  if [ ${SwapPartition} ]; then
    swapoff -a 2>> feliz.log
    if [ $MakeSwap = "Y" ]; then
      Partition=`echo $SwapPartition | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mkswap ${Label} ${SwapPartition} 2>> feliz.log # eg: mkswap -L Arch-Swap /dev/sda2
    fi
    swapon ${SwapPartition} 2>> feliz.log # eg: swapon /dev/sda2
  fi
  local Counter=0
  for id in ${AddPartList}
  do
    umount ${id} /mnt${AddPartMount[$Counter]} >/dev/null 2>> feliz.log
    mkdir -p /mnt${AddPartMount[$Counter]} 2>> feliz.log  # eg: mkdir -p /mnt/home
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${AddPartType[$Counter]} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${AddPartType[$Counter]} = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${id} 2>> feliz.log
    elif [ ${AddPartType[$Counter]} = "btrfs" ]; then
      mkfs.btrfs -f ${id} 2>> feliz.log
    elif [ ${AddPartType[$Counter]} != "" ]; then
      Partition=`echo ${id} | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${AddPartType[$Counter]} ${id} 2>> feliz.log # eg: mke2fs -L Arch-Home -t ext4 /dev/sda3
    fi
    mount ${id} /mnt${AddPartMount[$Counter]} 2>> feliz.log # eg: mount /dev/sda3 /mnt/home
    Counter=$((Counter+1))
  done
}

InstallDM()
{ # Display manager
  # Disable any existing display manager
  arch_chroot "systemctl disable display-manager.service" >/dev/null
  # Then install selected display manager
  DisplayProgress "Installing ${DisplayManager} display manager" 20
  pacstrap /mnt ${DisplayManager} ${Greeter} 2>> feliz.log
  arch_chroot "systemctl -f enable ${DisplayManager}.service" >/dev/null
}

InstallLuxuries()
{ # Install desktops and other extras
  # Display manager - runs only once
  InstallDM                  # Clear any pre-existing DM and install this one
  # First parse through LuxuriesList - checking for DEs
  if [ -n "${LuxuriesList}" ]; then
    for i in ${LuxuriesList}
    do
      case $i in
      "Cinnamon") DisplayProgress "Installing Cinnamon desktop Environment"
          pacstrap /mnt cinnamon 2>> feliz.log
        ;;
      "Deepin") DisplayProgress "Installing Deepin desktop Environment"
          pacstrap /mnt deepin-account-faces deepin-api deepin-artwork-themes deepin-calendar deepin-control-center deepin-daemon deepin-desktop deepin-desktop-base deepin-desktop-schemas deepin-dock deepin-file-manager deepin-grub2-themes deepin-gtk-theme deepin-launcher deepin-menu deepin-notifications deepin-session-ui deepin-social-sharing deepin-sound-theme deepin-wallpapers deepin-wm-switcher python2-deepin-ui python2-deepin-utils startdde deepin-game deepin-movie deepin-music deepin-screenshot deepin-terminal 2>> feliz.log
          # Change the greeter line in lightdm.conf
          if [ -d /mnt/etc/lightdm ]; then
            sed -i s/#greeter-session=example-gtk-gnome/greeter-session=lightdm-deepin-greeter/g /mnt/etc/lightdm/lightdm.conf 2>> feliz.log
          fi
        ;;
      "Enlightenment") DisplayProgress "Installing 'Enlightenment' desktop Environment"
          pacstrap /mnt enlightenment connman terminology 2>> feliz.log
        ;;
      "Fluxbox") DisplayProgress "Installing 'Fluxbox' window manager"
          pacstrap /mnt fluxbox 2>> feliz.log
        ;;
      "Gnome") DisplayProgress "Installing 'Gnome' desktop Environment"
          pacstrap /mnt adwaita-icon-theme baobab brasero sheese dconf-editor empathy eog epiphany evince agnome-backgrounds gedit gnome-calculator gnome-calendar gnome-characters gnome-clocks gnome-contacts gnome-control-center gnome-desktop gnome-dictionary gnome-disk-utility gnome-font-viewer gnome-keyring gnome-screenshot gnome-session gnome-settings-daemon gnome-shell gnome-shell-extensions gnome-sound-recorder gnome-system-log gnome-system-monitor gnome-terminal gnome-themes-standard gnome-tweak-tool gnome-user-docs gnome-user-share grilo-plugins gucharmap gvfs gvfs-afc gvfs-goa gvfs-google gvfs-gphoto2 gvfs-mtp gvfs-nfs gvfs-smb mousetweaks mutter nautilus nautilus-sendto orca sushi totem tracker vino xdg-user-dirs-gtk yelp 2>> feliz.log
        ;;
      "KDE") DisplayProgress "Installing KDE Plasma meta package"
          pacstrap /mnt bluedevil breeze breeze-gtk drkonqi kactivitymanagerd kde-cli-tools kde-gtk-config kdecoration kdeplasma-addons kgamma5 khotkeys kinfocenter kmenuedit kscreen kscreenlocker ksshaskpass ksysguard kuiserver kwallet-pam kwayland-integration kwin kwrited libkscreen libksysguard milou oxygen plasma-desktop plasma-integration plasma-mediacenter plasma-nm plasma-pa plasma-sdk plasma-workspace plasma-workspace-wallpapers polkit-kde-agent powerdevil sddm-kcm systemsettings user-manager 2>> feliz.log
          DisplayProgress "Installing KDE applications package"
          pacstrap /mnt kde-applications 2>> feliz.log
        ;;
      "LXDE") DisplayProgress "Installing 'LXDE' desktop Environment"
          pacstrap /mnt gpicview lxappearance lxappearance-obconf lxde-common lxde-icon-theme lxinput lxlauncher lxmusic lxpanel lxrandr lxsession lxtask lxterminal openbox pcmanfm 2>> feliz.log
          if [ -d /mnt/etc/lxdm ]; then
            echo "session=/usr/bin/startlxde" >> /mnt/etc/lxdm/lxdm.conf 2>> feliz.log
          fi
        ;;
      "LXQt") DisplayProgress "Installing 'LXQt' desktop Environment"
        pacstrap /mnt conman lxqt-about lxqt-common lxqt-config lxqt-globalkeys lxqt-notificationd lxqt-openssh-askpass lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-runner lxqt-session lxqt-sudo openbox oxygen-icons pcmanfm-qt 2>> feliz.log
        ;;
      "Mate") DisplayProgress "Installing 'Mate' desktop Environment"
        pacstrap /mnt caja marco mate-backgrounds mate-control-center mate-desktop mate-icon-theme mate-menus mate-notification-daemon mate-panel mate-polkit mate-session-manager mate-settings-daemon mate-themes mate-user-guide atril caja-gksu caja-image-converter caja-open-terminal caja-sendto caja-share caja-wallpaper engrampa eom galculator-gtk2 mate-applets mate-icon-theme-faenza mate-media mate-netbook mate-power-manager mate-screensaver mate-sensors-applet mate-system-monitor mate-terminal mate-user-share mate-utils mozo pluma 2>> feliz.log
        ;;
      "Openbox") DisplayProgress "Installing 'Openbox' window manager"
        pacstrap /mnt openbox tint2 2>> feliz.log
        ;;
      "Xfce") DisplayProgress "Installing 'Xfce' desktop Environment"
        pacstrap /mnt exo garcon gtk-xfce-engine thunar thunar-volman tumbler xfce4-appfinder xfce4-mixer xfce4-panel xfce4-power-manager xfce4-session xfce4-settings xfce4-terminal xfconf xfdesktop xfwm4 xfwm4-themes mousepad orage ristretto thunar-archive-plugin thunar-media-tags-plugin xfburn xfce4-artwork xfce4-battery-plugin xfce4-clipman-plugin xfce4-cpufreq-plugin xfce4-cpugraph-plugin xfce4-datetime-plugin xfce4-dict xfce4-diskperf-plugin xfce4-fsguard-plugin xfce4-genmon-plugin xfce4-mailwatch-plugin xfce4-mount-plugin xfce4-mpc-plugin xfce4-netload-plugin xfce4-notes-plugin xfce4-notifyd xfce4-screenshooter xfce4-sensors-plugin xfce4-smartbookmark-plugin xfce4-systemload-plugin xfce4-taskmanager xfce4-time-out-plugin xfce4-timer-plugin xfce4-verve-plugin xfce4-wavelan-plugin xfce4-weather-plugin xfce4-whiskermenu-plugin xfce4-xkb-plugin 2>> feliz.log
        ;;
      *) continue # Ignore all others on this pass
      esac
    done
    
    # Install Yaourt
    TPecho "Modifying pacman.conf and installing Yaourt"
    cp pacman.conf /mnt/etc 2>> feliz.log # For installed system
    cp pacman.conf /etc 2>> feliz.log     # For installer
    pacman-key --init 2>> feliz.log
    pacman-key --populate archlinux 2>> feliz.log
    pacman -Sy 2>> feliz.log              # Update
    pacstrap /mnt yaourt 2>> feliz.log    # Then install Yaourt
    
    # Second parse through LuxuriesList - any extras
    for i in ${LuxuriesList}
    do
      case $i in
      "Cinnamon" | "Deepin" | "Enlightenment" | "Feliz" | "Fluxbox" | "Gnome" | "KDE" | "LXDE" | "LXQt" | "Mate" | "Openbox" | "Xfce") continue # Ignore DEs this pass
        ;;
      "cairo-dock") TPecho "Installing cairo-dock & cairo-dock-plug-ins"
        pacstrap /mnt cairo-dock cairo-dock-plug-ins 2>> feliz.log
        ;;
      "conky") TPecho "Installing Conky"
        pacstrap /mnt conky 2>> feliz.log
        ;;
      *) TPecho "Installing $i"
        pacstrap /mnt $i 2>> feliz.log
      esac
    done
  fi
  
  # And finally the man pages
  TPecho "Installing man-pages"
  pacstrap /mnt man-pages 2>> feliz.log
  TPecho "Installing man-db - this takes some time - please be patient"
  pacstrap /mnt man-db 2>> feliz.log
  
}

UserAdd() {
  CheckUsers=`cat /mnt/etc/passwd | grep ${UserName}`
  # If not already exist, create user
  if [ -z ${CheckUsers} ]; then
    TPecho "Adding user '${UserName}' and setting up groups"
    arch_chroot "useradd ${UserName} -m -g users -G wheel,storage,power,network,video,audio,lp -s /bin/bash"
    # Set up basic configuration files and permissions for user
    arch_chroot "cp /etc/skel/.bashrc /home/${UserName}"
    arch_chroot "chown -R ${UserName}:users /home/${UserName}"
    sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /mnt/etc/sudoers 2>> feliz.log
  else
    TPecho "User already exists"
  fi
}
