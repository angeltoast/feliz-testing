#!/bin/bash

# various - Various functions - Dialog version

# Developed by Elizabeth Mills, incorporating some code adapted from
# the excellent Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# -------------------------      -------------------------
# Functions           Line       Functions           Line
# -------------------------      -------------------------
# SetLanguage           21
# PrintOne              44       SetGrubDevice        150
# DisplayProgress       47       arch_chroot          155
# ProgressArray         64       MountPartitions      160
# SetKernel             83       InstallKernel        222
# ConfirmVbox           95       SetRootPassword      266
# MakePartitionList    126       SetUserPassword      285

SetLanguage() { # User selects language, which is then fixed
  dialog --clear --backtitle "$_Backtitle" --title " - Language - " --menu "Choose your language" 15 40 7 \
        "English" "English" \
        "French" "Francais" \
        "Polish" "Polski" \
        "Portuguese" "Português" \
        "Romanian" "Română" \
        "Spanish" "Espanhol" \
        "Serbian" "Srpski" 2> feliz.output
    RetVal=$?
    case $RetVal in
      0) # ie: Language selected
        Language=`cat feliz.output`
        Language="${Language,,}" # Make lower case
        LanguageFile="feliz.${Language}"
        cp $LanguageFile feliz.language # Set for future use
      ;;
      *) # Catchall for <Cancel> button (1) selected (no action) or Esc
        cp feliz.english feliz.language # Set default language to English
    esac
  source feliz.language
}

PrintOne() {  # Arguments: "Component" "Patient"
  dialog --backtitle "$Backtitle" --title " - ${_Information} - " --no-shadow --infobox "$1\n$2\n" 5 55 ; sleep 1 &
}

TPecho() { # For compatibility with Cliff
    PrintOne "$1" "$2"
}

DisplayProgress() { # Revised code for displaying progress for longer processes
  Estimate=$2 # Numeric value passed as multiple of 10
  local Message="$1" # Text passed to appear above progress bar
  local Sleep=$(( $Estimate / 10 )) # Set sleep period to one tenth of total time
  local Percent=0
  (
  until [ $Percent -gt 100 ]
  do
    echo "XXX"
    echo $Percent
    echo "\n  $Message\n  ${_Gauge}\n  ${_Patient} ..."
    echo "XXX"
    Percent=`expr $Percent + 10`
    sleep $Sleep
  done
  ) |
  dialog --backtitle "$Backtitle" --title " - ${_Progress} - " --no-shadow --gauge "" 9 60 0 &
}

ProgressArray() {
# For installing multiple programs with pacstrap and displaying gauge
  local Title=" $1 "
  # Receives PassArray comprising all the programs
  # 1) Count items in the array
  n=${#PassArray[*]};
  # 2) Redirect dialog commands input using substitution
  dialog --title "$Title" --no-shadow --gauge "" 8 60 < <(
  # 3) set counter - it will increase on each parse
   i=0
  # 4) read each item from the array
  for f in "${PassArray[@]}"
  do
    # ... calculate progress
    PCT=$(( 100*(++i)/n ))
    # ... update dialog box
    echo "XXX"
    echo "$PCT"
    echo "\n  ${_Installing} $f"
    echo "XXX"
    # ... install $f
    pacstrap /mnt $f &>> feliz.log
  done
  )
}

SetKernel() {
  local Message="${_SetKernel1} ${_SetKernel2} ${_SetKernel3}"
  listgen1 "${_LTS} ${_Latest}" " - ${_Choose_kernel} - " "nocancel"
  case $(cat output.file) in
    "${_LTS_kernel}") Kernel=1 # Set the Kernel variable (1 = LTS; 2 = Latest)
    ;;
    "${_Latest_kernel}") Kernel=2 # Set the Kernel variable (1 = LTS; 2 = Latest)
    ;;
    *) echo "${_Failure}" >> feliz.log
  esac
}

ConfirmVbox() {
  Retry="Y"
  until [ $Retry = "N" ]
  do
    local Message="${_ConfirmVbox1}\n${_ConfirmVbox2} ${_ConfirmVbox3}\n\n${_ConfirmVbox4}"
    dialog --backtitle "$Backtitle" --title " auto-partition " --yes-label "${_Yes}" --no-label "${_No}" --no-shadow --yesno "\n$Message\n" 10 40
    RetVal=$?
    case $RetVal in
      0) IsInVbox="VirtualBox"
        Retry="N"
      ;;
      *) IsInVbox=""
        Retry="N"
    esac
  done
}

MakePartitionList() {
# Call BuildPartitionLists function to generate an array of partitions
# This is not a first call, so first empty the existing array
  local x=0
  local HowMany="${#PartitionArray[@]}"
  until [ ${x} -eq ${HowMany} ]
  do
    unset PartitionArray[$x]
    x=$((x+1))
  done
  BuildPartitionLists # Then rebuild
}

SetGrubDevice() {
  DEVICE=""
  DevicesList="$(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd')";
  GrubDevice=""
  local Message="${_SetGrubDevice1}\n${_SetGrubDevice2} ${_SetGrubDevice3} ${_SetGrubDevice4}"
  listgen1 "${DevicesList}" "${_Devices}" ""
  if [ $? -gt 0 ]; then # <Cancel> selected
   GrubDevice=""
  else
   GrubDevice=$(cat output.file)
  fi
}

arch_chroot() {  # From Lution AIS
  arch-chroot /mnt /bin/bash -c "${1}" &>> feliz.log
}

MountPartitions() {
  case $RootType in
  "") echo "Not formatting root partition" >> feliz.log
  ;;
  *) PrintOne "${_Preparing_and_mounting}" ""
    umount ${RootPartition} /mnt >/dev/null &>> feliz.log
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${RootPartition} | grep 'ext\|btrfs' | cut -c26-30` &>> feliz.log
    if [ ${CurrentType} ] && [ $RootType = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${RootPartition} &>> feliz.log
    elif [ $RootType = "btrfs" ]; then
      mkfs.btrfs -f ${RootPartition} &>> feliz.log
    else
      Partition=`echo $RootPartition | cut -c 6-` &>> feliz.log
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${RootType} ${RootPartition} &>> feliz.log
    fi
  esac
  mount ${RootPartition} /mnt &>> feliz.log # eg: mount /dev/sda1 /mnt
  if [ ${SwapPartition} ]; then
    swapoff -a &>> feliz.log
    if [ $MakeSwap = "Y" ]; then
      Partition=`echo $SwapPartition | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mkswap ${Label} ${SwapPartition} &>> feliz.log # eg: mkswap -L Arch-Swap /dev/sda2
    fi
    swapon ${SwapPartition} &>> feliz.log # eg: swapon /dev/sda2
  fi
  local Counter=0
  for id in ${AddPartList}
  do
    umount ${id} /mnt${AddPartMount[$Counter]} >/dev/null &>> feliz.log
    mkdir -p /mnt${AddPartMount[$Counter]} &>> feliz.log  # eg: mkdir -p /mnt/home
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${AddPartType[$Counter]} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${AddPartType[$Counter]} = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${id} &>> feliz.log
    elif [ ${AddPartType[$Counter]} = "btrfs" ]; then
      mkfs.btrfs -f ${id} &>> feliz.log
    elif [ ${AddPartType[$Counter]} != "" ]; then
      Partition=`echo ${id} | cut -c 6-` &>> feliz.log
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${AddPartType[$Counter]} ${id} &>> feliz.log # eg: mke2fs -L Arch-Home -t ext4 /dev/sda3
    fi
    mount ${id} /mnt${AddPartMount[$Counter]} &>> feliz.log # eg: mount /dev/sda3 /mnt/home
    Counter=$((Counter+1))
  done
}

InstallKernel() { # Kernel and some other core systems
  DisplayProgress "${_Installing} bash" 40
  pacstrap /mnt base-devel bash &>> feliz.log
  # Create array of all the programs to pass to installing function
  PassArray=() # Ensure array is empty
  PassArray=( btrfs-progs bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils glibc inetutils iproute2 iputils jfsutils less licenses logrotate lvm2 man-db man-pages mdadm netctl ntp pciutils pcmciautils procps-ng psmisc s-nail shadow sudo sysfsutils systemd-sysvcompat tar texinfo usbutils util-linux wget which xfsprogs gawk gcc-libs gettext gksu grep zip nano openssh pacman perl reiserfsprogs screenfetch sed unrar unzip vi vim xarchiver xorg-xedit xterm )
  ProgressArray " ${_Installing} ${_cli_tools} " # Install each one using pacstrap
  # Enable sshd
  arch_chroot "systemctl enable sshd.service" >/dev/null

  case $Kernel in
  1) DisplayProgress "${_Installing} ${_LTS} ${_kernel}" 50
    pacstrap /mnt linux-lts &>> feliz.log
    if [ -n ${IsInVbox} ] && [ $Scope != "Basic" ]; then # Installing in Virtualbox
      pacstrap /mnt virtualbox-guest-utils virtualbox-guest-modules-lts  virtualbox-guest-dkms &>> feliz.log
      echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf &>> feliz.log  # To overcome piix4 Virtualbox error
      cp virtualbox.conf /mnt/etc/modules-load.d/ &>> feliz.log
    fi
  ;;
  *) DisplayProgress "${_Installing} ${_Latest} ${_kernel}" 50
    pacstrap /mnt linux &>> feliz.log
    if [ -n ${IsInVbox} ] && [ $Scope != "Basic" ]; then # Installing latest kernel in Virtualbox
      pacstrap /mnt virtualbox-guest-utils virtualbox-guest-dkms &>> feliz.log
      echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf &>> feliz.log  # To overcome piix4 Virtualbox error
      cp virtualbox.conf /mnt/etc/modules-load.d/ &>> feliz.log
    fi
  esac

 # PrintOne "Installing opensource video drivers" ""
  pacstrap /mnt xf86-video-vesa xf86-video-nouveau &>> feliz.log # Install opensource video drivers
}

SetRootPassword() {
  Backtitle="${_Success} ${_Finished} $DIFFMIN ${_minutes} $DIFFSEC ${_seconds}"
  Title="${_Passwords}"
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    dialog --backtitle "$Backtitle" --title " - $Title - " --nocancel \
     --insecure --passwordbox "${_enter_password} ${_root}" 8 40 2> output.file
    Pass1=`cat output.file`
    dialog --backtitle "$Backtitle" --title "$Title" --nocancel \
      --insecure --passwordbox "${_enter_again} ${_root}" 8 40 2> output.file
    Pass2=`cat output.file`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      PrintOne "${_no_blank} ${_Try_again} ..."
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
     echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
     arch_chroot "passwd root" < /tmp/.passwd &>> feliz.log
     rm /tmp/.passwd &>> feliz.log
     Repeat="N"
    else
      PrintOne "${_no_match} ${_Try_again}"
    fi
  done
}

SetUserPassword() {
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    dialog --backtitle "$Backtitle" --title " - $Title - " --nocancel\
      --insecure --passwordbox "${_enter_password} $UserName" 8 40 2> output.file
    Pass1=`cat output.file`
    dialog --backtitle "$Backtitle" --title "$Title" --nocancel \
      --insecure --passwordbox "${_enter_again} ${UserName}" 8 40 2> output.file
    Pass2=`cat output.file`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      PrintOne "${_no_blank} ${_Try_again}"
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
      echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
      arch_chroot "passwd ${UserName}" < /tmp/.passwd &>> feliz.log
      rm /tmp/.passwd &>> feliz.log
      Repeat="N"
    else
      PrintOne "${_no_match} ${_Try_again}"
    fi
  done
}
