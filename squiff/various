#!/bin/bash

# Various functions - Dialog version

# Developed by Elizabeth Mills, incorporating some code adapted from
# the excellent Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# -------------------------      -------------------------
# Functions           Line       Functions           Line
# -------------------------      -------------------------
# PrintOne              44       SetGrubDevice        101
# DisplayProgress       47       arch_chroot          155
# ProgressArray         64       MountPartitions      150
# SetKernel             83       InstallKernel        169
# ConfirmVbox           95       SetRootPassword      266
# MakePartitionList    126       SetUserPassword      285

PrintOne() {  # Arguments: "Component" "Patient"
  dialog --backtitle "$Backtitle" --title " - Information - " --no-shadow --infobox "$1\n$2\n" 5 50 ; sleep 1 &
}

TPecho() { # For compatibility with Cliff
    PrintOne "$1" "$2"
}

DisplayProgress() { # Revised code for displaying progress for longer processes
  Estimate=$2 # Numeric value passed as multiple of 10
  local Message="$1" # Text passed to appear above progress bar
  local Sleep=$(( $Estimate / 10 )) # Set sleep period to one tenth of total time
  local Percent=0
  (
  until [ $Percent -gt 100 ]
  do
    echo "XXX"
    echo $Percent
    echo "$Message\nProcessing may continue after gauge shows 100%\nPlease be patient ..."
    echo "XXX"
    Percent=`expr $Percent + 10`
    sleep $Sleep
  done
  ) |
  dialog --backtitle "$Backtitle" --title " - Progress - " --no-shadow --gauge "" 9 60 0 &
}

ProgressArray() {
# For installing multiple programs with pacstrap and displaying gauge
  local Title=" $1 "
  # Receives PassArray comprising all the programs
  # 1) Count items in the array
  n=${#PassArray[*]};
  # 2) Redirect dialog commands input using substitution
  dialog --title "$Title" --no-shadow --gauge "" 8 60 < <(
  # 3) set counter - it will increase on each parse
   i=0
  # 4) read each item from the array
  for f in "${PassArray[@]}"
  do
    # ... calculate progress
    PCT=$(( 100*(++i)/n ))
    # ... update dialog box
    echo "XXX"
    echo "$PCT"
    echo "\n  Installing $f"
    echo "XXX"
    # ... install $f
    pacstrap /mnt $f &>> feliz.log
  done
  )
}

SetKernel() {
  local Message="The Long-Term-Support kernel (LTS) offers stabilty, while the Latest kernel has all the new features. If in doubt, choose LTS."
  listgen1 "LTS Latest"
  dialog --backtitle "$Backtitle" --title " - Choose your kernel - " --no-shadow --ok-button "Select" --nocancel --menu "The Long-Term-Support kernel (LTS) offers stabilty, while the Latest kernel has all the new features. If in doubt, choose LTS.\n" 12 60 6 "${Options[@]}" 2> output.file
  case $(cat output.file) in
    "LTS") Kernel=1 # Set the Kernel variable (1 = LTS; 2 = Latest)
    ;;
    "Latest") Kernel=2 # Set the Kernel variable (1 = LTS; 2 = Latest)
    ;;
    *) echo "${Debug}" >> feliz.log
  esac
}

ConfirmVbox() {
  local Message="It appears that feliz is running in Virtualbox. If you wish, feliz can install Virtualbox guest utilities and make appropriate settings for you.\n\nInstall Virtualbox guest utilities?"
    dialog --backtitle "$Backtitle" --title " - Virtualbox guest modules - " --no-shadow --yesno "$Message\n" 10 50
    RetVal=$?
    case $RetVal in
      0) IsInVbox="VirtualBox"
        Retry="N"
      ;;
      *) IsInVbox=""
        Retry="N"
    esac
}

SetGrubDevice() {
  DEVICE=""
  DevicesList="$(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd')";
  GrubDevice=""
  listgen1 "${DevicesList}"
  dialog --backtitle "$Backtitle" --title " - Devices - " --no-shadow --ok-button "Select" --menu "Select the device where Grub is to be installed.\nNote that if you do not select a device, Grub will not be installed, and you will have to make alternative arrangements for booting your new system.\n" 14 60 6 "${Options[@]}" 2> output.file
  RetVal=$?
  if [ $RetVal -gt 0 ]; then # <Cancel> selected
   GrubDevice=""
  else
   GrubDevice=$(cat output.file)
  fi
}

MountPartitions() {
  case $RootType in
  "") echo "Not formatting root partition" >> feliz.log
  ;;
  *) PrintOne "Preparing and mounting partitions" ""
    umount ${RootPartition} /mnt >/dev/null &>> feliz.log
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${RootPartition} | grep 'ext\|btrfs' | cut -c26-30` &>> feliz.log
    if [ ${CurrentType} ] && [ $RootType = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${RootPartition} &>> feliz.log
    elif [ $RootType = "btrfs" ]; then
      mkfs.btrfs -f ${RootPartition} &>> feliz.log
    else
      Partition=`echo $RootPartition | cut -c 6-` 2>> feliz.log
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${RootType} ${RootPartition} &>> feliz.log
    fi
  esac
  mount ${RootPartition} /mnt &>> feliz.log # eg: mount /dev/sda1 /mnt
  if [ ${SwapPartition} ]; then
    swapoff -a &>> feliz.log
    if [ $MakeSwap = "Y" ]; then
      Partition=`echo $SwapPartition | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mkswap ${Label} ${SwapPartition} &>> feliz.log # eg: mkswap -L Arch-Swap /dev/sda2
    fi
    swapon ${SwapPartition} &>> feliz.log # eg: swapon /dev/sda2
  fi
  local Counter=0
  for id in ${AddPartList}
  do
    umount ${id} /mnt${AddPartMount[$Counter]} >/dev/null &>> feliz.log
    mkdir -p /mnt${AddPartMount[$Counter]} &>> feliz.log  # eg: mkdir -p /mnt/home
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${AddPartType[$Counter]} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${AddPartType[$Counter]} = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${id} &>> feliz.log
    elif [ ${AddPartType[$Counter]} = "btrfs" ]; then
      mkfs.btrfs -f ${id} &>> feliz.log
    elif [ ${AddPartType[$Counter]} != "" ]; then
      Partition=`echo ${id} | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${AddPartType[$Counter]} ${id} &>> feliz.log # eg: mke2fs -L Arch-Home -t ext4 /dev/sda3
    fi
    mount ${id} /mnt${AddPartMount[$Counter]} &>> feliz.log # eg: mount /dev/sda3 /mnt/home
    Counter=$((Counter+1))
  done
}

InstallKernel() { # Kernel and some other core systems
  DisplayProgress "Installing bash" 40
  pacstrap /mnt base-devel bash &>> feliz.log
  # Create array of all the programs to pass to installing function
  PassArray=() # Ensure array is empty
  PassArray=( btrfs-progs cryptsetup dhcpcd gksu inetutils iproute2 iputils jfsutils licenses logrotate lvm2 man-db man-pages mdadm netctl ntp pciutils pcmciautils procps-ng psmisc s-nail systemd-sysvcompat usbutils wget xfsprogs zip nano openssh reiserfsprogs screenfetch unrar unzip vi vim xarchiver xorg-xedit xterm )
  ProgressArray " Installing cli tools " # Install each one using pacstrap
  # Enable sshd
  arch_chroot "systemctl enable sshd.service" >/dev/null

  case $Kernel in
  1) DisplayProgress "Installing LTS kernel" 50
    pacstrap /mnt linux-lts &>> feliz.log
  ;;
  *) DisplayProgress "Installing Latest kernel" 50
    pacstrap /mnt linux &>> feliz.log
  esac
  if [ -n ${IsInVbox} ] && [ $Scope != "Basic" ]; then # Installing in Virtualbox
    pacstrap /mnt virtualbox-guest-utils &>> feliz.log
    echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf 2>> feliz.log  # To overcome piix4 Virtualbox error
    cp virtualbox.conf /mnt/etc/modules-load.d/ 2>> feliz.log
  fi
 # PrintOne "Installing opensource video drivers" ""
  pacstrap /mnt xf86-video-vesa xf86-video-nouveau &>> feliz.log # Install opensource video drivers
}

SetRootPassword() {
  Backtitle="Success! Finished installing in $DIFFMIN minutes and $DIFFSEC seconds"
  Repeat="Y"
  ExtraMessage=""
  while [ $Repeat = "Y" ]
  do
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel \
     --insecure --passwordbox "$ExtraMessage\nEnter a password for root" 10 40 2> output.file
    Pass1=`cat output.file`
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel \
      --insecure --passwordbox "Re-enter password for root" 8 40 2> output.file
    Pass2=`cat output.file`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      ExtraMessage="Passwords cannot be blank. Try again ..."
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
     echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
     arch_chroot "passwd root" < /tmp/.passwd &>> feliz.log
     rm /tmp/.passwd &>> feliz.log
     Repeat="N"
    else
      ExtraMessage="Passwords don't match. Try again"
    fi
  done
  rm output.file
}

SetUserPassword() {
  Repeat="Y"
  ExtraMessage=""
  while [ $Repeat = "Y" ]
  do
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel\
      --insecure --passwordbox "$ExtraMessage\nEnter a password for $UserName" 10 40 2> output.file
    Pass1=`cat output.file`
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel \
      --insecure --passwordbox "Re-enter password for ${UserName}" 8 40 2> output.file
    Pass2=`cat output.file`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      ExtraMessage="Passwords cannot be blank. Try again"
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
      echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
      arch_chroot "passwd ${UserName}" < /tmp/.passwd &>> feliz.log
      rm /tmp/.passwd &>> feliz.log
      Repeat="N"
    else
      ExtraMessage="Passwords don't match. Try again"
    fi
  done
  rm output.file
}
