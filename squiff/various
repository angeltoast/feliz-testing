#!/bin/bash

# The Feliz installation scripts for Arch Linux
# 12 June 2016

# Semi-graphical interface
# /squiff/various
# Various functions for input/output, processing and installing

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# -------------------------      -------------------------
# Functions           Line       Functions           Line
# -------------------------      -------------------------
# arch_chroot           27       ConfirmReview        112
#                                SetGrubDevice        120
# TPecho                35       arch_chroot          155
# DisplayProgress       39       InstallKernel        134
# ProgressArray         58       AddCodecs            158
# Bugger                83       McInitCPIO           173
# SetKernel             87       Passwords            195
# ConfirmVbox           99       Finish               250
# -------------------------      -------------------------

arch_chroot() {  # From Lution AIS
  arch-chroot /mnt /bin/bash -c "${1}" &>> feliz.log
}

TPecho() { # Infobox
  dialog --backtitle "$Backtitle" --title " Information " --no-shadow --infobox "\n$1\n$2" 6 50 ; sleep 1 &
}

DisplayProgress() {                 # Displays timed progress bar for longer processes
  Estimate=$2                       # Numeric argument = multiple of 20
  local Message="$1"                # Text passed to appear above progress bar
  local Sleep=$(( $Estimate / 20 )) # Set sleep period to 5% of total time
  local Increment=$(( $Sleep * 100 / $Estimate )) # $Sleep as percentage of $Estimate
  local Percent=0
  (
  until [ $Percent -gt 100 ]
  do
    echo "XXX"
    echo $Percent
    echo "$Message\nProcessing may continue after gauge shows 100%\nPlease be patient ..."
    echo "XXX"
    Percent=`expr $Percent + $Increment`
    sleep $Sleep
  done
  ) |
  dialog --backtitle "$Backtitle" --title " Progress " --no-shadow --gauge "" 9 60 0 &
}

ProgressArray() { # For installing multiple programs with pacstrap and displaying gauge
  local Title="$1"
  # Receives PassArray comprising all the programs
  # 1) Count items in the array
  n=${#PassArray[*]};
  # 2) Redirect dialog commands input using substitution
  dialog --backtitle "$Backtitle" --title " $Title " --no-shadow --gauge "" 8 60 < <(
  # 3) set counter - it will increase on each parse
   i=0
  # 4) read each item from the array
  for f in "${PassArray[@]}"
  do
    # ... calculate progress
    PCT=$(( 100*(++i)/n ))
    # ... update dialog box
    echo "XXX"
    echo "$PCT"
    echo "\n  Installing $f"
    echo "XXX"
    # ... install $f
    pacstrap /mnt $f &>> feliz.log
  done
  )
}

Bugger() {
  dialog --backtitle "This shouldn't be happening" --title " Information " --no-shadow --infobox "\n      This is a bug\n\n           =á»˜= \n\n  It is probably harmless" 9 30
}

SetKernel() { # Note: Kernel commands linux & linux-lts include base/commonutils
  listgen1 "LTS Latest"
  dialog --backtitle "$Backtitle" --title " Choose your kernel " --no-shadow --ok-button "Select" --nocancel --menu "The Long-Term-Support kernel (LTS) offers stabilty, while the Latest kernel has all the new features. If in doubt, choose LTS.\n" 12 60 6 "${Options[@]}" 2> output.file
  case $(cat output.file) in
   "LTS") Kernel=1
   ;;
   "Latest") Kernel=2
   ;;
   *) Bugger
  esac
}

ConfirmVbox() {
  local Message="It appears that feliz is running in Virtualbox. If you wish, feliz can install Virtualbox guest utilities and make appropriate settings for you.\n\nInstall Virtualbox guest utilities?"
  dialog --backtitle "$Backtitle" --title " Virtualbox guest modules " --no-shadow --yesno "$Message\n" 10 50
  RetVal=$?
  case $RetVal in
    0) IsInVbox="VirtualBox"
      Retry="N"
    ;;
    *) IsInVbox=""
      Retry="N"
  esac
}

ConfirmReview() {
  dialog --backtitle "$Backtitle" --title " Review " --no-shadow --yesno "You have chosen to edit your choices for\n  $Response\n\nAre you sure?\n" 8 50
  RetVal=$?
  if [ $RetVal -ne 0 ]; then
    FinalCheck
  fi
}

SetGrubDevice() {
  DEVICE=""
  DevicesList="$(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd')";
  GrubDevice=""
  listgen1 "${DevicesList}"
  dialog --backtitle "$Backtitle" --title " Devices " --no-shadow --ok-button "Select" --menu "Select the device where Grub is to be installed.\nNote that if you do not select a device, Grub will not be installed, and you will have to make alternative arrangements for booting your new system.\n" 14 60 6 "${Options[@]}" 2> output.file
  RetVal=$?
  if [ $RetVal -gt 0 ]; then # <Cancel> selected
   GrubDevice=""
  else
   GrubDevice=$(cat output.file)
  fi
}

InstallKernel() { # Kernel and some other core systems

  LANG=C # Temporary addition to overcome bug in Arch man pages
  
  case $Kernel in # Selected kernel
    1) DisplayProgress "Installing LTS kernel" 60
      pacstrap /mnt linux-lts &>> feliz.log
      
      PassArray=() # Prepare the array for additional components for lts
      PassArray=( cryptsetupdhcpcd dialog diffutils file gettext inetutils iproute2 iputils jfsutils licenses logrotate lvm2 mdadm nano netctl pacman pciutils pcmciautils procps-ng psmisc reiserfsprogs s-nail sed systemd-sysvcompat tar usbutils vi which xfsprogs autoconf automake binutils bison fakeroot flex gcc groff libtool make patch pkg-config sudo )
      ProgressArray "Installing core packages" # Install each one using pacstrap
      
      PassArray=()  # Prepare array for additional cli programs
      PassArray=( btrfs-progs gamin gksu ntp wget openssh screenfetch unrar unzip vim xarchiver xorg-xedit xterm )
      ProgressArray "Installing cli tools" # Install each one using pacstrap
    ;;
    *) DisplayProgress "Installing Latest kernel" 60
      pacstrap /mnt linux &>> feliz.log
      
      PassArray=() # Prepare the array for additional components
      PassArray=( cryptsetup dhcpcd dialog diffutils file gettext inetutils iproute2 iputils jfsutils licenses logrotate lvm2 mdadm nano netctl pacman pciutils pcmciautils procps-ng psmisc reiserfsprogs s-nail sed systemd-sysvcompat tar usbutils vi which xfsprogs automake binutils bison fakeroot flex gcc groff libtool make patch pkg-config sudo )
      ProgressArray "Installing core packages" # Install each one using pacstrap
      
      PassArray=()  # Prepare array for additional cli programs
      PassArray=( btrfs-progs gamin gksu ntp wget openssh screenfetch unrar unzip vim xarchiver xorg-xedit xterm )
      ProgressArray "Installing cli tools" # Install each one using pacstrap
  esac

  # Enable sshd
  arch_chroot "systemctl enable sshd.service" >/dev/null
      
  # And finally the man pages
  DisplayProgress "Installing man-db & man-pages - this may take some time" 120
  pacstrap /mnt man-db man-pages &>> feliz.log
  
}

AddCodecs() { # Various codecs and graphical environment
  
  PassArray=() # Prepare for codecs
  PassArray=( a52dec autofs faac faad2 flac lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv wavpack x264 gstreamer0.10-plugins pulseaudio pulseaudio-alsa libdvdcss dvd+rw-tools dvdauthor dvgrab flashplugin b43-fwcutter ipw2100-fw ipw2200-fw zd1211-firmware iw wireless_tools wpa_actiond )
  ProgressArray "Adding Codecs, etc" # Install each one using pacstrap
  
  PassArray=() # Prepare for graphics
  PassArray=( xf86-video-vesa xf86-video-nouveau xf86-input-synaptics xorg-server xorg-server-utils xorg-xinit xorg-twm )
  ProgressArray "Open-source video drivers & graphical environment" # Install each one using pacstrap

}

McInitCPIO() { 
  case $Kernel in
    1) TPecho "Running mkinitcpio for lts kernel"
    arch_chroot "mkinitcpio -p linux-lts"
    ;;
    *) TPecho "Running mkinitcpio for latest kernel"
    arch_chroot "mkinitcpio -p linux"
  esac
}

SetRootPassword() {
  Backtitle="Success! Finished installing in $DIFFMIN minutes and $DIFFSEC seconds"
  Repeat="Y"
  ExtraMessage=""
  while [ $Repeat = "Y" ]
  do
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel \
     --insecure --passwordbox "$ExtraMessage\nEnter a password for root" 10 40 2> output.file
    Pass1=`cat output.file`
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel \
      --insecure --passwordbox "Re-enter password for root" 8 40 2> output.file
    Pass2=`cat output.file`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      ExtraMessage="Passwords cannot be blank. Try again ..."
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
     echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
     arch_chroot "passwd root" < /tmp/.passwd &>> feliz.log
     rm /tmp/.passwd &>> feliz.log
     Repeat="N"
    else
      ExtraMessage="Passwords don't match. Try again"
    fi
  done
  rm output.file
}

SetUserPassword() {
  Repeat="Y"
  ExtraMessage=""
  while [ $Repeat = "Y" ]
  do
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel\
      --insecure --passwordbox "$ExtraMessage\nEnter a password for $UserName" 10 40 2> output.file
    Pass1=`cat output.file`
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel \
      --insecure --passwordbox "Re-enter password for ${UserName}" 8 40 2> output.file
    Pass2=`cat output.file`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      ExtraMessage="Passwords cannot be blank. Try again"
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
      echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
      arch_chroot "passwd ${UserName}" < /tmp/.passwd &>> feliz.log
      rm /tmp/.passwd &>> feliz.log
      Repeat="N"
    else
      ExtraMessage="Passwords don't match. Try again"
    fi
  done
  rm output.file
}

DisplayFinished() {
  dialog --backtitle "$Backtitle" --no-shadow --msgbox "\nCongratulations, installation is complete, and it is time for Feliz to shut down the computer. Remember to remove the installation media before restarting.\nHave fun!" 11 50
}
