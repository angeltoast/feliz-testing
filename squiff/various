#!/bin/bash

# various - Various functions - Dialog version

# Developed by Elizabeth Mills, incorporating some code adapted from
# the excellent Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# -------------------------      -------------------------
# Functions           Line       Functions           Line
# -------------------------      -------------------------
# Various input/output  22       arch_chroot          242
# Internet connection   87       SetGrubDevice        246
# Mirrorlist           131       MountPartitions      283
# SetScope             159       InstallKernel        342
# SetKernel            193       TestExistingDM       336
# ConfirmVbox          206       SetRootPassword      365
# MakePartitionList    229       SetUserPassword      394

TPecho() { # For displaying status while running on auto
  # Different versions in cliff and squiff
  # squiff version is to be a progress gauge
  CurrentTime=$(date +%s)
  Difference=$(( $CurrentTime-$StartTime ))
  DIFFMIN=$(( $Difference/60 ))
  DIFFSEC=$(( $Difference % 60 ))
  (( Progress+=5 ))
  (
  echo $Progress
  echo "XXX"
  $Progress
  echo "After ${DIFFMIN}minutes ${DIFFSEC}seconds\n$1"
  echo "XXX"
  sleep 1
  ) |

  dialog --title " Installation " --gauge "" 8 70 0
}

PrintOne() {
 # Just because 
 dialog --title " Information " --infobox "$1" 10 30 ; sleep 4  
}

read_timed() {
 # Just because 
 dialog --title " Information " --infobox "$1" 10 30 ; sleep 4  
}

SetKernel() {
  local Message="Choose your kernel\nThe Long-Term-Support kernel (LTS) offers stabilty,\nwhile the Latest kernel has all the new features.\nIf in doubt, choose LTS."
  listgen1 "LTS Latest" "Kernels" "nocancel"
  case $(cat output.file) in
    "LTS") Kernel=1 # Set the Kernel variable (1 = LTS; 2 = Latest)
    ;;
    "Latest") Kernel=2 # Set the Kernel variable (1 = LTS; 2 = Latest)
    ;;
    *) echo "Illogical, cap'n" >> feliz.log
  esac
}

ConfirmVbox() {
  Retry="Y"
  until [ $Retry = "N" ]
  do
    local Message="It appears that feliz is running in Virtualbox.\nIf it is, feliz can install Virtualbox guest utilities and make appropriate settings for you.\n\nInstall Virtualbox guest utilities? (y/n): "
    dialog --backtitle "$Backtitle" --title " auto-partition " \
    --yesno "\n$Message\n" 10 40
    # Use $? (exit status) ...
    case $? in
      0) IsInVbox="VirtualBox"
        Retry="N"
      ;;
      *) IsInVbox=""
        Retry="N"
    esac
  done
}

MakePartitionList() {
# Call BuildPartitionLists function to generate an array of partitions
# This is not a first call, so first empty the existing array
 	local x=0
  local HowMany="${#PartitionArray[@]}"
  until [ ${x} -eq ${HowMany} ]
  do
    unset PartitionArray[$x]
    x=$((x+1))
  done
  BuildPartitionLists # Then rebuild
}

arch_chroot() {  # From Lution AIS
  arch-chroot /mnt /bin/bash -c "${1}" 2>> feliz.log
}  

SetGrubDevice() {
  DEVICE=""
  DevicesList="$(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd')";
  GrubDevice=""
	local Message="Select the device where Grub is to be installed.\nNote that if you select the <Cancel> option, Grub will not be installed, and you will have to make alternative arrangements for booting your new system."
	listgen1 "${DevicesList}" "Devices" ""
  if [ $Response -gt 0 ]; then
   GrubDevice=""
  else
   GrubDevice=$Result
  fi
}

InstallationMode() { # New function in each UI branch
Passed="Entering installation stage."
local Message="If you are re-using existing partitions, the system may pause to ask you to confirm that you wish to mount them. This may happen more than once ...\n'y' would be an appropriate response."
dialog --backtitle "$Backtitle" --title " auto-partition " \
    --msgbox "\n$Message" 15 40
}

MountPartitions() {
  case $RootType in
    "") TPecho "Not formatting root partition"
    ;;
    *) TPecho "Formatting /root partition"
      umount ${RootPartition} /mnt >/dev/null 2>> feliz.log
      # Check if replacing existing ext3/4 partition with btrfs
      CurrentType=`file -sL ${RootPartition} | grep 'ext\|btrfs' | cut -c26-30`
      if [ ${CurrentType} ] && [ $RootType = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
        btrfs-convert ${RootPartition}
      elif [ $RootType = "btrfs" ]; then
        mkfs.btrfs -f ${RootPartition} 2>> feliz.log
      else
        Partition=`echo $RootPartition | cut -c 6-`
        Label="${LabellingArray[${Partition}]}"
        if [ -n "${Label}" ]; then
          Label="-L ${Label}"
        fi
        mke2fs ${Label} -t ${RootType} ${RootPartition}
      fi
    esac
    TPecho "Mounting /root partition"	
    mount ${RootPartition} /mnt 2>> feliz.log # eg: mount /dev/sda1 /mnt
    if [ ${SwapPartition} ]; then
      swapoff -a 2>> feliz.log
      if [ $MakeSwap = "Y" ]; then
        TPecho "Making /swap partition"
        Partition=`echo $SwapPartition | cut -c 6-`
        Label="${LabellingArray[${Partition}]}"
        if [ -n "${Label}" ]; then
          Label="-L ${Label}"
        fi
        mkswap ${Label} ${SwapPartition} # eg: mkswap -L Arch-Swap /dev/sda2
      fi
      TPecho "Activating /swap"
      swapon ${SwapPartition} 2>> feliz.log # eg: swapon /dev/sda2
    fi

  local Counter=0
  for id in ${AddPartList}
  do
    TPecho "Mounting ${id} as ${AddPartMount[$Counter]}"
    umount ${id} /mnt${AddPartMount[$Counter]} /mnt >/dev/null 2>> feliz.log
    mkdir -p /mnt${AddPartMount[$Counter]} 2>> feliz.log	# eg: mkdir -p /mnt/home
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${AddPartType[$Counter]} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${AddPartType[$Counter]} = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${id}
    elif [ ${AddPartType[$Counter]} = "btrfs" ]; then
      mkfs.btrfs -f ${id} 2>> feliz.log
    elif [ ${AddPartType[$Counter]} != "" ]; then
      Partition=`echo ${id} | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${AddPartType[$Counter]} ${id} # eg: mke2fs -L Arch-Home -t ext4 /dev/sda3
    fi
    mount ${id} /mnt${AddPartMount[$Counter]} 2>> feliz.log	# eg: mount /dev/sda3 /mnt/home
		Counter=$((Counter+1))
	done
}

InstallKernel() {
  TPecho "Installing cli tools"
  pacstrap /mnt  base-devel bash  btrfs-progs bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext gksu glibc grep gzip inetutils iproute2 iputils jfsutils less licenses logrotate lvm2 man-db man-pages mdadm nano netctl ntp openssh pacman pciutils pcmciautils perl procps-ng psmisc reflector reiserfsprogs s-nail screenfetch sed shadow sudo sysfsutils systemd-sysvcompat tar texinfo unrar unzip usbutils util-linux vi vim wget which xfsprogs xarchiver 2>> feliz.log
  arch_chroot "systemctl enable sshd.service" >/dev/null
  case $Kernel in
    1) TPecho "Installing LTS kernel"
        pacstrap /mnt linux-lts
        if [ -n ${IsInVbox} ] && [ $Scope != "Basic" ]; then # Installing in Virtualbox
          TPecho "Installing virtualbox guest modules"
          pacstrap /mnt virtualbox-guest-utils virtualbox-guest-modules-lts  virtualbox-guest-dkms
          echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf 2>> feliz.log  # To overcome piix4 Virtualbox error
          cp virtualbox.conf /mnt/etc/modules-load.d/ 2>> feliz.log
        fi
      ;;  
    *) TPecho "Installing Latest kernel"
        pacstrap /mnt linux
        if [ -n ${IsInVbox} ] && [ $Scope != "Basic" ]; then # Installing latest kernel in Virtualbox
          TPecho "Installing virtualbox guest modules"
          pacstrap /mnt virtualbox-guest-utils virtualbox-guest-dkms
          echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf 2>> feliz.log  # To overcome piix4 Virtualbox error
          cp virtualbox.conf /mnt/etc/modules-load.d/ 2>> feliz.log
        fi
  esac
  TPecho "Installing opensource video drivers"
  pacstrap /mnt xf86-video-vesa xf86-video-nouveau 2>> feliz.log # Install opensource video drivers
}

TestExistingDM() {
  # Test for existing display manager and disable if necessary
  arch-chroot /mnt touch etc/output.log # Create empty file
  arch-chroot /mnt systemctl list-unit-files | grep '(*dm|slim)\.service' > mnt/etc/output.log
  DMLine=`cat /mnt/etc/output.log`
  local Counter=1
  case ${DMLine} in
    "") TPecho "No previous DM discovered"
    ;;
    *) local Continue="Y"
      while [ ${Continue} = "Y" ]
      do
        ExDM=`echo $DMLine  | cut -f ${Counter} -d ' '` # First of pair is DM
        if [ -z ${ExDM} ]; then
          Continue="N" # Quit if no further entries
          break
        fi
        Counter=$((Counter+1))
        ExDMStatus=`echo $DMLine  | cut -f ${Counter} -d ' '` # Second is status
        case ${ExDMStatus} in
          "enabled") arch_chroot "systemctl disable ${ExDM}" >/dev/null
          ;;
          *) TPecho "${ExDM} already disabled"
        esac
        Counter=$((Counter+1))
      done
  esac
}

SetRootPassword() {
  if [ $Scope = "Basic" ]; then
    PrintOne "Success!\nFinished installing basic Arch in $DIFFMIN minutes and $DIFFSEC seconds"
  else
    PrintOne "Success!\nFinished installing Arch with ... \n${LuxuriesList}\n... in $DIFFMIN minutes and $DIFFSEC seconds"
  fi
  Backtitle="Finally we need to set passwords ..."
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    Message="Enter a password for root: "
    dialog --backtitle "$Backtitle" --title " User password " \
      --inputbox "\n$Message\n" 18 50 2> output.file
    Pass1=`cat output.file`
    Message="Re-enter root password: "
    dialog --backtitle "$Backtitle" --title " User password " \
      --inputbox "\n$Message\n" 18 50 2> output.file
    Pass2=`cat output.file`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      PrintOne "Passwords cannot be blank. Try again ..."
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
     echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd 2>> feliz.log
     arch_chroot "passwd root" < /tmp/.passwd >/dev/null
     rm /tmp/.passwd 2>> feliz.log
     Repeat="N"
    else
      PrintOne "Passwords don't match. Try again"
    fi
  done
}

SetUserPassword() {
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    read -s -p "Enter a password for $UserName: " Pass1
    Message="Enter a password for $UserName:: "
    dialog --backtitle "$Backtitle" --title " User password " \
      --inputbox "\n$Message\n" 18 50 2> output.file
    Pass1=`cat output.file`
    Message="Re-enter ${UserName}'s password: "
    dialog --backtitle "$Backtitle" --title " User password " \
      --inputbox "\n$Message\n" 18 50 2> output.file
    Pass2=`cat output.file`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      PrintOne "Passwords cannot be blank. Try again ..."
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
      echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd 2>> feliz.log
      arch_chroot "passwd ${UserName}" < /tmp/.passwd >/dev/null
      rm /tmp/.passwd 2>> feliz.log
      Repeat="N"
    else
      PrintOne "Passwords don't match. Try again"
    fi
  done
}
