#!/bin/bash

# various - Various functions - Dialog version

# Developed by Elizabeth Mills, incorporating some code adapted from
# the excellent Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# -------------------------      -------------------------
# Functions           Line       Functions           Line
# -------------------------      -------------------------
# Various input/output  22       arch_chroot           93
# Internet connection   87       SetGrubDevice         97
# Mirrorlist           131       MountPartitions      117
# SetScope             159       InstallKernel        180
# SetKernel            193       TestExistingDM       196
# ConfirmVbox          206       SetRootPassword      233
# MakePartitionList    229       SetUserPassword      253

TPecho() { # For displaying status while running on auto
  # Different versions in cliff and squiff
  CurrentTime=$(date +%s)
  Difference=$(( $CurrentTime-$StartTime ))
  DIFFMIN=$(( $Difference/60 ))
  DIFFSEC=$(( $Difference % 60 ))
  (( Progress+=3 ))
  (
  echo $Progress
  echo "XXX"
  echo "After ${DIFFMIN}minutes ${DIFFSEC}seconds\n$1"
  echo "XXX"
  sleep 1
  ) |
  dialog --title " Installation " --gauge "" 8 70 0
}

PrintOne() {
 # Just because 
 dialog --title " Information " --infobox "$1" 6 40 ; sleep 1
}

read_timed() {
 # Just because 
 dialog --title " Information " --infobox "$1" 8 30 ; sleep 1
}

SetKernel() {
  local Message="Choose your kernel\nThe Long-Term-Support kernel (LTS) offers stabilty,\nwhile the Latest kernel has all the new features.\nIf in doubt, choose LTS."
  listgen1 "LTS Latest" "Kernels" "nocancel"
  case $(cat output.file) in
    "LTS") Kernel=1 # Set the Kernel variable (1 = LTS; 2 = Latest)
    ;;
    "Latest") Kernel=2 # Set the Kernel variable (1 = LTS; 2 = Latest)
    ;;
    *) echo "Illogical, cap'n" >> feliz.log
  esac
}

ConfirmVbox() {
  Retry="Y"
  until [ $Retry = "N" ]
  do
    local Message="It appears that feliz is running in Virtualbox.\nIf it is, feliz can install Virtualbox guest utilities and make appropriate settings for you.\n\nInstall Virtualbox guest utilities? (y/n): "
    dialog --backtitle "$Backtitle" --title " auto-partition " \
    --yesno "\n$Message\n" 10 40
    # Use $? (exit status) ...
    case $? in
      0) IsInVbox="VirtualBox"
        Retry="N"
      ;;
      *) IsInVbox=""
        Retry="N"
    esac
  done
}

MakePartitionList() {
# Call BuildPartitionLists function to generate an array of partitions
# This is not a first call, so first empty the existing array
 	local x=0
  local HowMany="${#PartitionArray[@]}"
  until [ ${x} -eq ${HowMany} ]
  do
    unset PartitionArray[$x]
    x=$((x+1))
  done
  BuildPartitionLists # Then rebuild
}

arch_chroot() {  # From Lution AIS
  arch-chroot /mnt /bin/bash -c "${1}" &>> feliz.log
}  

SetGrubDevice() {
  DEVICE=""
  DevicesList="$(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd')";
  GrubDevice=""
	local Message="Select the device where Grub is to be installed.\nNote that if you select the <Cancel> option, Grub will not be installed, and you will have to make alternative arrangements for booting your new system."
	listgen1 "${DevicesList}" "Devices" ""
  if [ $? -gt 0 ]; then # <Cancel> selected
   GrubDevice=""
  else
   GrubDevice=$(cat output.file)
  fi
}

InstallationMode() { # New function in each UI branch
Passed="Entering installation stage."
local Message="If you are re-using existing partitions, the system may pause to ask you to confirm that you wish to mount them. This may happen more than once ...\n'y' would be an appropriate response."
dialog --backtitle "$Backtitle" --title " auto-partition " \
    --msgbox "\n$Message" 15 40
}

MountPartitions() {
  case $RootType in
  "") echo "Not formatting root partition" >> feliz.log
  ;;
  *) echo "Formatting /root partition" >> feliz.log
    umount ${RootPartition} /mnt >/dev/null &>> feliz.log
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${RootPartition} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${CurrentType} ] && [ $RootType = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${RootPartition} &>> feliz.log
    elif [ $RootType = "btrfs" ]; then
      mkfs.btrfs -f ${RootPartition} &>> feliz.log
    else
      Partition=`echo $RootPartition | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${RootType} ${RootPartition} &>> feliz.log
    fi
  esac
  TPecho "Mounting /root partition"	
  mount ${RootPartition} /mnt &>> feliz.log # eg: mount /dev/sda1 /mnt
  if [ ${SwapPartition} ]; then
    swapoff -a &>> feliz.log &>> feliz.log
    if [ $MakeSwap = "Y" ]; then
      TPecho "Making /swap partition"
      Partition=`echo $SwapPartition | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mkswap ${Label} ${SwapPartition} &>> feliz.log # eg: mkswap -L Arch-Swap /dev/sda2
    fi
    TPecho "Activating /swap"
    swapon ${SwapPartition} &>> feliz.log # eg: swapon /dev/sda2
  fi
  local Counter=0
  for id in ${AddPartList}
  do
    TPecho "Mounting ${id} as ${AddPartMount[$Counter]}"
    umount ${id} /mnt${AddPartMount[$Counter]} /mnt >/dev/null &>> feliz.log
    mkdir -p /mnt${AddPartMount[$Counter]} &>> feliz.log	# eg: mkdir -p /mnt/home
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${AddPartType[$Counter]} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${AddPartType[$Counter]} = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${id} &>> feliz.log
    elif [ ${AddPartType[$Counter]} = "btrfs" ]; then
      mkfs.btrfs -f ${id} &>> feliz.log
    elif [ ${AddPartType[$Counter]} != "" ]; then
      Partition=`echo ${id} | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${AddPartType[$Counter]} ${id} &>> feliz.log # eg: mke2fs -L Arch-Home -t ext4 /dev/sda3
    fi
    mount ${id} /mnt${AddPartMount[$Counter]} &>> feliz.log	# eg: mount /dev/sda3 /mnt/home
		Counter=$((Counter+1))
	done
}

InstallKernel() {
  TPecho "Installing cli tools"
  pacstrap /mnt  base-devel bash  btrfs-progs bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext gksu glibc grep gzip inetutils iproute2 iputils jfsutils less licenses logrotate lvm2 man-db man-pages mdadm nano netctl ntp openssh pacman pciutils pcmciautils perl procps-ng psmisc reflector reiserfsprogs s-nail screenfetch sed shadow sudo sysfsutils systemd-sysvcompat tar texinfo unrar unzip usbutils util-linux vi vim wget which xfsprogs xarchiver &>> feliz.log
  arch_chroot "systemctl enable sshd.service" >/dev/null
  case $Kernel in
  1) TPecho "Installing LTS kernel"
    pacstrap /mnt linux-lts &>> feliz.log
    if [ -n ${IsInVbox} ] && [ $Scope != "Basic" ]; then # Installing in Virtualbox
      TPecho "Installing virtualbox guest modules"
      pacstrap /mnt virtualbox-guest-utils virtualbox-guest-modules-lts  virtualbox-guest-dkms &>> feliz.log
      echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf &>> feliz.log  # To overcome piix4 Virtualbox error
      cp virtualbox.conf /mnt/etc/modules-load.d/ &>> feliz.log
    fi
  ;;  
  *) TPecho "Installing Latest kernel"
    pacstrap /mnt linux &>> feliz.log
    if [ -n ${IsInVbox} ] && [ $Scope != "Basic" ]; then # Installing latest kernel in Virtualbox
      TPecho "Installing virtualbox guest modules"
      pacstrap /mnt virtualbox-guest-utils virtualbox-guest-dkms &>> feliz.log
      echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf &>> feliz.log  # To overcome piix4 Virtualbox error
      cp virtualbox.conf /mnt/etc/modules-load.d/ &>> feliz.log
    fi
  esac
  TPecho "Installing opensource video drivers"
  pacstrap /mnt xf86-video-vesa xf86-video-nouveau &>> feliz.log # Install opensource video drivers
}

TestExistingDM() {
  # Test for existing display manager and disable if necessary
  arch-chroot /mnt touch etc/output.log  &>> feliz.log # Create empty file
  arch-chroot /mnt systemctl list-unit-files | grep '(*dm|slim)\.service' > mnt/etc/output.log &>> feliz.log
  DMLine=`cat /mnt/etc/output.log`
  local Counter=1
  case ${DMLine} in
  "") TPecho "No previous DM discovered"
  ;;
  *) local Continue="Y"
    while [ ${Continue} = "Y" ]
    do
      ExDM=`echo $DMLine  | cut -f ${Counter} -d ' '` # First of pair is DM
      if [ -z ${ExDM} ]; then
        Continue="N" # Quit if no further entries
        break
      fi
      Counter=$((Counter+1))
      ExDMStatus=`echo $DMLine  | cut -f ${Counter} -d ' '` # Second is status
      case ${ExDMStatus} in
      "enabled") arch_chroot "systemctl disable ${ExDM}" >/dev/null
      ;;
      *) TPecho "${ExDM} already disabled"
      esac
      Counter=$((Counter+1))
    done
  esac
}

SetRootPassword() {
  Backtitle="Success! Finished installing in $DIFFMIN minutes and $DIFFSEC seconds"
  Title=" Passwords "
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    dialog --backtitle "$Backtitle" --title "$Title" --nocancel \
     --insecure --passwordbox "Enter a password for root" 8 40 2> output.file
    Pass1=`cat output.file`
    dialog --backtitle "$Backtitle" --title "$Title" --nocancel \
      --insecure --passwordbox "Re-enter root password" 8 40 2> output.file
    Pass2=`cat output.file`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      PrintOne "Passwords cannot be blank. Try again ..."
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
     echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd &>> feliz.log
     arch_chroot "passwd root" < /tmp/.passwd >/dev/null
     rm /tmp/.passwd &>> feliz.log
     Repeat="N"
    else
      PrintOne "Passwords don't match. Try again"
    fi
  done
}

SetUserPassword() {
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    dialog --backtitle "$Backtitle" --title "$Title" --nocancel\
      --insecure --passwordbox "Enter a password for $UserName" 8 40 2> output.file
    Pass1=`cat output.file`
    dialog --backtitle "$Backtitle" --title "$Title" --nocancel \
      --insecure --passwordbox "Re-enter ${UserName}'s password" 8 40 2> output.file
    Pass2=`cat output.file`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      PrintOne "Passwords cannot be blank. Try again"
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
      echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd &>> feliz.log
      arch_chroot "passwd ${UserName}" < /tmp/.passwd >/dev/null
      rm /tmp/.passwd &>> feliz.log
      Repeat="N"
    else
      PrintOne "Passwords don't match. Try again"
    fi
  done
}
