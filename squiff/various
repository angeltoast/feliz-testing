#!/bin/bash

# The Feliz installation scripts for Arch Linux
# 17 June 2016

# Semi-graphical interface
# /squiff/various
# Various functions for input/output, processing and installing

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# -------------------------      -------------------------
# Functions           Line       Functions           Line
# -------------------------      -------------------------
# arch_chroot           29       ConfirmReview        161
# listgen1 & 2          35       SetGrubDevice        179
# TPecho                72       ConnectionSpeed      202
# InstallFile           76
# DisplayProgress       97       InstallKernel        314
# ProgressArray        117       AddCodecs            341
# Bugger               141       McInitCPIO           353
# SetKernel            146       Passwords            363
# ConfirmVbox          156       Finish               418
# -------------------------      -------------------------

arch_chroot() {  # From Lution AIS
  arch-chroot /mnt /bin/bash -c "${1}" &>> feliz.log
}

#
# Menuing functions - listgen1 and listgen2
# Both functions prepare the array Options[@] for display in a Dialog menu
#
listgen1() { # $1 = String array of items
  Counter=0
  Options=() # Empty the array
  # Prepare $1 for dialog menu
  for item in $1 # Prepare string array of list items passed as $1
  do
    Counter=$((Counter+1))
    Options[${Counter}]="$item"
    Counter=$((Counter+1))
    Options[${Counter}]="-"
  done
}

listgen2() {
  Options=() # Empty the array
  Counter=0
  for item in $1; do
    Items[${Counter}]=$item
    Counter=$((Counter+1))
  done
  Counter=0
  local ItemCounter=0
  # Import the complex array
  name=$2[@]
  LongName=("${!name}")
  # Combine for dialog menu
  for item in "${LongName[@]}"
  do
    Options[$((Counter))]="${Items[${ItemCounter}]}"
    Options[$((Counter+1))]="$item"
    Counter=$((Counter+2))
    ItemCounter=$((ItemCounter+1))
  done
}

TPecho() { # Infobox
  dialog --backtitle "$Backtitle" --title " Information " --no-shadow --infobox "\n$1\n$2" 6 50 ; sleep 1 &
}

InstallFile() {   # Find download file size and calculate install time
  
  FileName="$1"   # Passed by caller

lsblk
read

  FileList=$(pacstrap /mnt --print-format='%s' ${FileName} 2> feliz.log)   # Get contents list of sizes to variable
  exit
  LineCount=$(echo $FileList | wc -w) # Count lines
  
  read -p "$FileName has $LineCount lines"
  echo $FileList
  
  Total=0
  for line in $FileList  # If more than one, add them all
  do
     Total=$((Total+line))
  done
   
  read -p "Total file size = $Total bytes"
  
    FileSize=$Total
    
    DownloadTime=$(( FileSize / connection_speed ))
    
    # In case result is zero
    until [ $DownloadTime -gt 0 ]
    do
      download_size=$(( FileSize * 10 ))
      DownloadTime=$(( download_size / connection_speed ))
    done
  
    
    # 2) Use system speed to calculate processing time for file based on download seconds
    if [ $total_MHz -gt 0 ]; then
      ProcessTime=$(( DownloadTime / total_MHz )) 
    else
      ProcessTime=$(( DownloadTime )) 
    fi
    # In case of zero
    if [ $ProcessTime -eq 0 ]; then
      ProcessTime=1
    fi
    
    # Calculate write-to-disk time
    WriteToDisk=$(( ProcessTime * write_factor ))
    
    # Install time is 1 + 2 + 3
    InstallTime=$(( DownloadTime + ProcessTime + WriteToDisk ))
    InstallTime=$(( InstallTime / 10 * 9 ))  # Add safety margin
    
    # Decide whether to use gauge or message, based on InstallTime
    if [ $InstallTime -ge 10 ]; then
      DisplayProgress "Installing $FileName" ${InstallTime}
      pacstrap /mnt "$FileName" &>feliz.log              # Start installation
    else
      TPecho "Installing ${FileName}"
      pacstrap /mnt "$FileName" &>feliz.log              # Start installation
    fi
    
}

DisplayProgress() { # Displays timed progress bar for longer processes
  Estimate=$2                            # Numeric argument = seconds
  local Message="$1"                     # Text argument to appear above progress bar
  local Sleep=0
  local TenPercent=$(( Estimate / 10 ))  # Get 10% of total time
  if [ $TenPercent -gt 0 ]; then         # Set sleep
    Sleep=$TenPercent
  else
    Sleep=1
  fi
  local Percent=0
  (
  until [ $Percent -gt 100 ]
  do
    echo "XXX"
    echo $Percent
    echo "$Message\nProcessing may continue after gauge shows 100%\nPlease be patient ..."
    echo "XXX"
    Percent=$(($Percent + 10))
    sleep $Sleep
  done
  ) |
  dialog --backtitle "$Backtitle" --title " Progress " --no-shadow --gauge "" 9 60 0 &
}

ProgressArray() { # For installing multiple programs with pacstrap and displaying gauge
  local Title="$1"
  # Receives PassArray comprising all the programs
  # 1) Count items in the array
  n=${#PassArray[*]};
  # 2) Redirect dialog commands input using substitution
  dialog --backtitle "$Backtitle" --title " $Title " --no-shadow --gauge "" 8 60 < <(
  # 3) set counter - it will increase on each parse
   i=0
  # 4) read each item from the array
  for f in "${PassArray[@]}"
  do
    # ... calculate progress
    PCT=$(( 100*(++i)/n ))
    # ... update dialog box
    echo "XXX"
    echo "$PCT"
    echo "\n  Installing $f"
    echo "XXX"
    # ... install $f
    pacstrap /mnt $f &>> feliz.log
  done
  )
}

Bugger() {
  dialog --backtitle "This shouldn't be happening" --title " Information " --no-shadow --infobox "\n      This is a bug\n\n           =á»˜= \n\n  It is probably harmless\n\n    Error $bugger at Line $LINENO\n\n      Check feliz.output" 12 30
}

SetKernel() { # Note: Kernel commands linux & linux-lts include base/commonutils
  listgen1 "LTS Latest"
  dialog --backtitle "$Backtitle" --title " Choose your kernel " --no-shadow --ok-button "Select" --nocancel --menu "The Long-Term-Support kernel (LTS) offers stabilty, while the Latest kernel has all the new features. If in doubt, choose LTS.\n" 12 60 6 "${Options[@]}" 2> feliz.output
  case $(cat feliz.output) in
   "LTS") Kernel=1
   ;;
   "Latest") Kernel=2
   ;;
   *) Bugger
  esac
}

ConfirmVbox() {
  local Message="It appears that feliz is running in Virtualbox. If you wish, feliz can install Virtualbox guest utilities and make appropriate settings for you.\n\nInstall Virtualbox guest utilities?"
  dialog --backtitle "$Backtitle" --title " Virtualbox guest modules " --no-shadow --yesno "$Message\n" 10 50
  RetVal=$?
  case $RetVal in
    0) IsInVbox="VirtualBox"
      Retry="N"
    ;;
    *) IsInVbox=""
      Retry="N"
  esac
}

ConfirmReview() {
  dialog --backtitle "$Backtitle" --title " Review " --no-shadow --yesno "You have chosen to edit your choices for\n  $Response\n\nAre you sure?\n" 8 50
  RetVal=$?
  if [ $RetVal -ne 0 ]; then
    FinalCheck
  fi
}

SetGrubDevice() {
  DEVICE=""
  DevicesList="$(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd')";
  GrubDevice=""
  listgen1 "${DevicesList}"
  while :
  do
    dialog --backtitle "$Backtitle" --title " Devices " --help-button --no-shadow --ok-button "Select" --menu "Select the device where Grub is to be installed.\nNote that if you do not select a device, Grub will not be installed, and you will have to make alternative arrangements for booting your new system.\n" 14 60 6 "${Options[@]}" 2> feliz.output
    RetVal=$?
    case $RetVal in
    0) GrubDevice=$(cat feliz.output)
      break
    ;;
    2) HelpMessage=`cat helpGRUB`
      DisplayHelp
      continue
    ;;
    *) GrubDevice=""
      break
    esac
  done
}

ConnectionSpeed() {  # Determine download speed, process speed and write-to-disk speed
  TPecho "Checking System and Internet Speed"
  # Set address for test link
  test_link="ftp://speedtest:speedtest@ftp.otenet.gr/test1Mb.db"
  # wget a 1MB test file - save output to feliz.output
  wget --no-check-certificate --output-file=feliz.output -O /dev/null "$test_link"
  # Then extract connection speed and rate to variables
  Speed=$(tail feliz.output | grep -oP '(?<=\().*(?=\))' | awk '{print $1}')
  Rate=$(tail feliz.output | grep -oP '(?<=\().*(?=\))' | awk '{print $2}')
  # Speed is either in Kb/s or Mb/s - either way it's probably a decimal
  # Bash can't do floating point arithmetic, so convert to bytes
  # Count the number of numerals after the decimal point
  eof=`echo $Speed | wc -m`
  eof=$((eof-1))
  mantissa=0
  Increment=1                     # Character counter
  until [ $Increment -eq $eof ]
  do
    digit=`echo $Speed | cut -c ${Increment}`
    if [ "${digit}" = "." ]; then # When decimal point reached
      mantissa=0                  # Reset mantissa counter
    fi
    ((Increment++))               # Increment character counter
    ((mantissa++))                # Advance mantissa counter
  done
  Characteristic=$(( eof - mantissa - 1 )) # Digits before decimal
  # Then remove the decimal point
  Whole=$(echo $Speed | sed 's/\.//g')
  # Now we have a number that bash can use
  # Multiply in factors of 1000, to convert to bytes
  # If download time was in Kb/s, multiply by 10 to the power ( 5 characters - $mantissa ) 
  # If download time was in Mb/s, multiply by 10 to the power ( 8 characters - $mantissa ) 
  case $Rate in
   "KB/s") factor=$(( Characteristic + mantissa - 2 ))
   ;;
   "MB/s") factor=$(( Characteristic + mantissa + 1 ))
   ;;
  esac
  connection_speed=$((Whole * (10 ** $factor)))          # Internet speed in bytes per second

  # Get system speed for use when calculating install time
  Float=$(lscpu | grep "CPU MHz" | awk '{print $3}')     # Result will be floating point
  Integer=${Float/.*}                                    # Convert to integer
  Integer=$((Integer+499))                               # Round up
  total_MHz=$(echo $Integer | cut -c 1)                # Keep first digit for multiplier

  # Get write-to-disk speed
  dd if=/dev/zero of=speetest bs=1M count=100 conv=fdatasync &> feliz.output
  Speed=$(tail feliz.output -n 1 | awk '{print $10}')    # Float
  Rate=$(tail feliz.output -n 1 | awk '{print $11}')     # Float
  eof=`echo $Speed | wc -m`
  eof=$((eof-1))
  mantissa=0
  Increment=1                     # Character counter
  until [ $Increment -eq $eof ]
  do
    digit=`echo $Speed | cut -c ${Increment}`
    if [ "${digit}" = "." ]; then # When decimal point reached
      mantissa=0                  # Reset mantissa counter
    fi
    ((Increment++))               # Increment character counter
    ((mantissa++))                # Advance mantissa counter
  done
  Characteristic=$(( eof - mantissa - 1 )) # Digits before decimal
  # Then remove the decimal point
  Whole=$(echo $Speed | sed 's/\.//g')
  # Now we have a number that bash can use
  # Multiply in factors of 1000, to convert to bytes
  # If download time was in Kb/s, multiply by 10 to the power ( 5 characters - $mantissa ) 
  # If download time was in Mb/s, multiply by 10 to the power ( 8 characters - $mantissa ) 
  case $Rate in
   "KB/s") factor=$(( Characteristic + mantissa - 2 ))
   ;;
   "MB/s") factor=$(( Characteristic + mantissa + 1 ))
   ;;
  esac
  write_speed=$((Whole * (10 ** $factor)))  # Write-to-disk speed in bytes per second
  write_factor=$(echo $write_speed | cut -c 1)                # Keep first digit for multiplier
  
}

InstallKernel() { # Kernel and some other core systems

lsblk
read

  LANG=C # Temporary addition to overcome bug in Arch man pages
  
  case $Kernel in # Selected kernel
    1) InstallFile "linux-lts"
    ;;
    *) InstallFile "linux"
  esac

  PassArray=() # Prepare the array for additional components for lts
  PassArray=( cryptsetup dhcpcd dialog diffutils file gcc-libs gettext inetutils iproute2 iputils jfsutils licenses logrotate lvm2 mdadm nano netctl pacman pciutils pcmciautils procps-ng psmisc reiserfsprogs s-nail sed systemd-sysvcompat tar usbutils vi which xfsprogs autoconf automake binutils bison fakeroot flex gcc groff libtool make patch pkg-config sudo )
  ProgressArray "Installing core packages" # Install each one using pacstrap
      
  PassArray=()  # Prepare array for additional cli programs
  PassArray=( btrfs-progs gamin gksu ntp wget openssh screenfetch unrar unzip vim xarchiver xorg-xedit xterm )
  ProgressArray "Installing cli tools" # Install each one using pacstrap

  # Enable sshd
  arch_chroot "systemctl enable sshd.service" >/dev/null
      
  # And finally the man pages
  InstallFile "man-db"
  InstallFile "man-pages"

}

AddCodecs() { # Various codecs and graphical environment
  
  PassArray=() # Prepare for codecs
  PassArray=( a52dec autofs faac faad2 flac lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv wavpack x264 gstreamer0.10-plugins pulseaudio pulseaudio-alsa libdvdcss dvd+rw-tools dvdauthor dvgrab flashplugin b43-fwcutter ipw2100-fw ipw2200-fw zd1211-firmware iw wireless_tools wpa_actiond )
  ProgressArray "Adding Codecs, etc" # Install each one using pacstrap
  
  PassArray=() # Prepare for graphics
  PassArray=( xf86-video-vesa xf86-video-nouveau xf86-input-synaptics xorg-server xorg-server-utils xorg-xinit xorg-twm )
  ProgressArray "Open-source video drivers & graphical environment" # Install each one using pacstrap

}

McInitCPIO() { 
  case $Kernel in
    1) TPecho "Running mkinitcpio for lts kernel"
    arch_chroot "mkinitcpio -p linux-lts"
    ;;
    *) TPecho "Running mkinitcpio for latest kernel"
    arch_chroot "mkinitcpio -p linux"
  esac
}

SetRootPassword() {
  Backtitle="Success! Finished installing in $DIFFMIN minutes and $DIFFSEC seconds"
  Repeat="Y"
  ExtraMessage=""
  while [ $Repeat = "Y" ]
  do
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel \
     --insecure --passwordbox "$ExtraMessage\nEnter a password for root" 10 40 2> feliz.output
    Pass1=`cat feliz.output`
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel \
      --insecure --passwordbox "Re-enter password for root" 8 40 2> feliz.output
    Pass2=`cat feliz.output`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      ExtraMessage="Passwords cannot be blank. Try again ..."
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
     echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
     arch_chroot "passwd root" < /tmp/.passwd &>> feliz.log
     rm /tmp/.passwd &>> feliz.log
     Repeat="N"
    else
      ExtraMessage="Passwords don't match. Try again"
    fi
  done
  rm feliz.output
}

SetUserPassword() {
  Repeat="Y"
  ExtraMessage=""
  while [ $Repeat = "Y" ]
  do
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel\
      --insecure --passwordbox "$ExtraMessage\nEnter a password for $UserName" 10 40 2> feliz.output
    Pass1=`cat feliz.output`
    dialog --backtitle "$Backtitle" --title " - Passwords - " --nocancel \
      --insecure --passwordbox "Re-enter password for ${UserName}" 8 40 2> feliz.output
    Pass2=`cat feliz.output`
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      ExtraMessage="Passwords cannot be blank. Try again"
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
      echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
      arch_chroot "passwd ${UserName}" < /tmp/.passwd &>> feliz.log
      rm /tmp/.passwd &>> feliz.log
      Repeat="N"
    else
      ExtraMessage="Passwords don't match. Try again"
    fi
  done
  rm feliz.output
}

DisplayFinished() {
  dialog --backtitle "$Backtitle" --no-shadow --msgbox "\nCongratulations, installation is complete, and it is time for Feliz to shut down the computer. Remember to remove the installation media before restarting.\nHave fun!" 11 50
}
