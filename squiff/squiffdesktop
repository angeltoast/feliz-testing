#!/bin/bash

# felizdesktop - Functions relevant to users, locations, desktop
# settings and data review called by the main feliz script

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# ----------------     -----------------------
# Function    Line     Function           Line
# ----------------     -----------------------
# getkeymap    20     Display Managers    428
# setlocale    35     FinalCheck          549
# settimezone  52     ManualSettings      640
#                     ChangeRootPartition 666
# UserName     75     ChangeSwapPartition 674
# Hostname   251      ChangePartitions    682
# Extras     216      AddExtras           694    

getkeymap() {
  Passed="Desktop settings"
  ListKbs=`cat keymaps.list`
  keyboards=""
  for k in ${ListKbs[@]}; do
    keyboards="$keyboards $k"
  done
  Message="Scroll through this list, or type a letter, to find your keyboard."
  listgen1 "${keyboards}" "Keyboards" "nocancel"
  Countrykbd="$Result"
  loadkeys ${Countrykbd} 2>> feliz.log
  dialog --backtitle "$Backtitle" --title " Keyboard " \
    --msgbox "\nThe keyboard is now set to: '$Countrykbd'" 8 50  
}

setlocale() {
  LocaleList=`cat /etc/locale.gen`
  local Counter=0
  declare -a Options
  for l in ${LocaleList}
  do
    Counter=$((Counter+1))
    Options[${Counter}]="$l"
  done
  dialog --backtitle "$Backtitle" --title " Locale " --nocancel \
      --menu "\nScroll through this list, or type a letter, to find your locale.\nThis will be used to find the best mirrors for downloading your system" 18 40 $Counter "${Options[@]}" 2> output.file
  CountryLocale="$(cat output.file)"
  CountryCode=(`cat output.file | cut -c4-5`)
  dialog --backtitle "$Backtitle" --title " Locale " \
    --msgbox "\nYour locale is now set to: '$CountryLocale'" 8 50
}

SetTimeZone() {
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  passzones=""
  for z in ${Zones[@]}; do
    passzones="$passzones $z"
  done
  Message="To set the system clock, please choose the World Zone of your location."
  listgen1 "${passzones}" "World zones" "nocancel"
  ZONE=$Result
  SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
  passzones=""
  for z in ${SubZones[@]}; do
    passzones="$passzones $z"
  done
  Message="Now select your nearest city from this list."
  listgen1 "$passzones" "Cities in ${ZONE}" "nocancel"
  SUBZONE=$Result
  dialog --backtitle "$Backtitle" --title " Locale " \
    --msgbox "\nYour Zone and Subzone set to: '$ZONE/$SUBZONE'" 8 50
}
#
# Done to here and tested
#
UserName() {
	print_heading
	PrintOne "Enter a name for the primary user of the new system."
  PrintOne "If you don't create a username here, a default user called"
  PrintOne "'archie' will be set up"
  echo
	TPread "Enter a username: "
  Entered=${Response,,}
	case $Entered in
		"") UserName="archie"
		;;
		*) UserName=${Entered}
	esac
	PrintOne "$UserName will be created   "
}

SetHostname() {
	Entered="arch-linux"
	print_heading
	PrintOne "A hostname is needed. This will be a unique name to identify"
	PrintOne "your device on a network. If you do not enter one, the"
	PrintOne "default hostname of 'arch-linux' will be used."
  echo
	TPread "Enter a hostname for your computer : "
  Entered=${Response,,}
	case $Entered in
		"") HostName="arch-linux"
		;;
		*) HostName=${Entered}
	esac
	PrintOne "Hostname set to: $HostName"
}

# ---- Extras ----

Categories="Accessories Desktop_Environments Graphical Internet Multimedia Office Programming Window_Managers"
Accessories="brasero cairo-dock conky docky gnome-calculator gedit gparted nautilus xfce4-terminal yaourt"
LongAccs[1]="Brasero - Disc burning application from Gnome          "
LongAccs[2]="Cairo Dock - Customizable dock and launcher application"
LongAccs[3]="Conky - Desktop time and system information"
LongAccs[4]="Docky - For opening applications and managing windows"
LongAccs[5]="gCalculator - Calculator for your taskbar"
LongAccs[6]="gEdit - The text editor from Gnome"
LongAccs[7]="GParted - make/delete/resize partitions"
LongAccs[8]="Nautilus - The file-manager from Gnome"
LongAccs[9]="Terminal - The Xfce terminal emulator"
LongAccs[10]="Yaourt - Easy to use AUR package installer"
Desktops="Cinnamon Gnome KDE LXDE LXQt Mate Xfce"
LongDesk[1]="Cinnamon - Slick DE from the Mint team"
LongDesk[2]="Gnome - Full-featured, modern DE"
LongDesk[3]="KDE - Plasma 5 and accessories pack"
LongDesk[4]="LXDE - Traditional, lightweight DE"
LongDesk[5]="LXQt - Lightweight and modern Qt DE"
LongDesk[6]="Mate - Traditional DE from the Mint team"
LongDesk[7]="Xfce - Lightweight, highly configurable DE"
Graphical="evince gimp imagemagick gthumb simple-scan xsane"
LongGraph[1]="Evince - Reader for PDF and other document formats"
LongGraph[2]="GIMP - Advanced image editing suite"
LongGraph[3]="Imagemagick - Command-line image manipulation"
LongGraph[4]="gThumb - Image viewer & basic editor"
LongGraph[5]="Simple-Scan - A simple scanner GUI"
LongGraph[6]="Xsane - A full-featured GTK-based sane frontend"
Internet="chromium epiphany filezilla firefox qbittorrent thunderbird transmission-gtk"
LongNet[1]="Chromium - Open source web browser from Google     "
LongNet[2]="Epiphany - Gnome WebKitGTK+ browser (aka Web)"
LongNet[3]="Filezilla - Fast and reliable FTP, FTPS & SFTP client"
LongNet[4]="Firefox - Extensible browser from Mozilla"
LongNet[5]="qBittorent - Open source BitTorrent client"
LongNet[6]="Thunderbird - Feature-rich email client from Mozilla"
LongNet[7]="Transmission - Easy-to-use BitTorrent client"
Multimedia="avidemux-gtk banshee handbrake openshot vlc xfburn"
LongMulti[1]="Avidemux - Simple video editor               "
LongMulti[2]="Banshee - Feature-rich audio player"
LongMulti[3]="Handbrake - Simple yet powerful video transcoder"
LongMulti[4]="Openshot - Easy-to-use non-linear video editor"
LongMulti[5]="VLC - Middleweight video player"
LongMulti[6]="Xfburn"
Office="abiword gnumeric libreoffice orage scribus"
LongOffice[1]="Abiword - Full-featured word processor        "
LongOffice[2]="Gnumeric - Spreadsheet program from GNOME"
LongOffice[3]="LibreOffice - Open-source office software suite"
LongOffice[4]="Orage - Calendar and task manager (incl with Xfce)"
LongOffice[5]="Scribus - Desktop publishing program"
Programming="bluefish codeblocks emacs geany git netbeans"
LongProg[1]="Bluefish - GTK+ IDE with support for Python plugins  "
LongProg[2]="Code::Blocks - Open source & cross-platform C/C++ IDE"
LongProg[3]="Emacs - extensible, customizable text editor"
LongProg[4]="Geany - Advanced text editor & IDE"
LongProg[5]="Git - open source distributed version control system"
LongProg[6]="Netbeans - Integrated development environment (IDE)"
WindowManagers="Enlightenment Fluxbox JWM Openbox"
LongWMs[1]="Enlightenment"
LongWMs[2]="Fluxbox"
LongWMs[3]="JWM"
LongWMs[4]="Openbox"

PickLuxuries() { # User selects any combination from a store of extras
  local Complete=0
  LuxuriesList=""
  print_heading
  PrintOne "Now you have the option to add 'extras' such as a web"
  PrintOne "browser, desktop environment, office software, etc."
  PrintOne "Yaourt is also available as an option, in 'Accessories'"
  echo
  PrintOne "If you want only a base Arch installation, exit without choosing any extras."
  echo
  while [ $Complete -eq 0 ]
  do
    listgen1 "$Categories" "Categories" "Done"
    Category=$Response
    if [ $Result = "Done" ]; then
      break
    else
      ShoppingList
      print_heading
      PrintOne "Added so far: ${LuxuriesList}"
      echo
      PrintOne "You can now choose from any of the other lists,"
      PrintOne "or choose 'Done' to finish this part of the setup"
      echo
    fi
  done
  if [ -n "${LuxuriesList}" ]; then
    Scope="Full"
  else
    Scope="Basic"  
  fi
}

ShoppingList() {
# Called by PickLuxuries after a category has been chosen.
local Complete=0
Passed="Choose your first item"
while [ $Complete -eq 0 ]
do
  print_heading
  PrintOne "Added so far: ${LuxuriesList}"
  echo
  # Pass category to listgen2 for user to choose one item;
  case $Category in
    1) listgen2 "$Accessories" "Accessories" "" "LongAccs"
    ;;
    2) listgen2 "$Desktops" "Desktops" "" "LongDesk"
    ;;
    3) listgen2 "$Graphical" "Graphical" "" "LongGraph"
    ;;
    4) listgen2 "$Internet" "Internet" "" "LongNet"
    ;;
    5) listgen2 "$Multimedia" "Multimedia" "" "LongMulti"
    ;;
    6) listgen2 "$Office" "Office" "" "LongOffice"
    ;;
    7) listgen2 "$Programming" "Programming" "" "LongProg"
    ;;
    8) listgen2 "$WindowManagers" "Window_Managers" "" "LongWMs"
    ;;
    *) break
  esac
  Passed="Choose your next item" # Loop until user selects "Done" 
  if [ $Result = "Done" ]; then
    break
  fi
  AddToList="Y"
  # First check that chosen item is not already on the list
  for lux in $LuxuriesList
  do
    if [ ${lux} = ${Result} ]; then
      read_timed "Already in your shopping list"
      AddToList="N"
      continue
    fi
  done
  # Then carry out any specific tests and add the item to the list
  SaveResult=$Result # (Because other subroutines return $Result)
  if [ ${SaveResult} = "libreoffice" ]; then
    LibreVersion
    case $Response in
      "5") LuxuriesList="${LuxuriesList} libreoffice-fresh"
      ;;   
      "4") LuxuriesList="${LuxuriesList} libreoffice-still"
      ;;
      *) echo "Wormhole detected"
    esac
    continue
  fi
  case $SaveResult in
    "Cinnamon") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Enlightenment") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Fluxbox") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Gnome") DesktopEnvironment=$SaveResult
        GnomeOptions
      ;;
    "JWM") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "KDE") DesktopEnvironment=$SaveResult
      ;;
    "LXDE") DesktopEnvironment=$SaveResult
      ;;
    "LXQt") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Mate") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Openbox") DesktopEnvironment=$SaveResult
        AddDEextras "tint2"
        case $Response in
          "Y" | "y") GoodiesOpenbox="tint2"
          ;;
         *) GoodiesOpenbox=""
        esac
        ChooseDM
      ;;
    "Xfce") DesktopEnvironment=$SaveResult
         AddDEextras "xfce4-goodies"
         case $Response in
            "Y" | "y") GoodiesXfce="xfce4-goodies"
           ;;
           *) GoodiesXfce=""
         esac
         ChooseDM
      ;;
     *) echo	
 		esac
    LuxuriesList="${LuxuriesList} ${SaveResult}"
done
Passed=""
}

ChooseDM() { # Choose a display manager unless already fixed by certain DEs
  if [ -z $DisplayManager ]; then
    Counter=0
    Greeter=""
    DMList="GDM LightDM LXDM sddm SLIM XDM"
    print_heading
    PrintOne "You can choose one of the following display managers."
    PrintOne "Be aware that not all display managers work equally well"
    PrintOne "with all desktop environments. If in doubt, choose LightDM."
    PrintOne "If you do not install a display manager, you will have"
    PrintOne "to launch your desktop environment manually."
    echo
    listgen1 "${DMList}" "Display-Managers" "None"
    Reply=$Response
    for item in ${DMList}
    do
      Counter=$((Counter+1))
      if [ $Counter -eq $Reply ]
      then
        SelectedDM=$item
        case $SelectedDM in
          "GDM") DisplayManager="gdm"
            ;;
          "LightDM") DisplayManager="lightdm"
                Greeter="lightdm-gtk-greeter"	
            ;;
          "LXDM") DisplayManager="lxdm"
            ;;
          "sddm") DisplayManager="sddm"
            ;;
          "SLIM") DisplayManager="slim"
            ;;
          "XDM") DisplayManager="xdm"
            ;;
          *) DisplayManager=""
        esac	
        break
      fi
    done
  fi
}
    
InstallDM() { # Called from feliz when installing desktop environment
  case ${DisplayManager} in
    "") TPecho "Not installing a Display Manager"
    ;;
    *) TPecho "Installing ${DisplayManager} Display Manager"
      pacstrap /mnt ${DisplayManager} ${Greeter} 2>> feliz.log
      arch_chroot "systemctl enable ${DisplayManager}.service" >/dev/null
  esac
}

GnomeOptions() {
Redo="Y"
GoodiesGnome=""
while [ $Redo = "Y" ]
do
  print_heading
  PrintOne "'Gnome with extras' adds a text editor, disk"
  PrintOne "manager, archive manager and a set of games"
  PrintOne "If in doubt, choose '2) Standard Gnome'"
  echo
  PrintOne "1) Minimal Gnome (gnome-shell)"
  PrintMany "2) Standard Gnome"
  PrintMany "3) Gnome with extras"
  echo
  TPread "Enter the number of your selection : "
  echo
  case $Response in
    1) DesktopEnvironment="gnome-shell"
      Redo="N"
    ;;
    2) Redo="N"
    ;;
    3) GoodiesGnome="gnome-extra"
      Redo="N"
    ;;
    *) invalid_option
  esac
done
}

AddDEextras() {
 local Extras="$1"
 print_heading
 echo
 case $DesktopEnvironment in
  "Openbox") PrintOne "tint2 is a system panel/taskbar that can be configured"
    PrintOne "to include a system tray, task list, battery monitor, clock, etc."
    echo
    ;;
  "Xfce") PrintOne "The xfce4-goodies pack includes includes the Whisker menu,"
    PrintOne "extra plugins and a number of utilities such as the mousepad editor"
    echo
    ;;
  *) echo
 esac
 TPread "Include the $Extras pack? [y/n] : "
}

LibreVersion() {
Redo="Y"
Response="1"
while [ $Redo = "Y" ]
do
  print_heading
  PrintOne "LibreOffice was recently updated to version 5, but"
  PrintOne "some people still prefer the older version. So feliz"
  PrintOne "gives you the option to choose."
  echo
  PrintOne "Version 5 (also called libreoffice-fresh)"
  PrintMany "Version 4 (now known as libreoffice-still)"
  echo
  TPread "Enter the version number you prefer (5 or 4) : "
  echo
  case $Response in
    "5" | "4") Redo="N"
    ;;
    *) invalid_option
  esac
done
}

FinalCheck() {
Repeat=1
while [ $Repeat -gt 0 ]
do
  print_heading
  PrintOne "These are the settings you have entered. Please check them ..."
  echo
  PrintOne "1)  Root partition ... $RootPartition : $RootType" 50
  if [ $SwapPartition ] || [ $SwapFile ]; then
    PrintMany "2)  Swap partition ... $SwapPartition $SwapFile"
  else
    PrintMany "2)  No provision has been made for swap"
  fi
  if [ ${#AddPartList[@]} ]; then
    Counter=0
    PrintMany "3)  Extra partitions ..."
    for i in ${AddPartList[@]}
    do
      PrintMany "     ${AddPartMount[$Counter]} : ${AddPartList[$Counter]} : ${AddPartType[$Counter]}" 50
      Counter=$((Counter+1))
    done
  else
    PrintMany "3)  No additional partitions have been allocated"
  fi
  case $Kernel in
    1) PrintMany "4)  The LTS kernel will be installed"
    ;;
    *) PrintMany "4)  The latest kernel will be installed"
  esac
  if [ $GrubDevice ]; then
  PrintMany "5)  Grub will be installed to $GrubDevice" 50
  else
    PrintMany "5)  No provision has been made for Grub"
  fi
  PrintMany "6)  Keyboard is $Countrykbd"
  PrintMany "7)  Locale will be set to $CountryLocale"
  PrintMany "8)  Zone/subZone will be $ZONE/$SUBZONE"
  case ${IsInVbox} in
    "VirtualBox") PrintMany "9)  Virtualbox guest utilities will be installed"
    ;;
    *) PrintMany "9)  Virtualbox guest utilities will not be installed"
  esac
  if [ -z $DisplayManager ]; then
    PrintMany "10)  No Display Manager selected"
  else
    PrintMany "10)  Display Manager = $DisplayManager"
  fi
  PrintMany "11)  Root and user settings ..."
  PrintMany "     Hostname = '$HostName'"
  PrintMany "     User = '$UserName'"
  PrintMany "12) The following extras have been selected ..."
  PrintOne "${LuxuriesList}"
  echo
  PrintOne "Press [Enter] to install with these settings, or"
  TPread "enter an item number if you wish to change it: "
  Change=$Response
  case $Change in
    1) ChangeRootPartition
        AllocateRoot
    ;;
    2) ChangeSwapPartition
        AllocateSwap
    ;;
    3) ChangePartitions
        MorePartitions
    ;;
    4) SetKernel
    ;;
    5) SetGrubDevice
    ;;
    6) getkeymap
    ;;
    7) setlocale
    ;;
    8) SetTimeZone
    ;;
    9) ConfirmVbox
    ;;
    10) DisplayManager=""
      ChooseDM
    ;;
    11) ManualSettings
    ;;
    12) DisplayManager=""
        PickLuxuries
    ;;
    *) Repeat=0
  esac
done
}

ManualSettings() {
  Retry="Y"
  Response=3
  while [ $Retry = "Y" ]
  do
    print_heading
    PrintOne "Enter number for data to change, or [Enter] to finish:"
    echo
    PrintOne "1) Hostname (currently $HostName)"
    PrintMany "2) Username (currently $UserName)"
    echo
    TPread "Enter the number of your selection : "
    echo
    case $Response in
      1) TPread "Enter new Hostname (currently $HostName) : "
         HostName=$Response
        ;;
      2) TPread "Enter new username to be created (currently $UserName) : "
         UserName=$Response
        ;;
      *) Retry="N"
         break
    esac
  done
}

ChangeRootPartition() {
# Start array with SwapPartition
  Ignorelist[0]=${SwapPartition}
  local Counter=1
  AddExtras
  MakePartitionList
}
  
ChangeSwapPartition() {
# Start array with RootPartition
  Ignorelist[0]=${RootPartition}
  Counter=1
  AddExtras
  MakePartitionList
}

ChangePartitions() {
  # Copy RootPartition and SwapPartition into temporary array
  Ignorelist[0]=${RootPartition}
  local Counter=1
  if [ ${SwapPartition} ]; then
    Ignorelist[1]=${SwapPartition}
    Counter=2
  fi
  Ignores=${#Ignorelist[@]} # Save a count for later
  MakePartitionList
}

AddExtras() {
  # Called by ChangeSwapPartition and ChangeRootPartition with
  # Ignorelist started and Counter set to next record number
  # Add each field (extra partition) from AddPartList into the array:
  for a in ${AddPartList[@]}; do
    Ignorelist[$Counter]=$a
    Counter=$((Counter+1))
  done
  Ignores=${#Ignorelist[@]} # Save a count for later
}
