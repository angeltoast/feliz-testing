#!/bin/bash

# The Feliz installation scripts for Arch Linux
# 12 June 2016

# /squiff/desktop - Semi-graphical Dialog interface
# Functions relevant to users, locations, settings and review

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# -----------------     ---------------------
# Function     Line     Function         Line
# -----------------     ---------------------
# getkeymap      20     PickLuxuries       93
# setlocale      35     ShoppingList      142
# settimezone    46     Display Managers  262
# UserName       75     FinalCheck        285
# Hostname       85     ManualSettings    330
# -----------------     ---------------------

getkeymap() {
  ListKbs=`cat keymaps.list`
  keyboards=""
  for k in ${ListKbs[@]}; do
    keyboards="$keyboards $k"
  done
  listgen1 "$keyboards"
  dialog --backtitle "$Backtitle" --title " Keyboards " --hfile "helpMENUS" --no-shadow --ok-button "Select" --nocancel --menu "Scroll through this list to find your keyboard.\nPress F1 for help." 20 50 12 "${Options[@]}" 2> output.file
  Countrykbd=$(cat output.file)
  loadkeys ${Countrykbd} 2>> feliz.log
}

setlocale() {
  Counter=0 # Added 2016-04-13 debugging "unary operator" error
  LocaleList=(`grep 'UTF-8' /etc/locale.gen | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | sed 's/#//g'`)
  for item in ${LocaleList[@]}; do
    Counter=$((Counter+1))
    Options[${Counter}]="$item"
    Counter=$((Counter+1))
    Options[${Counter}]="UTF-8"
  done
  Counter=$((Counter/2))
  dialog --backtitle "$Backtitle" --title " - Locales - " --hfile "helpLOCALE" --no-shadow --nocancel --menu "Scroll through this list to find your locale.\nPress F1 for help." 20 55 $Counter "${Options[@]}" 2> output.file
  CountryLocale="$(cat output.file).UTF-8"
  CountryCode=(`cat output.file | cut -c4-5`)
}

SetTimeZone() {
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  passzones=""
  for z in ${Zones[@]}; do
    passzones="$passzones $z"
  done
  listgen1 "$passzones"
  dialog --backtitle "$Backtitle" --title " World_Zones " --hfile "helpUTC" --no-shadow --ok-button "Select" --nocancel --menu "To set the system clock, please first choose the World Zone of your location.\n(Press F1 for help about UTC)" 20 60 11 "${Options[@]}" 2> output.file
  ZONE=$(cat output.file)
  if [ $ZONE != "UTC" ]; then
    SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
    passzones=""
    for z in ${SubZones[@]}; do
      passzones="$passzones $z"
    done
    listgen1 "$passzones"
    dialog --backtitle "$Backtitle" --title " ${ZONE} " --hfile "helpMENUS" --no-shadow --ok-button "Select" --nocancel --menu "Now select your nearest city from this list.\nPress F1 for help" 20 50 13 "${Options[@]}" 2> output.file
    SUBZONE=$(cat output.file)
  fi
}

UserName() {
  dialog --backtitle "$Backtitle" --title " User Name " --no-shadow --nocancel --inputbox "Enter a name for the primary user of the new system (one word only, lower case).\nIf you don't create a username here, a default user called 'archie' will be set up\n" 12 50 2> output.file
  Response=$(cat output.file)
  Entered=${Response,,}
  case $Entered in
    "") UserName="archie"
    ;;
    *) UserName=${Entered}
  esac
}

SetHostname() {
  Entered=""
  dialog --backtitle "$Backtitle" --title " Hostname " --no-shadow --nocancel --inputbox "A hostname is needed. This will be a unique name to identify your device on a network.\nIf you do not enter one, the default hostname of 'arch-linux' will be used\n" 12 50 2> output.file
  Response=$(cat output.file)
  Entered=${Response,,}
  case $Entered in
    "") HostName="arch-linux"
    ;;
    *) HostName=${Entered}
  esac
}

PickLuxuries() { # User selects any combination from a store of extras
  CategoriesList="Accessories Desktop_Environments Graphical Internet Multimedia Office Programming Window_Managers"
  case "${LuxuriesList}" in
  "") local Message="Now you have the option to add extras, such as a desktop environment, web browser, etc. If you want only a base Arch installation, just exit without choosing any extras"
  ;;
  *) local Message="You can add more items, or select items to delete."
  esac
  Category="Continue"
  until [ $Category = "Done" ]
  do
  # First select a category. CategoriesList is a string variable in same order as the Categories array
    HowMany=`echo ${CategoriesList} | wc -w` # Count words
    echo ${CategoriesList} | sed "s/ /\\n/g" > feliz.output # Copy categories to file
    Counter=1
    ItemCounter=1
    Width=50
    Options=()
    until [ $ItemCounter -gt $HowMany ] # Prepare numbered list from file
    do
      Options[$((Counter))]=${ItemCounter}
      Counter=$((Counter+1))
      Options[${Counter}]=`sed -n "$ItemCounter p" feliz.output`
      Counter=$((Counter+1))
      ItemCounter=$((ItemCounter+1))
    done
    # Use $ItemCounter and ${Options[@]} array in menu dialog
    dialog --backtitle "$Backtitle" --title " Categories " --hfile "helpMENUS" --no-shadow --ok-button "Select" --cancel-button "Done" --menu "$Message\n" 19 50 $ItemCounter "${Options[@]}" 2> feliz.output # Output is line number of selection
    RetVal=$?
    if [ $RetVal -gt 0 ]; then # <Cancel> selected
      break
    else
      Selected=`cat feliz.output`
      # Use selected number to get category for script use
      Category=${Categories[${Selected}]}
    fi
    # Then shop in that category
    ShoppingList
    Message="Added so far: ${LuxuriesList}\nYou can now choose from any of the other lists, or choose <Done> to finish this part of the setup"
  done
  if [ -n "${LuxuriesList}" ]; then
    Scope="Full"
  else
    Scope="Basic"
  fi
}

ShoppingList() {
  # Called by PickLuxuries after a category has been chosen.
  local Complete=0
  case "$LuxuriesList" in
    "") local Title="Choose your first category"
    ;;
    *) local Title="Choose your next category"
    esac
  while [ $Complete -eq 0 ]
  do
    local Message="Added so far: ${LuxuriesList}"
    # Pass category to listgen2 for user to choose one item;
    case $Category in
      "Accessories") listgen2 "$Accessories" "LongAccs"
      ;;
      "Desktop_Environments") listgen2 "$Desktops" "LongDesk"
      ;;
      "Graphical") listgen2 "$Graphical" "LongGraph"
      ;;
      "Internet") listgen2 "$Internet" "LongNet"
      ;;
      "Multimedia") listgen2 "$Multimedia" "LongMulti"
      ;;
      "Office") listgen2 "$Office" "LongOffice"
      ;;
      "Programming") listgen2 "$Programming" "LongProg"
      ;;
      "Window_Managers") listgen2 "$WindowManagers" "LongWMs"
      ;;
      *) break
    esac
    dialog --backtitle "$Backtitle" --title " ${Category} " --hfile "helpMENUS" --no-shadow --ok-button "Select" --cancel-button "Done" --menu "Added so far: ${LuxuriesList}\n" 15 60 $Counter "${Options[@]}" 2> output.file
    RetVal=$?
    if [ $RetVal -gt 0 ]; then # <Cancel> selected
      break
    else
      Picked=$(cat output.file)
    fi
    # Check that chosen item is not already on the list
    for lux in $LuxuriesList
    do
      if [ ${lux} = ${Picked} ]; then
        Temp=""
        dialog --yes-label "Keep" --no-label "Delete" --backtitle "$Backtitle" --title " - Information - " --no-shadow --yesno "\n  '$Picked' is already in your shopping list\n Do you wish to keep it or delete it?" 10 60
        case $? in
          0) continue 2 # Keep $LuxuriesList as it is and return to top of enclosing loop
          ;;
          *) for lux in $LuxuriesList
            do
              if [ ${lux} != ${Picked} ]; then
                Temp="$Temp $lux"
              fi
            done
            LuxuriesList="$Temp"
            continue 2 # Revise $LuxuriesList and return to top of enclosing loop
        esac
      fi
    done
    # Carry out any specific tests and add the item to the list
    case $Picked in
    "Cinnamon") DesktopEnvironment="Cinnamon"
        ChooseDM
      ;;
    "Deepin") DesktopEnvironment="Deepin"
        dialog --backtitle "$Backtitle" --title " Deepin Extras " --no-shadow --yesno "The deepin-extras pack includes the Deepin game center, media players, terminal & screenshot tools.\nInclude the extras pack?\n" 10 40
        case $? in
          0) DDEextras="deepin-extra"
           ;;
          *) DDEextras=""
        esac
        ChooseDM
        if [ $DisplayManager="lightdm" ]; then
          Greeter="deepin-session-ui"
        fi
      ;;
    "Enlightenment") DesktopEnvironment="Enlightenment"
        dialog --backtitle "$Backtitle" --title " Enlightenment " --no-shadow --yesno "It is suggested that the Connman network utility and Terminology terminal emulator are installed for usability.\nInclude them?\n" 10 40
        case $? in
          0) EnExtras="connman terminology"
           ;;
          *) EnExtras=""
        esac
        ChooseDM
      ;;
    "Fluxbox") DesktopEnvironment="Fluxbox"
        ChooseDM
      ;;
    "Gnome") DesktopEnvironment="Gnome"
        dialog --backtitle "$Backtitle" --title " Gnome Goodies " --no-shadow --yesno "The gnome-extras pack includes games, text editor and some utilities.\nInclude the extras pack?\n" 10 40
        case $? in
          0) GoodiesGnome="gnome-extra"
           ;;
          *) GoodiesGnome=""
        esac
      DisplayManager="reserved"
      ;;
    "JWM") DesktopEnvironment="JWM"
        ChooseDM
      ;;
    "KDE") DesktopEnvironment="KDE"
      DisplayManager="reserved"
      ;;
    "libreoffice") Picked="libreoffice-fresh"
      ;;
    "LXDE") DesktopEnvironment="LXDE"
        ChooseDM
      ;;
    "LXQt") DesktopEnvironment="LXQt"
        ChooseDM
      ;;
    "Mate") DesktopEnvironment="Mate"
        ChooseDM
      ;;
    "Openbox") DesktopEnvironment="Openbox"
        ChooseDM
      ;;
    "Xfce") DesktopEnvironment="Xfce"
        dialog --backtitle "$Backtitle" --title " Desktop Environment " \
    --yesno "\nThe xfce4-goodies pack includes includes the Whisker menu, extra\nplugins and a number of utilities such as the mousepad editor\nInclude the Goodies pack?\n" 10 40
        case $? in
          0) GoodiesXfce="xfce4-goodies"
           ;;
          *) GoodiesXfce=""
        esac
        ChooseDM
      ;;
     *) echo "${Picked} added in desktop at $LINENO" >> feliz.log
    esac
    LuxuriesList="${LuxuriesList} ${Picked}"
done
}

ChooseDM() { # Choose a display manager
  case $DisplayManager in
    "") # Only offered if no other display manager has been set
    Greeter=""
    listgen1 "LightDM LXDM SLIM XDM"
    dialog --backtitle "$Backtitle" --title " ChooseDM/Greeter} " --no-shadow --ok-button "Select" --cancel-label "Done" --menu "Choose one of the following display managers. Note that not all display managers work well with all desktop environments. If in doubt, choose LightDM.\nIf you do not install a display manager, you will have to launch your desktop environment manually.\n" 16 57 6 "${Options[@]}" 2> output.file
    RetVal=$?
    Response=$(cat output.file)
    if [ $RetVal -eq 0 ]; then
      Reply=$Response
      case $Reply in
        "LightDM") DisplayManager="lightdm"
            Greeter="lightdm-gtk-greeter"
         ;;
        "LXDM") DisplayManager="lxdm"
         ;;
        "SLIM") DisplayManager="slim"
         ;;
        "XDM") DisplayManager="xdm"
         ;;
        *) DisplayManager=""
      esac
    fi
    ;;
  "reserved") # Indicating that either KDE or Gnome DE is set and will install own DM
    Greeter=""
    ;;
  *) # Warn that DM already set, and offer option to change it
    dialog --backtitle "$Backtitle" --title " Display Manager " --no-shadow --yesno "Display manager is already set as: $DisplayManager. Only one display manager can be active.\nDo you wish to change it?" 8 50
    RetVal=$?
    if [ $RetVal -eq 0 ]; then # User wishes to change DM
      DisplayManager=""        # Clear DM variable
      Greeter=""               # and greeter
      ChooseDM                 # Call this function again
    fi
  esac
}

FinalCheck() {
  while :
  do
    local Message=
    declare -a Settings
    Settings[1]="$RootPartition $RootType                                         "
    if [ $SwapPartition ] || [ $SwapFile ]; then
      Settings[2]="$SwapPartition $SwapFile"
    else
      Settings[2]="No provision has been made for swap"
    fi
    if [ ${#AddPartList[@]} ]; then
      Counter=0
      Settings[3]=""
      for i in ${AddPartList[@]}
      do
        if [ $Counter -eq 0 ]; then
          Settings[3]="${AddPartList[$Counter]} ${AddPartType[$Counter]} ${AddPartMount[$Counter]}"
        else
          Settings[3]="${Settings[3]} : ${AddPartList[$Counter]} ${AddPartType[$Counter]} ${AddPartMount[$Counter]} "
        fi
        Counter=$((Counter+1))
      done
    else
      Settings[3]="No additional partitions have been allocated"
    fi
    case $Kernel in
      1) Settings[4]="The LTS kernel will be installed"
      ;;
      *) Settings[4]="The latest kernel will be installed"
    esac
    if [ $GrubDevice ]; then
      Settings[5]="Grub will be installed to $GrubDevice"
    else
      Settings[5]="No provision has been made for Grub"
    fi
    Settings[6]="Keyboard is $Countrykbd"
    Settings[7]="Locale will be set to $CountryLocale"
    Settings[8]="Zone/subZone will be $ZONE/$SUBZONE"
    case ${IsInVbox} in
      "VirtualBox") Settings[9]="Virtualbox guest utilities will be installed"
      ;;
      *) Settings[9]="Virtualbox guest utilities will not be installed"
    esac
    if [ -z $DisplayManager ]; then
      Settings[10]="No Display Manager selected"
    else
      Settings[10]="$DisplayManager"
    fi
    Settings[11]="Hostname = '$HostName' :  User = '$UserName'"
    Settings[12]="${LuxuriesList}"
    listgen2 "Root Swap Additional Kernel Grub Keyboard Locale Timezone Virtualbox Display_Manager Identity Extras" "Settings"
    dialog --backtitle "$Backtitle" --title " - Final_Check - " --no-shadow --ok-button "Change" --cancel-button "Continue" --menu "These are the settings you have entered. Please check them. Press <Continue> to install with these settings, or choose an item if you wish to change it\n" 21 65 12 "${Options[@]}" 2> output.file
    RetVal=$?
    Response=$(cat output.file)
    if [ $RetVal -eq 0 ]; then # An item has been selected for change
      ConfirmReview            # User confirmation to make change
      case $Response in
        "Root") ChangeRootPartition
            AllocateRoot
            continue
        ;;
        "Swap") ChangeSwapPartition
            AllocateSwap
            continue
        ;;
        "Additional") ChangePartitions
            MorePartitions
            continue
        ;;
        "Kernel") SetKernel
            continue
        ;;
        "Grub") SetGrubDevice
            continue
        ;;
        "Keyboard") getkeymap
            continue
        ;;
        "Locale") setlocale
            continue
        ;;
        "Timezone") SetTimeZone
            continue
        ;;
        "Virtualbox") ConfirmVbox
            continue
        ;;
        "Display_Manager") DisplayManager=""
            ChooseDM
            continue
        ;;
        "Identity") ManualSettings
            continue
        ;;
        "Extras") PickLuxuries
            continue
        ;;
        *) continue            # Any error, restart the while loop
      esac
    else                       # Continue, Cancel or Esc
      break
    fi
  done
}

ManualSettings() {
  Retry="Y"
  declare local Settings
  while [ $Retry = "Y" ]
  do
    local Message="Select data to change.\n or <Cancel> to finish"
    Settings[1]="(currently $HostName)"
    Settings[2]="(currently $UserName)"
    listgen2 "Hostname Username" "Settings"
    dialog --backtitle "$Backtitle" --title " - Final_Check - " --hfile "helpMENUS" --no-shadow --ok-button "Select" --menu "Select data to change.\n or <Cancel> to finish\n" 18 60 6 "${Options[@]}" 2> output.file
    RetVal=$?
    Response=$(cat output.file)
    Count=1
    for i in ${Options[@]} # Convert selection into item number in list
    do
      if [ $i = $Response ]; then
        break
      fi
      Count=$((Count+1))
    done
    if [ $RetVal -eq 0 ]; then
      case $Response in
        1) dialog --backtitle "$Backtitle" --title " Data Review " --nocancel \
         --inputbox "\nEnter new hostname (currently: $HostName)\n" 18 50 2> output.file
         Response=$(cat output.file)
         if [ $Response ]; then
          HostName=${Response,,}
         fi
        ;;
        2) dialog --backtitle "$Backtitle" --title " Data Review " --nocancel \
      --inputbox "\nEnter new name for user (currently $UserName)\n" 18 50 2> output.file
         Response=$(cat output.file)
        if [ $Response ]; then
          UserName=${Response,,}
        fi
        ;;
        *) Retry="N"
          break
      esac
    fi
  done
}
