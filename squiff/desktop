#!/bin/bash

# desktop - Dialog version. Functions relevant to users, locations,
# desktop settings and data review called by the main feliz script

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# ----------------     -----------------------
# Function    Line     Function           Line
# ----------------     -----------------------
# getkeymap     20     Display Managers    262
# setlocale     35     FinalCheck          272
# settimezone   52     ManualSettings      330
# UserName      75     ChangeRootPartition 356
# Hostname      85     ChangeSwapPartition 364
# PickLuxuries  93     ChangePartitions    372
# ShoppingList 142     AddExtras           383

getkeymap() {
  ListKbs=`cat keymaps.list`
  keyboards=""
  for k in ${ListKbs[@]}; do
    keyboards="$keyboards $k"
  done
  local Message="Scroll through this list, or type a letter, to find your keyboard."
  listgen1 "$keyboards" "Keyboards" "nocancel"
  Countrykbd=$(cat output.file)
  loadkeys ${Countrykbd} 2>> feliz.log
}

setlocale() {
  LocaleList=(`cat /etc/locale.gen | grep UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | sed 's/#//g'`)
  for item in ${LocaleList[@]}; do
    Counter=$((Counter+1))
    Options[${Counter}]="$item"
    Counter=$((Counter+1))
    Options[${Counter}]="UTF-8"
  done
  dialog --backtitle "$Backtitle" --title " - Locales - " --nocancel \
      --menu "\nScroll through this list, or type a letter, to find your locale. This will be used to set fonts and language and to find the best mirrors for downloading your system\n" 18 55 $Counter "${Options[@]}" 2> output.file
  CountryLocale="$(cat output.file).UTF-8"
  CountryCode=(`cat output.file | cut -c4-5`)
}

SetTimeZone() {
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  passzones=""
  for z in ${Zones[@]}; do
    passzones="$passzones $z"
  done
  local Message="To set the system clock, please first choose the World Zone of your location."
  listgen1 "${passzones}" "World_Zones" "nocancel"
  ZONE=$(cat output.file)
  SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
  passzones=""
  for z in ${SubZones[@]}; do
    passzones="$passzones $z"
  done
  local Message="Now select your nearest city from this list."
  listgen1 "$passzones" "${ZONE}" "nocancel"
  SUBZONE=$(cat output.file)
}

UserName() {
  dialog --backtitle "$Backtitle" --title " - User Name - " --nocancel\
      --inputbox "Enter a name for the primary user of the new system.\nIf you don't create a username here, a default user called 'archie' will be set up\n" 18 50 2> output.file
  Response=$(cat output.file)
  Entered=${Response,,}
  case $Entered in
    "") UserName="archie"
    ;;
    *) UserName=${Entered}
  esac
}

SetHostname() {
  Entered=""
  dialog --backtitle "$Backtitle" --title " - Hostname - " --nocancel\
      --inputbox "A hostname is needed. This will be a unique name to identify your device on a network.
      If you do not enter one, the default hostname of 'arch-linux' will be used\n" 18 50 2> output.file
  Response=$(cat output.file)
  Entered=${Response,,}
  case $Entered in
    "") HostName="arch-linux"
    ;;
    *) HostName=${Entered}
  esac
}

PickLuxuries() { # User selects any combination from a store of extras
  _Categories_List="Accessories Desktop_Environments Graphical Internet Multimedia Office Programming Window_Managers"
  case "${LuxuriesList}" in
  "") local Message="Now you have the option to add extras, such as a web browser, etc.\n If you want only a base Arch installation, exit without choosing any extras"
  ;;
  *) local Message="You can add more items, or select items to delete."
  esac
  Category="Continue"
  until [ $Category = "Done" ]
  do
  # First select a category. _Categories_List is a string variable in same order as the Categories array
    HowMany=`echo ${_Categories_List} | wc -w` # Count words
    echo ${_Categories_List} | sed "s/ /\\n/g" > feliz.output # Copy categories to file
    Counter=1
    ItemCounter=1
    Width=50
    Options=()
    until [ $ItemCounter -gt $HowMany ] # Prepare numbered list from file
    do
      Options[$((Counter))]=${ItemCounter}
      Counter=$((Counter+1))
      Options[${Counter}]=`sed -n "$ItemCounter p" feliz.output`
      Counter=$((Counter+1))
      ItemCounter=$((ItemCounter+1))
    done
    # Use $ItemCounter and ${Options[@]} array in menu dialog
    dialog --backtitle "$_Backtitle" --title " - Categories - " --no-shadow --ok-button "Select" --cancel-button "Done" --menu "$Message\n" 18 50 $ItemCounter "${Options[@]}" 2> feliz.output # Output is line number of selection
    RetVal=$?
    if [ $RetVal -gt 0 ]; then # <Cancel> selected
      break
    else
      Selected=`cat feliz.output`
      # Use selected number to get category for script use
      Category=${Categories[${Selected}]} # English
      # Get selection description in user language from $Options array
      # Selected=$((Selected*2))
      # _Category=${Options[${Selected}]} # User language
    fi
    # Then shop in that category
    ShoppingList
    local Message="Added so far: ${LuxuriesList}\n You can now choose from any of the other lists, or choose <Done> to finish this part of the setup"
  done
  if [ -n "${LuxuriesList}" ]; then
    Scope="Full"
  else
    Scope="Basic"
  fi
}

ShoppingList() {
  # Called by PickLuxuries after a category has been chosen.
  local Complete=0
  case "$LuxuriesList" in
    "") local Title="Choose your first category"
    ;;
    *) local Title="Choose your next category"
    esac
  while [ $Complete -eq 0 ]
  do
    local Message="Added so far: ${LuxuriesList}"
    # Pass category to listgen2 for user to choose one item;
    case $Category in
      "Accessories") listgen2 "$Accessories" "${Category}" "Done" "LongAccs"
      ;;
      "Desktop_Environments") listgen2 "$Desktops" "${Category}" "Done" "LongDesk"
      ;;
      "Graphical") listgen2 "$Graphical" "${Category}" "Done" "LongGraph"
      ;;
      "Internet") listgen2 "$Internet" "${Category}" "Done" "LongNet"
      ;;
      "Multimedia") listgen2 "$Multimedia" "${Category}" "Done" "LongMulti"
      ;;
      "Office") listgen2 "$Office" "${Category}" "Done" "LongOffice"
      ;;
      "Programming") listgen2 "$Programming" "${Category}" "Done" "LongProg"
      ;;
      "Window_Managers") listgen2 "$WindowManagers" "${Category}" "Done" "LongWMs"
      ;;
      *) break
    esac
    RetVal=$?
    if [ $RetVal -gt 0 ]; then # <Cancel> selected
      break
    else
      Picked=$(cat output.file)
    fi
    # Check that chosen item is not already on the list
    for lux in $LuxuriesList
    do
      if [ ${lux} = ${Picked} ]; then
        Temp=""
        dialog --yes-label "Keep" --no-label "Delete" --backtitle "$Backtitle" --title " - Information - " --no-shadow --yesno "\n  '$Picked' is already in your shopping list\n Do you wish to keep it or delete it?" 10 60
        case $? in
          0) continue 2 # Keep $LuxuriesList as it is and return to top of enclosing loop
          ;;
          *) for lux in $LuxuriesList
            do
              if [ ${lux} != ${Picked} ]; then
                Temp="$Temp $lux"
              fi
            done
            LuxuriesList="$Temp"
            continue 2 # Revise $LuxuriesList and return to top of enclosing loop
        esac
      fi
    done
    # Carry out any specific tests and add the item to the list
  case $Picked in
    "Cinnamon") DesktopEnvironment="Cinnamon"
        ChooseDM
      ;;
    "Deepin") DesktopEnvironment="Deepin"
        dialog --backtitle "$Backtitle" --title " Deepin desktop environment " \
    --yesno "The deepin-extras pack includes the Deepin game center, media players, terminal & screenshot tools. Include the extras pack?\n" 10 40
        case $? in
          0) DDEextras="deepin-extra"
           ;;
          *) DDEextras=""
        esac
      ;;
    "Enlightenment") DesktopEnvironment="Enlightenment"
        dialog --backtitle "$Backtitle" --title " - Enlightenment - " \
    --yesno "It is suggested that the Connman network utility and Terminology terminal emulator are installed for usability. Include them?" 10 40
        case $? in
          0) EnExtras="connman terminology"
           ;;
          *) EnExtras=""
        esac
        ChooseDM
      ;;
    "Fluxbox") DesktopEnvironment="Fluxbox"
        ChooseDM
      ;;
    "Gnome") DesktopEnvironment="Gnome"
        GoodiesGnome=""
      ;;
    "JWM") DesktopEnvironment="JWM"
        ChooseDM
      ;;
    "KDE") DesktopEnvironment="KDE"
      ;;
    "libreoffice") Picked="libreoffice-fresh"
      ;;
    "LXDE") DesktopEnvironment="LXDE"
      ;;
    "LXQt") DesktopEnvironment="LXQt"
        ChooseDM
      ;;
    "Mate") DesktopEnvironment="Mate"
        ChooseDM
      ;;
    "Openbox") DesktopEnvironment="Openbox"
        ChooseDM
      ;;
    "Xfce") DesktopEnvironment="Xfce"
        dialog --backtitle "$Backtitle" --title " - Desktop Environment - " \
    --yesno "\nThe xfce4-goodies pack includes includes the Whisker menu, extra\nplugins and a number of utilities such as the mousepad editor\nInclude the Goodies pack?\n" 10 40
        case $? in
          0) GoodiesXfce="xfce4-goodies"
           ;;
          *) GoodiesXfce=""
        esac
        ChooseDM
      ;;
     *) echo "${Picked} added in desktop at $LINENO" >> feliz.log
    esac
    LuxuriesList="${LuxuriesList} ${Picked}"
done
}

ChooseDM() { # Choose a display manager unless already fixed by certain DEs
  if [ -z $DisplayManager ]; then
    Greeter=""
    local Message="You can choose one of the following display managers.\nNot all display managers work well with all desktop environments. If in doubt, choose LightDM.\n If you do not install a display manager, you will have to launch your desktop environment manually."
    listgen1 "GDM LightDM LXDM sddm SLIM XDM" "ChooseDM/Greeter}" "Done"
    Response=$(cat output.file)
    if [ $? -eq 0 ]; then
      Reply=$Response
      case $Reply in
        "GDM") DisplayManager="gdm        "
         ;;
        "LightDM") DisplayManager="lightdm"
            Greeter="lightdm-gtk-greeter"
         ;;
        "LXDM") DisplayManager="lxdm"
         ;;
        "sddm") DisplayManager="sddm"
         ;;
        "SLIM") DisplayManager="slim"
         ;;
        "XDM") DisplayManager="xdm"
         ;;
        *) DisplayManager=""
    esac
    fi
  fi
}

FinalCheck() {
Repeat=1
while [ $Repeat -gt 0 ]
do
  local Message="These are the settings you have entered. Please check them ...\n Press <Continue> to install with these settings, or choose an item if you wish to change it"
  declare -a Settings
  Options="Root Swap Additional Kernel Grub Keyboard Locale Timezone Virtualbox Display_Manager Identity Extras"
  Settings[1]="$RootPartition $RootType                                         "
  if [ $SwapPartition ] || [ $SwapFile ]; then
    Settings[2]="$SwapPartition $SwapFile"
  else
    Settings[2]="No provision has been made for swap"
  fi
  if [ ${#AddPartList[@]} ]; then
    Counter=0
    Settings[3]=""
    for i in ${AddPartList[@]}
    do
      if [ $Counter -eq 0 ]; then
        Settings[3]="${AddPartList[$Counter]} ${AddPartType[$Counter]} ${AddPartMount[$Counter]}"
      else
        Settings[3]="${Settings[3]} : ${AddPartList[$Counter]} ${AddPartType[$Counter]} ${AddPartMount[$Counter]} "
      fi
      Counter=$((Counter+1))
    done
  else
    Settings[3]="No additional partitions have been allocated"
  fi
  case $Kernel in
    1) Settings[4]="The LTS kernel will be installed"
    ;;
    *) Settings[4]="The latest kernel will be installed"
  esac
  if [ $GrubDevice ]; then
    Settings[5]="Grub will be installed to $GrubDevice"
  else
    Settings[5]="No provision has been made for Grub"
  fi
  Settings[6]="Keyboard is $Countrykbd"
  Settings[7]="Locale will be set to $CountryLocale"
  Settings[8]="Zone/subZone will be $ZONE/$SUBZONE"
  case ${IsInVbox} in
    "VirtualBox") Settings[9]="Virtualbox guest utilities will be installed"
    ;;
    *) Settings[9]="Virtualbox guest utilities will not be installed"
  esac
  if [ -z $DisplayManager ]; then
    Settings[10]="No Display Manager selected"
  else
    Settings[10]="$DisplayManager"
  fi
  Settings[11]="Hostname = '$HostName' :  User = '$UserName'"
  Settings[12]="${LuxuriesList}"
  listgen2 "$Options" "Final_Check" "Continue" "Settings"
  RetVal=$?
  Response=$(cat output.file)
  if [ $RetVal -eq 0 ]; then
    Count=1
    for i in ${Options[@]} # Convert selection into item number in list
    do
      if [ $i = $Response ]; then
        break
      fi
      Count=$((Count+1))
    done
    case $Count in
      1) ChangeRootPartition
          AllocateRoot
      ;;
      2) ChangeSwapPartition
          AllocateSwap
      ;;
      3) ChangePartitions
          MorePartitions
      ;;
      4) SetKernel
      ;;
      5) SetGrubDevice
    ;;
      6) getkeymap
      ;;
      7) setlocale
      ;;
      8) SetTimeZone
      ;;
      9) ConfirmVbox
      ;;
      10) DisplayManager=""
      ChooseDM
      ;;
      11) ManualSettings
      ;;
      12) PickLuxuries
      ;;
      *) Repeat=0
    esac
  else
    Repeat=0
  fi
done
}

ManualSettings() {
  Retry="Y"
  declare local Settings
  while [ $Retry = "Y" ]
  do
    local Message=" Select data to change.\n or <Cancel> to finish"
    Settings[1]="(currently $HostName)"
    Settings[2]="(currently $UserName)"
    Options="Hostname Username"
    listgen2 "$Options" " Data Review " "" "Settings"
    RetVal=$?
    Response=$(cat output.file)
    Count=1
    for i in ${Options[@]} # Convert selection into item number in list
    do
      if [ $i = $Response ]; then
        break
      fi
      Count=$((Count+1))
    done
    if [ $RetVal -eq 0 ]; then
      case $Response in
        1) dialog --backtitle "$Backtitle" --title " Data Review " --nocancel \
         --inputbox "\n${_Enter_new} ${_Hostname} (${_currently} $HostName)\n" 18 50 2> output.file
         Response=$(cat output.file)
         if [ $Response ]; then
          HostName=$Response
         fi
        ;;
        2) dialog --backtitle "$Backtitle" --title " Data Review " --nocancel \
      --inputbox "\nEnter new name for user (currently $UserName)\n" 18 50 2> output.file
         Response=$(cat output.file)
        if [ $Response ]; then
          UserName=${Response}
        fi
        ;;
        *) Retry="N"
          break
      esac
    fi
  done
}
