#!/bin/bash

# desktop - Dialog version. Functions relevant to users, locations,
# desktop settings and data review called by the main feliz script

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# ----------------     -----------------------
# Function    Line     Function           Line
# ----------------     -----------------------
# getkeymap     20     Display Managers    262
# setlocale     35     FinalCheck          272
# settimezone   52     ManualSettings      330
# UserName      75     ChangeRootPartition 356
# Hostname      85     ChangeSwapPartition 364
# PickLuxuries  93     ChangePartitions    372
# ShoppingList 120     AddExtras           383

getkeymap() {
  ListKbs=`cat keymaps.list`
  keyboards=""
  for k in ${ListKbs[@]}; do
    keyboards="$keyboards $k"
  done
  local Message="${_getkeymap_Message}."
  listgen1 "${keyboards}" "${_Keyboards}" "nocancel"
  Countrykbd=$(cat output.file)
  loadkeys ${Countrykbd} 2>> feliz.log
}

setlocale() {
  LocaleList=(`cat /etc/locale.gen | grep UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | sed 's/#//g'`)
  for item in ${LocaleList[@]}; do
    Counter=$((Counter+1))
    Options[${Counter}]="$item"
    Counter=$((Counter+1))
    Options[${Counter}]="UTF-8"
  done
  local Message="${_setlocale_Message}"
  dialog --backtitle "$Backtitle" --title " - ${_Locales} - " --nocancel \
      --menu "\n$Message\n" 18 55 $Counter "${Options[@]}" 2> output.file
  CountryLocale="$(cat output.file).UTF-8"
  CountryCode=(`cat output.file | cut -c4-5`)
}

SetTimeZone() {
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  passzones=""
  for z in ${Zones[@]}; do
    passzones="$passzones $z"
  done
  local Message="${_SetTimeZone_Message1} ${_SetTimeZone_Message2}."
  listgen1 "${passzones}" "${_World_Zones}" "nocancel"
  ZONE=$(cat output.file)
  SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
  passzones=""
  for z in ${SubZones[@]}; do
    passzones="$passzones $z"
  done
  local Message="${_Set_City_Message}."
  listgen1 "$passzones" "${_Cities} ${ZONE}" "nocancel"
  SUBZONE=$(cat output.file)
}

UserName() {
  local Message="${_UserName_Message1}\n ${_UserName_Message2}\n ${_UserName_Message3}"
  dialog --backtitle "$Backtitle" --title " - ${_User_Name} - " --nocancel\
      --inputbox "\n$Message\n" 18 50 2> output.file
  Response=$(cat output.file)
  Entered=${Response,,}
  case $Entered in
    "") UserName="archie"
    ;;
    *) UserName=${Entered}
  esac
}

SetHostname() {
  Entered="arch-linux"
  local Message="${_SetHostName_Message1}\n ${_SetHostName_Message2}\n ${_SetHostName_Message3}"
  dialog --backtitle "$Backtitle" --title " - ${_Hostname} - " --nocancel\
      --inputbox "\n$Message\n" 16 40 2> output.file
  Response=$(cat output.file)
  Entered=${Response,,}
  case $Entered in
    "") HostName="arch-linux"
    ;;
    *) HostName=${Entered}
  esac
}

PickLuxuries() { # User selects any combination from a store of extras
  case "${LuxuriesList}" in
  "") local Message="${_PickLuxuries_Message1}\n ${_PickLuxuries_Message2}"
  ;;
  *) local Message="${_PickLuxuries_Message5}"
  esac
  Category="Continue"
until [ $Category = "${_Done}" ]
do
 # First select a category
  HowMany=`echo ${_Categories_List} | wc -w` # Count words
  echo ${_Categories_List} | sed "s/ /\\n/g" > feliz.output # Copy categories to file
  Counter=1
  ItemCounter=1
  Width=50
  Options=()
  until [ $ItemCounter -gt $HowMany ] # Prepare numbered list from file
  do
    Options[$((Counter))]=${ItemCounter}
    Counter=$((Counter+1))
    Options[${Counter}]=`sed -n "$ItemCounter p" feliz.output`
    Counter=$((Counter+1))
    ItemCounter=$((ItemCounter+1))
  done

  # Use $ItemCounter and ${Options[@]} array in menu dialog
  dialog --backtitle "$_Backtitle" --title " - ${_Categories} - " --no-shadow --ok-button "${_Select}" --menu "$Message\n" 18 50 $ItemCounter "${Options[@]}" 2> feliz.output # Output is line number of selection
  RetVal=$?
  if [ $RetVal -gt 0 ]; then # <Cancel> selected
    break
  else
    Selected=`cat feliz.output`
    # Use selected number to get category for script use
    Category=${Categories[${Selected}]} # English
    # Get selection description in user language from $Options array
    Selected=$((Selected*2))
    _Category=${Options[${Selected}]} # User language
  fi
  # Then shop in that category
  ShoppingList
  local Message="${_PickLuxuries_Message3}: ${LuxuriesList}\n ${_PickLuxuries_Message4} ${_PickLuxuries_Message6}"
done
if [ -n "${LuxuriesList}" ]; then
  Scope="Full"
else
  Scope="Basic"
fi
}

ShoppingList() {
  # Called by PickLuxuries after a category has been chosen.
  local Complete=0
  case "$LuxuriesList" in
    "") local Title="${_ShoppingList_Title1}"
    ;;
    *) local Title="${_ShoppingList_Title2}"
    esac
  while [ $Complete -eq 0 ]
  do
    local Message="${_Addedsofar}: ${LuxuriesList}"
    # Pass category to listgen2 for user to choose one item;
    case $Category in
      "Accessories") listgen2 "$Accessories" "${_Category}" "${_Done}" "LongAccs"
      ;;
      "Desktop_Environments") listgen2 "$Desktops" "${_Category}" "${_Done}" "LongDesk"
      ;;
      "Graphical") listgen2 "$Graphical" "${_Category}" "${_Done}" "LongGraph"
      ;;
      "Internet") listgen2 "$Internet" "${_Category}" "${_Done}" "LongNet"
      ;;
      "Multimedia") listgen2 "$Multimedia" "${_Category}" "${_Done}" "LongMulti"
      ;;
      "Office") listgen2 "$Office" "${_Category}" "${_Done}" "LongOffice"
      ;;
      "Programming") listgen2 "$Programming" "${_Category}" "${_Done}" "LongProg"
      ;;
      "Window_Managers") listgen2 "$WindowManagers" "${_Category}" "${_Done}" "LongWMs"
      ;;
      *) break
    esac
    RetVal=$?
    if [ $RetVal -gt 0 ]; then # <Cancel> selected
      break
    else
      Picked=$(cat output.file)
    fi
    # Check that chosen item is not already on the list
    for lux in $LuxuriesList
    do
      if [ ${lux} = ${Picked} ]; then
        Temp=""
        dialog --yes-label "${_Keep}" --no-label "${_Delete}" --backtitle "$Backtitle" --title " - ${_Information} - " --no-shadow --yesno "\n  '$Picked' ${_Already1}\n ${_Already2}" 10 60
        case $? in
          0) continue 2 # Keep $LuxuriesList as it is and return to top of enclosing loop
          ;;
          *) for lux in $LuxuriesList
            do
              if [ ${lux} != ${Picked} ]; then
                Temp="$Temp $lux"
              fi
            done
            LuxuriesList="$Temp"
            continue 2 # Revise $LuxuriesList and return to top of enclosing loop
        esac
      fi
    done
    # Carry out any specific tests and add the item to the list
  case $Picked in
    "Cinnamon") DesktopEnvironment="Cinnamon"
        ChooseDM
      ;;
    "Deepin") DesktopEnvironment="Deepin"
        dialog --backtitle "$Backtitle" --title " Deepin desktop environment " \
    --yesno "${_Deepin_Extras}\n" 10 40
        case $? in
          0) DDEextras="deepin-extra"
           ;;
          *) DDEextras=""
        esac
      ;;
    "Enlightenment") DesktopEnvironment="Enlightenment"
        dialog --backtitle "$Backtitle" --title " Enlightenment " \
    --yesno "${_Enlightenment_Extras}" 10 40
        case $? in
          0) EnExtras="connman terminology"
           ;;
          *) EnExtras=""
        esac
        ChooseDM
      ;;
    "Feliz") DesktopEnvironment="Xfce"
          FelizXfce="Yes"
        GoodiesXfce="xfce4-goodies"
        ChooseDM
      ;;
    "Fluxbox") DesktopEnvironment="Fluxbox"
        ChooseDM
      ;;
    "Gnome") DesktopEnvironment="Gnome"
        GoodiesGnome=""
      ;;
    "JWM") DesktopEnvironment="JWM"
        ChooseDM
      ;;
    "KDE") DesktopEnvironment="KDE"
      ;;
    "libreoffice") Picked="libreoffice-fresh"
      ;;
    "LXDE") DesktopEnvironment="LXDE"
      ;;
    "LXQt") DesktopEnvironment="LXQt"
        ChooseDM
      ;;
    "Mate") DesktopEnvironment="Mate"
        ChooseDM
      ;;
    "Openbox") DesktopEnvironment="Openbox"
        ChooseDM
      ;;
    "Xfce") DesktopEnvironment="Xfce"
        dialog --backtitle "$Backtitle" --title " - Xfce ${_Desktop_Environment} - " \
    --yesno "\n${_Xfce4_Goodies0}\n${_Xfce4_Goodies1}\n${_Xfce4_Goodies2}\n" 10 40
        case $? in
          0) GoodiesXfce="xfce4-goodies"
           ;;
          *) GoodiesXfce=""
        esac
        ChooseDM
      ;;
     *) echo "Error in desktop at $LINENO" >> feliz.log
    esac
    LuxuriesList="${LuxuriesList} ${Picked}"
done
}

ChooseDM() { # Choose a display manager unless already fixed by certain DEs
  if [ -z $DisplayManager ]; then
    Greeter=""
    local Message="\n${_ChooseDM_Message1}\n ${_ChooseDM_Message2}\n ${_ChooseDM_Message3}\n ${_ChooseDM_Message4}\n ${_ChooseDM_Message5}"
    listgen1 "GDM LightDM LXDM sddm SLIM XDM" "${_ChooseDM_Greeter}" "${_Done}"
    Response=$(cat output.file)
    if [ $? -eq 0 ]; then
      Reply=$Response
      case $Reply in
        "GDM") DisplayManager="gdm        "
         ;;
        "LightDM") DisplayManager="lightdm"
            Greeter="lightdm-gtk-greeter"
         ;;
        "LXDM") DisplayManager="lxdm"
         ;;
        "sddm") DisplayManager="sddm"
         ;;
        "SLIM") DisplayManager="slim"
         ;;
        "XDM") DisplayManager="xdm"
         ;;
        *) DisplayManager=""
    esac
    fi
  fi
}

FinalCheck() {
Repeat=1
while [ $Repeat -gt 0 ]
do
  local Message="${_FinalCheck_Message1} ...\n ${_FinalCheck_Message2}"
  declare -a Settings
  Options="Root Swap Additional Kernel Grub Keyboard Locale Timezone Virtualbox Display_Manager Identity Extras"
  Settings[1]="$RootPartition $RootType                                         "
  if [ $SwapPartition ] || [ $SwapFile ]; then
    Settings[2]="$SwapPartition $SwapFile"
  else
    Settings[2]="${_No_Swap}"
  fi
  if [ ${#AddPartList[@]} ]; then
    Counter=0
    Settings[3]=""
    for i in ${AddPartList[@]}
    do
      if [ $Counter -eq 0 ]; then
        Settings[3]="${AddPartList[$Counter]} ${AddPartType[$Counter]} ${AddPartMount[$Counter]}"
      else
        Settings[3]="${Settings[3]} : ${AddPartList[$Counter]} ${AddPartType[$Counter]} ${AddPartMount[$Counter]} "
      fi
      Counter=$((Counter+1))
    done
  else
    Settings[3]="${_No_Partitions}"
  fi
  case $Kernel in
    1) Settings[4]="${_LTS_Kernel}"
    ;;
    *) Settings[4]="${_Latest_Kernel}"
  esac
  if [ $GrubDevice ]; then
    Settings[5]="${_Grub_Install} $GrubDevice"
  else
    Settings[5]="${_No_Grub}"
  fi
  Settings[6]="${_Keyboard_is} $Countrykbd"
  Settings[7]="${_Locale_is} $CountryLocale"
  Settings[8]="${_Zones} $ZONE/$SUBZONE"
  case ${IsInVbox} in
    "VirtualBox") Settings[9]="${_Virtualbox_On}"
    ;;
    *) Settings[9]="${_Virtualbox_Off}"
  esac
  if [ -z $DisplayManager ]; then
    Settings[10]="${_No_Display_Manager}"
  else
    Settings[10]="$DisplayManager"
  fi
  Settings[11]="${_Hostname} = '$HostName' :  ${_User} = '$UserName'"
  Settings[12]="${LuxuriesList}"
  listgen2 "$Options" "${_Final_Check}" "${_Continue}" "Settings"
  RetVal=$?
  Response=$(cat output.file)
  if [ $RetVal -eq 0 ]; then
    Count=1
    for i in ${Options[@]} # Convert selection into item number in list
    do
      if [ $i = $Response ]; then
        break
      fi
      Count=$((Count+1))
    done
    case $Count in
      1) ChangeRootPartition
          AllocateRoot
      ;;
      2) ChangeSwapPartition
          AllocateSwap
      ;;
      3) ChangePartitions
          MorePartitions
      ;;
      4) SetKernel
      ;;
      5) SetGrubDevice
    ;;
      6) getkeymap
      ;;
      7) setlocale
      ;;
      8) SetTimeZone
      ;;
      9) ConfirmVbox
      ;;
      10) DisplayManager=""
      ChooseDM
      ;;
      11) ManualSettings
      ;;
      12) PickLuxuries
      ;;
      *) Repeat=0
    esac
  else
    Repeat=0
  fi
done
}

ManualSettings() {
  Retry="Y"
  declare local Settings
  while [ $Retry = "Y" ]
  do
    local Message=" ${_ManualSettings_Message1}\n ${_ManualSettings_Message1}:"
    Settings[1]="(${_currently} $HostName)"
    Settings[2]="(${_currently} $UserName)"

    Options="${_Hostname} ${_Username}"

    listgen2 "$Options" " Data Review " "" "Settings"
    RetVal=$?
    Response=$(cat output.file)
    Count=1
    for i in ${Options[@]} # Convert selection into item number in list
    do
      if [ $i = $Response ]; then
        break
      fi
      Count=$((Count+1))
    done
    if [ $RetVal -eq 0 ]; then
      case $Response in
        1) dialog --backtitle "$Backtitle" --title " Data Review " --nocancel \
         --inputbox "\n${_Enter_new} ${_Hostname} (${_currently} $HostName)\n" 18 50 2> output.file
         Response=$(cat output.file)
         if [ $Response ]; then
          HostName=$Response
         fi
        ;;
        2) dialog --backtitle "$Backtitle" --title " Data Review " --nocancel \
      --inputbox "\n${_Enter_new} ${_Name_for_user} (${_currently} $UserName)\n" 18 50 2> output.file
         Response=$(cat output.file)
        if [ $Response ]; then
          UserName=${Response}
        fi
        ;;
        *) Retry="N"
          break
      esac
    fi
  done
}
