#!/bin/bash

# The Feliz2 installation scripts for Arch Linux
# Developed by Elizabeth Mills
# Revision date: 22nd December 2016

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation - either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
#      WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#            General Public License for more details.

# A copy of the GNU General Public License is available from the Feliz2
#        page at http://sourceforge.net/projects/feliz2/files
#        or https://github.com/angeltoast/feliz2, or write to:
#                 The Free Software Foundation, Inc.
#                  51 Franklin Street, Fifth Floor
#                    Boston, MA 02110-1301 USA
# In this module: functions for setting variables used during installation
# --------------------   ------------------------
# Function        Line   Function            Line
# --------------------   ------------------------
# not_found         41    SetHostname         441
# Echo              46    PickLuxuries        458
# TPread            51    KeepOrDelete        490
# SetLanguage
# Translate
# SetKernel         67    ShoppingList        517
# ConfirmVbox       80    ChooseDM            619
# SetTimeZone      104    SetGrubDevice       676
# SetSubZone       140     --- Review stage ---
# America          183    FinalCheck          699
# setlocale        222    ManualSettings      829
# SearchKeyboards  390    ChangeSwapPartition 837
# getkeymap        359    ChangePartitions    845
# Username         425    AddExtras           857
# --------------------    -----------------------

not_found() {
  Echo
  read_timed "Not found. Please try again ..." 1
}

Echo() { # Use in place of 'echo' for basic text print
  printf "%-s\n" "$1"
  cursor_row=$((cursor_row+1))
}

TPread() { # Aligned prompt for user-entry
  # $1 = prompt ... Returns result through $Response
  T_COLS=$(tput cols)
  lov=${#1}
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( (T_COLS - lov) / 2 ))
  elif [ ${lov} -gt ${T_COLS} ]; then
    stpt=0
  else
    stpt=$(( (T_COLS - 10) / 2 ))
  fi
  EMPTY="$(printf '%*s' $stpt)"
  read -p "$EMPTY $1" Response
  cursor_row=$((cursor_row+1))
}

SetKernel() {
  print_heading
  Echo
  PrintOne "Choose your kernel"
  PrintOne "The Long-Term-Support kernel (LTS) offers stabilty,"
  PrintOne "while the Latest kernel has all the new features."
  PrintOne "If in doubt, choose LTS."
  Echo
  local Counter=0
  listgen1 "LTS Latest" "Kernels" "nocancel"
  Kernel=${Response} # Set the Kernel variable (1 = LTS; 2 = Latest)
}

ConfirmVbox() {
  while :
  do
    print_heading
    PrintOne "It appears that feliz is running in Virtualbox."
    PrintOne "If it is, feliz can install Virtualbox guest"
    PrintOne "utilities and make appropriate settings for you."
    Echo
    PrintOne "Install Virtualbox guest utilities?: "
    Echo
    Buttons "Yes/No" "[ Yes ] [ No ]" "Use arrow keys to move. [Enter] to select"
    Echo
    case $Response in
      1) IsInVbox="VirtualBox"
      ;;
      "") invalid_option
        continue
      ;;
      *) IsInVbox=""
    esac
    return 0
  done
}

SetTimeZone() {
  SUBZONE=""
  while [ -z $SUBZONE ]
  do
    print_heading
    PrintOne "To set the system clock, please first"
    PrintOne "choose the World Zone of your location."
    Zones=$(timedatectl list-timezones | cut -d'/' -f1 | uniq) # Ten world zones
    Echo
    zones=""
    for x in ${Zones[@]}                      # Convert to space-separated list
    do
      zones="$zones $x"
    done
    listgen1 "${zones}" "" "nocancel"         # Allow user to select one
    ZONE=$Result
    Echo
    case $Result in                           # UTC requires no subzone
      "UTC") SUBZONE=""
          print_heading
          read_timed "Zone set to: '$ZONE'" 1 # Display and exit
          break
      ;;
      *) SetSubZone                           # Call subzone function
        case $Result in                       # If user quits
        "Exit" | "") SUBZONE=""
        ;;
        *) SUBZONE="$Result"
          print_heading
          read_timed "Zone and Subzone set to: '$ZONE/$SUBZONE'" 1
        esac
    esac
  done
}

SetSubZone() {  # Use ZONE set in SetTimeZone to list available subzones

  SUBZONE=""

  while :
  do
    case $ZONE in
    "Arctic") Result="Longyearbyen"
    ;;
    "Antarctica" | "Australia") print_heading
      PrintOne "Please choose your nearest location in ${ZONE}, or [Exit] to go back"
      listgen1 "$(timedatectl list-timezones | grep ${ZONE}/ | cut -d'/' -f2)"
      if [ $Result = "Exit" ] || [ $Result = "" ]; then
        SetTimeZone
      fi
    ;;
    "Atlantic" | "Indian") print_heading
      PrintOne "Please choose your nearest location in $ZONE Ocean, or [Exit] to go back"
      listgen1 "$(timedatectl list-timezones | grep ${ZONE}/ | cut -d'/' -f2)"
      if [ $Result = "Exit" ] || [ $Result = "" ]; then
        SetTimeZone
      fi
    ;;
    "Pacific") timedatectl list-timezones | grep ${ZONE}/ | cut -d'/' -f2 > input.file
      listgenx "Please choose your nearest location in $ZONE Ocean, or type Exit to go back"
      if [ $Result = "Exit" ] || [ $Result = "" ]; then
        SetTimeZone
      fi
    ;;
    "America") America
     ;;
    *) timedatectl list-timezones | grep ${ZONE}/ | cut -d'/' -f2 > input.file  # List of subzones
      listgenx "Please choose your nearest location in ${ZONE}, or type Exit to go back"
      if [ $Result = "Exit" ] || [ $Result = "" ]; then
        SetTimeZone
      fi
    esac
    break
  done
}

America() {
  SUBZONE=""      # Make sure this variable is empty
  print_heading
  PrintOne "Are you in any of these states?"
  SubList=""      # Start an empty list
  Previous=""     # Prepare to save previous record
  local Toggle="First"
  for i in $(timedatectl list-timezones | grep "$ZONE/" | cut -d'/' -f2)
  do
    if [ $Previous ] && [ $i = $Previous ] && [ $Toggle = "First" ]; then # First reccurance
      SubList="$SubList $i"
      Toggle="Second"
    elif [ $Previous ] && [ $i != $Previous ] && [ $Toggle = "Second" ]; then # 1st occ after prev group
      Toggle="First"
      Previous=$i
    else                                                                  # Subsequent occurances
      Previous=$i
    fi
  done
  SubGroup=""
  SubList="$SubList None_of_these"        # Add a decline option
  listgen1 "$SubList"

  case $Result in
  "None_of_these") timedatectl list-timezones | grep $ZONE | grep -v 'Argentina\|Indiana\|Kentucky\|North_Dakota' | cut -d'/' -f2 > input.file
    listgenx "$Instruction"
  ;;
  '' | "Exit") SetTimeZone
  ;;
  *) SubGroup=$Result                     # Because America has some cities in subgroups
    print_heading
    PrintOne "Please choose your nearest location in $ZONE or Exit to go back"
    listgen1 "$(timedatectl list-timezones | grep ${ZONE}/${SubGroup} | cut -d'/' -f3)"
    if [ $Result = "" ] || [ $Result = "Exit" ]; then
      SetTimeZone
    fi
  esac
}

setlocale() { # Uses country-code in cities.list to match ZONE/SUBZONE to country-code,
              # ... and hence to the list of languages generated from /etc/locale.gen
  ZoneID="${ZONE}/${SUBZONE}"         # Use a copy of zones set in SetTimeZone (eg: Europe/London)
  CountryLocale=
  while [ -z $CountryLocale ]
  do
    # Find in cities.list (field $2 is the country code, eg: GB)
    SEARCHTERM=$(grep "$ZoneID" cities.list | cut -d':' -f2)
    SEARCHTERM=${SEARCHTERM:0:2}                # Ensure no trailing spaces
    print_heading
    # Find all matching entries in locale.gen # This will be a table of locales in the form: en_GB
    LocaleList=$(grep "\#" /etc/locale.gen | grep ${SEARCHTERM}.UTF-8 | cut -d'.' -f1 | sort | uniq | cut -d'#' -f2 | cut -d' ' -f2)
    HowMany=$(echo $LocaleList | wc -w)   # Count them
    Rows=$(tput lines)       # Ensure menu doesn't over-run
    Rows=$((Rows-4))         # Available (printable) rows
    case $HowMany in         # Offer language options for the selected country
    0) print_heading
      Echo
      PrintOne "No language has been found for your location."
      PrintOne "Would you like to use one of the following?"
      listgen1 "English French Spanish" "Use arrow keys to move. [Enter] to select" "No"
      case $Result in
      "English") Item="en"
      ;;
      "French") Item="fr"
      ;;
      "Spanish") Item="es"
      ;;
      *) City=""
        AllLanguages
        if [ $Result = "Exit" ]; then
          SetTimeZone
        else
          Item=$(grep "${Language}:" languages.list)
          Item=${Item: -2:2}
          CountryLocale="${Item}_${SEARCHTERM}.UTF-8"
          CountryCode=${CountryLocale:3:2}        # 2 characters from position 3
        fi
      esac
      CountryLocale="${Item}_${SEARCHTERM}.UTF-8"
      CountryCode=${CountryLocale:3:2}            # 2 characters from position 3
    ;;
    1) Item="${LocaleList:0:2}"     # First two characters of the record in locale.gen (eg: en)
      Language="$(grep :$Item languages.list | cut -d':' -f1)"
      if [ -z $Language ] || [ $Language = "" ]; then  # If language name not found in languages.list
        Language=$Item                                 # Use the abbreviation
      fi
      Echo
      PrintOne "Only one language found for your location: $Language"
      PrintOne "Shall we use this as your language?"  # Allow user to confirm
      Buttons "Yes/No" "[ Yes ] [ No ]" "Use arrow keys to move. [Enter] to select"
      if [ $Result = "No" ]; then
        City=""
        AllLanguages
        if [ $Result = "Exit" ] || [ $Result = "exit" ]; then
          SetTimeZone
        else
          Item=$(grep "${Language}:" languages.list)
          Item=${Item: -2:2}
          CountryLocale="${Item}_${SEARCHTERM}.UTF-8"
          CountryCode=${CountryLocale:3:2}              # 2 characters from position 3
        fi
      else
        Item=$(grep "${Language}:" languages.list)
        Item=${Item: -2:2}
        CountryLocale="${Item}_${SEARCHTERM}.UTF-8"
        CountryCode=${CountryLocale:3:2}              # 2 characters from position 3
      fi
    ;;
    *) # Check the short code for each language against long names in language.list
      if [ $HowMany -ge $Rows ]; then                 # Too many to display in menu, so use listgenx
        # Make a shortlist of relevant language codes
        rm input.file
        ShortList=$(grep ${SEARCHTERM}.UTF-8 /etc/locale.gen | cut -d' ' -f2 | cut -c 1-2 | uniq)
        for l in ${ShortList}
        do
          grep "$l$" languages.list >> input.file
        done
        listgenx "Now please choose your language from this list, or type 'Exit' to try again."
      else
        local Counter=0
        localelist=""
        for l in ${LocaleList[@]}                       # Convert to space-separated list
        do
          localelist="${localelist} $l"                 # Add each item to text list for handling
          Counter=$((Counter+1))
        done
        if [ $Counter -eq 0 ]; then                     # If none found, try again
          not_found
          SetTimeZone
        fi
        Counted=$(echo $localelist | wc -w)             # Count number of words in $localelist
        Newlist=""                                      # Prepare to make list of language names from codes
        for (( i=1; i <= Counted; ++i ))
        do                                              # For each item in localelist (eg: en_GB)
          loc=$(echo $localelist | cut -d' ' -f$i)      # Save the $i-th item from localelist
          Newlist="$Newlist ${loc:0:2}"                 # Add first two characters (language code) to list
        done
        # If more than one language found
        localelist="${Newlist}"                         # Save the list to continue
        Newlist=""                                      # Prepare new empty list
        Prev="xyz"                                      # Arbitrary comparison
        for l in $localelist                            # Remove any duplicates
        do
          if [ $l != $Prev ]; then
            Newlist="$Newlist $l"
            Prev=$l
          fi
        done
        localelist="${Newlist}"                         # Copy to working variable
        choosefrom=""
        Newlist=""                                      # Empty new list again
        Counter=0                                       # Prepare to limit length of file
        for l in ${localelist}
        do                                              # Find the language in languages.list
          Item="$(grep $l\$ languages.list | cut -d':' -f1)"
          if [ $Item ]; then                            # If found
            choosefrom="$choosefrom $Item"              # Add to list of languages for user
            Newlist="$Newlist $l"                       # ... and a matching list of codes
          fi
          Counter=$((Counter+1))
        done
        localelist="${Newlist}"                         # Ensure that localelist matches choosefrom
        print_heading
        PrintOne "Now please choose your language from this list, or [ Exit ] to try again."
        listgen1 "${choosefrom}" "nomessage" ""         # Menu if less than one screenful
      fi
      case $Result in
      "Exit" | "") AllLanguages
          if [ $Result = "Exit" ]; then
            SetTimeZone
          else
            CountryLocale="${Result}_${SEARCHTERM}.UTF-8"
            CountryCode=${CountryLocale:3:2}              # 2 characters from position 3
          fi
      ;;
      *) Language=$(grep $Result languages.list)          # Lookup the result in languages file
        loc=${Language: -2:2}                             # Just the last two characters
        CountryLocale="${loc}_${SEARCHTERM}.UTF-8"
        CountryCode=${CountryLocale:3:2}                  # 2 characters from position 3
      esac
    esac
  done
  print_heading
  read_timed "Locale is set to: ${CountryLocale:0:5}" 1 # 5 characters from start of $CountryLocale
}

AllLanguages() {
  while :
  do
    print_heading
    Echo
    cat languages.list > input.file                 # Prepare file for listgenx to display all languages
    listgenx "Please choose your language from this list, or type 'Exit' to start again."
    if [ $Result = "" ] || [ $Result = "Exit" ]; then
      SetTimeZone                                   # Start again from time zone
    else
      Result="${Result: -2:2}"                      # Pass short code back to caller
      break
    fi
  done
}

getkeymap() {
  Countrykbd=""
  country="${CountryLocale,,}"
  case ${country:3:2} in
  "gb") Term="uk"
  ;;
  *) Term="${country:3:2}"
  esac
  ListKbs=$(cat keymaps.list | grep ${Term})
  Found=$(cat keymaps.list | grep ${Term} | wc -l)  # Count records
  if [ ! $Found ]; then
    Found=0
  fi
  while [ -z $Countrykbd ]
  do
    print_heading
    Echo
    case $Found in
    0)  # If the search found no matches
      read_timed "Sorry, no keyboards found based on your location" 2
      SearchKeyboards
    ;;
    1)  # If the search found one match
      PrintOne "Only one keyboard found based on your location"
      PrintOne "Do you wish to accept this? Select [ No ] to search for alternatives"
      Buttons "Yes/No" "[ Yes ] [ No ]" "Use arrow keys to move. [Enter] to select"
      case ${Result} in
      "Exit"|"exit"|"") SearchKeyboards
      ;;
      *) Countrykbd="${Result}"
      esac
      loadkeys ${Countrykbd} 2>> feliz.log
    ;;
    *) # If the search found multiple matches
      Rows=$(tput lines)                          # to ensure menu doesn't over-run
      Rows=$((Rows-4))                            # Available (printable) rows
      if [ $Found -ge $Rows ]; then
        rm input.file
        for i in $ListKbs
        do
          echo $i >> input.file
        done
        listgenx "Choose one of the following keyboards, or type 'Exit' to enter manually"
      else
        PrintOne "The following keyboards match your location. You can"
        PrintOne "choose one, or [ Exit ] to search for alternatives"
        listgen1 "$ListKbs" "" ""
      fi
      case ${Result} in
      "Exit"|"exit"|"") SearchKeyboards
      ;;
      *) Countrykbd="${Result}"
      esac
      loadkeys ${Countrykbd} 2>> feliz.log
    esac
  done
  print_heading
  read_timed "The keyboard is now set to: '$Countrykbd'" 1
}

SearchKeyboards() {
  while [ -z $Countrykbd ]
  do
    print_heading
    PrintOne "If you know the code for your keyboard layout, please enter"
    PrintOne "it now. If not, try entering a two-letter abbreviation"
    PrintOne "for your country or language and a list will be displayed."
    PrintOne "Alternatively, enter 'Exit' to start again."
    Echo
    TPread "(eg: 'dvorak' or 'us'): "
    local Term="${Response,,}"
    if [ $Term = "exit" ]; then
      SetTimeZone
    fi
    Echo
    ListKbs=$(cat keymaps.list | grep ${Term})
    if [ -n "${ListKbs}" ]; then  # If a match or matches found
      print_heading
      PrintOne "Select your keyboard, or [ Exit ] to try again"
      listgen1 "$ListKbs" "" ""
      if [ ${Result} = "Exit" ]; then
        continue
      else
        Countrykbd="${Result}"
      fi
      loadkeys ${Countrykbd} 2>> feliz.log
    else
      print_heading
      Echo
      PrintOne "No keyboards found containing '$Term'"
      PrintOne "Please try again"
    fi
  done
}

UserName() {
  print_heading
  PrintOne "Enter a name for the primary user of the new system."
  PrintOne "If you don't create a username here, a default user"
  PrintOne "called 'archie' will be set up"
  Echo
  TPread "User Name: "
  Entered=${Response,,}
  case $Entered in
    "") UserName="archie"
    ;;
    *) UserName=${Entered}
  esac
  PrintOne "User '${UserName}' will be created."
}

SetHostname() {
  Entered="arch-linux"
  print_heading
  PrintOne "A hostname is needed. This will be a unique name to identify"
  PrintOne "your device on a network. If you do not enter one, the"
  PrintOne "default hostname of 'arch-linux' will be used."
  Echo
  TPread "Enter a hostname for your computer: "
  Entered=${Response,,}
  case $Entered in
    "") HostName="arch-linux"
    ;;
    *) HostName=${Entered}
  esac
  PrintOne "Hostname = $HostName"
}

PickLuxuries() { # User selects any combination from a store of extras
  CategoriesList="Accessories Desktop_Environments Graphical Internet Multimedia Office Programming Window_Managers"
  print_heading
  case "$LuxuriesList" in
  '') PrintOne "Now you have the option to add extras, such as a web browser,"
    PrintOne "desktop environment, etc, from the following categories."
    PrintOne "If you want only a base Arch installation, exit without choosing any extras."
  ;;
  *) PrintOne "You can add more items, or select items to delete."
  esac
  Echo
  while :
  do
    listgen1 "${CategoriesList}" "" ""
    Category=$Response
    if [ $Result = "Exit" ]; then
      break
    else
      ShoppingList
      print_heading
      PrintOne "Added so far: ${LuxuriesList}"
      PrintOne "You can now choose from any of the other lists,"
      PrintOne "or choose [ Exit ] to finish this part of the setup."
    fi
  done
  if [ -n "${LuxuriesList}" ]; then
    Scope="Full"
  else
    Scope="Basic"
  fi
}

KeepOrDelete() {
  Bagged="$1"
  while :
  do
    print_heading
    Message="$Bagged is already in your shopping list."
    Buttons "Yes/No" "[ Keep ] [ Delete ]" "Use arrow keys to move. [Enter] to select"
    case $Response in
      1) Temp="$LuxuriesList"
        break
      ;;
      2) Validated="Y"
        Temp=""
        for lux in $LuxuriesList
        do
          if [ ${lux} != ${Bagged} ]; then
            Temp="$Temp $lux"
          fi
        done
        break
      ;;
      *) invalid_option
    esac
  done
  LuxuriesList="$Temp"
}

ShoppingList() { # Called by PickLuxuries after a category has been chosen.
  Passed="Choose your first item"
  while :
  do
    print_heading
    PrintOne "Added so far: ${LuxuriesList}"
    Echo
    PrintOne "${Categories[$Category]}" # $Category is number of item in CategoriesList
    # Pass category to listgen2 for user to choose one item;
    local Counter=1
    case $Category in
       1) for i in ${Accessories}
          do
           LongAccs1[${Counter}]="$i - ${LongAccs[${Counter}]}"
           (( Counter+=1 ))
          done
         listgen2 "$Accessories" "" "" "LongAccs1"
       ;;
       2) for i in ${Desktops}
          do
           LongDesk1[${Counter}]="$i - ${LongDesk[${Counter}]}"
           (( Counter+=1 ))
          done
         listgen2 "$Desktops" "" "" "LongDesk1"
       ;;
       3) for i in ${Graphical}
          do
            LongGraph1[${Counter}]="$i - ${LongGraph[${Counter}]}"
           (( Counter+=1 ))
          done
           listgen2 "$Graphical" "" "" "LongGraph1"
       ;;
       4) for i in ${Internet}
          do
           LongNet1[${Counter}]="$i - ${LongNet[${Counter}]}"
            (( Counter+=1 ))
         done
         listgen2 "$Internet" "${Headline}" "" "LongNet1"
       ;;
       5) for i in ${Multimedia}
          do
            LongMulti1[${Counter}]="$i - ${LongMulti[${Counter}]}"
            (( Counter+=1 ))
          done
          listgen2 "$Multimedia" "" "" "LongMulti1"
       ;;
       6) for i in ${Office}
          do
            LongOffice1[${Counter}]="$i - ${LongOffice[${Counter}]}"
            (( Counter+=1 ))
          done
          listgen2 "$Office" "" "" "LongOffice1"
       ;;
       7) for i in ${Programming}
          do
            LongProg1[${Counter}]="$i - ${LongProg[${Counter}]}"
            (( Counter+=1 ))
          done
          listgen2 "$Programming" "" "" "LongProg1"
       ;;
       8) for i in ${WindowManagers}
          do
            LongWMs1[${Counter}]="$i - ${LongWMs[${Counter}]}"
            (( Counter+=1 ))
          done
          listgen2 "$WindowManagers" "" "" "LongWMs1"
      ;;
      *) break
    esac
    Passed="Choose your next item" # Loop until user selects "Exit"
    if [ $Result = "Exit" ]; then
      break
    fi
    AddToList="Y"
    # First check that chosen item is not already on the list
    for lux in $LuxuriesList
    do
      if [ ${lux} = ${Result} ]; then
        KeepOrDelete "$Result" # New function
        Result=""
        continue
      fi
    done
    # Then carry out any specific tests and add the item to the list
    SaveResult=$Result # (Because other subroutines return $Result)
    case $SaveResult in
      "Budgie" | "Cinnamon" | "Deepin" | "Enlightenment" | "Fluxbox" | "Gnome" | "KDE" | "LXDE" | "LXQt" |  "Mate" | "Openbox" | "Xfce") DesktopEnvironment=$SaveResult

       ;;
      "") continue
       ;;
      *) Echo
    esac
    if [ ${SaveResult} = "libreoffice" ]; then
      LuxuriesList="${LuxuriesList} libreoffice-fresh"
    else
      LuxuriesList="${LuxuriesList} ${SaveResult}"
    fi
  done
  Passed=""     # Clear the information variable
}

ChooseDM() { # Choose a display manager
  case $DisplayManager in
  "") # Only offered if no other display manager has been set
      Counter=0
      Greeter=""
      DMList="GDM LightDM LXDM sddm SLIM XDM"
      print_heading
      PrintOne "A display manager provides a graphical login screen."
      PrintOne "If in doubt, choose LightDM."
      PrintOne "If you do not install a display manager, you will have"
      PrintOne "to launch your desktop environment manually."
      Echo
      listgen1 "${DMList}" "" ""
      Reply=$Response
      for item in ${DMList}
      do
        Counter=$((Counter+1))
        if [ $Counter -eq $Reply ]
        then
          SelectedDM=$item
          case $SelectedDM in
            "GDM") DisplayManager="gdm"
              ;;
            "LightDM") DisplayManager="lightdm"
                  Greeter="lightdm-gtk-greeter"
              ;;
            "LXDM") DisplayManager="lxdm"
              ;;
            "sddm") DisplayManager="sddm"
              ;;
            "SLIM") DisplayManager="slim"
              ;;
            "XDM") DisplayManager="xdm"
              ;;
            *) DisplayManager=""
          esac
          break
        fi
      done
    ;;
  *) # Warn that DM already set, and offer option to change it
      print_heading
      PrintOne "Display manager is already set as: $DisplayManager."
      PrintOne "Only one display manager can be active"
      Echo
      PrintOne "Do you wish to change it?: "
      Echo
      Buttons "Yes/No" "[ Yes ] [ No ]" "Use arrow keys to move. [Enter] to select"
      Echo
      if [ $Response -eq 1 ]; then    # User wishes to change DM
        DisplayManager=""             # Clear DM variable
        Greeter=""                    # and greeter
        ChooseDM                      # Call this function again
      fi
  esac
}

SetGrubDevice() {
  DEVICE=""
  DevicesList="$(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd')"  # Preceed field 1 with '/dev/' # This is good use of awk
  print_heading
  GrubDevice=""
  local Counter=0
  PrintOne "Select the device where Grub is to be installed."
  PrintOne "Note that if you do not select a device, Grub"
  PrintOne "will not be installed, and you will have to make"
  PrintOne "alternative arrangements for booting your new system."
  Echo
  listgen1 "${DevicesList}" "" ""
  Reply=$Response
  for i in ${DevicesList}
  do
    Item=$i
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]; then
      GrubDevice=$Item
      break
    fi
  done
}

FinalCheck() {
  while :
  do
    print_heading
    PrintOne "These are the settings you have entered. Please check them ..."
    Echo
    if [ ${UEFI} -eq 1 ]; then
      PrintOne "0)  Boot partition ... $EFIPartition             "
      PrintMany "1)  Root partition ... $RootPartition : $RootType"
    else
      PrintOne "1)  Root partition ... $RootPartition : $RootType"
    fi
    if [ $SwapPartition ] || [ $SwapFile ]; then
      PrintMany "2)  Swap partition ... $SwapPartition $SwapFile"
    else
      PrintMany "2)  No provision has been made for swap"
    fi
    if [ ${#AddPartList[@]} -gt 0 ]; then
      Counter=0
      PrintMany "3)  Extra partitions ..."
      for i in ${AddPartList[@]}
      do
        PrintMany "     ${AddPartMount[$Counter]} : ${AddPartList[$Counter]} : ${AddPartType[$Counter]}"
        Counter=$((Counter+1))
      done
    else
      PrintMany "3)  No additional partitions have been allocated"
    fi
    case $Kernel in
      1) PrintMany "4)  The LTS kernel will be installed"
      ;;
      *) PrintMany "4)  The latest kernel will be installed"
    esac
    if [ $GrubDevice ]; then
    PrintMany "5)  Grub will be installed to $GrubDevice"
    else
      PrintMany "5)  No provision has been made for Grub"
    fi
    PrintMany "6)  Zone/subZone will be $ZONE/$SUBZONE"
    PrintMany "7)  Locale will be set to $CountryLocale"
    PrintMany "8)  Keyboard is $Countrykbd"
    case ${IsInVbox} in
      "VirtualBox") PrintMany "9)  Virtualbox guest utilities will be installed"
      ;;
      *) PrintMany "9)  Virtualbox guest utilities will not be installed"
    esac
    if [ -z $DisplayManager ]; then
      PrintMany "10)  No Display Manager selected"
    else
      PrintMany "10)  Display Manager = $DisplayManager"
    fi
    PrintMany "11)  Root and user settings ..."
    PrintMany "     Hostname = '$HostName'"
    PrintMany "     User = '$UserName'"
    PrintMany "12) The following extras have been selected ..."
    PrintOne "${LuxuriesList}"
    Echo
    PrintOne "Press [Enter] to install with these settings, or"
    Response=20
    TPread "enter an item number if you wish to change it: "
    Change=$Response
    case $Change in
      1) ChangeRootPartition
        AllocateRoot
        continue
      ;;
      2) ChangeSwapPartition
        AllocateSwap
        continue
      ;;
      3) ChangePartitions
        MorePartitions
        continue
      ;;
      4) SetKernel
        continue
      ;;
      5) SetGrubDevice
        continue
      ;;
      6) SetTimeZone
        continue
      ;;
      7) setlocale
        continue
      ;;
      8) getkeymap
        continue
      ;;
      9) ConfirmVbox
        continue
      ;;
      10) DisplayManager=""
        ChooseDM
        continue
      ;;
      11) ManualSettings
        continue
      ;;
      12) PickLuxuries
        continue
      ;;
      *) break
    esac
  done
}

ManualSettings() {
  while :
  do
    print_heading
    PrintOne "Enter number for data to change, or [Enter] to finish:"
    Echo
    PrintOne "1) Hostname (currently $HostName)"
    PrintMany "2) Username (currently $UserName)"
    Echo
    TPread "Enter the number of your selection : "
    Echo
    case $Response in
      1) TPread "Enter new Hostname (currently $HostName) : "
         HostName=$Response
        ;;
      2) TPread "Enter new username to be created (currently $UserName) : "
         UserName=$Response
        ;;
      *) return 0
    esac
  done
}

ChangeRootPartition() {
# Start array with SwapPartition
  Ignorelist[0]=${SwapPartition}
  local Counter=1
  AddExtras
  MakePartitionList
}

ChangeSwapPartition() {
# Start array with RootPartition
  Ignorelist[0]=${RootPartition}
  Counter=1
  AddExtras
  MakePartitionList
}

ChangePartitions() {
  # Copy RootPartition and SwapPartition into temporary array
  Ignorelist[0]=${RootPartition}
  local Counter=1
  if [ ${SwapPartition} ]; then
    Ignorelist[1]=${SwapPartition}
    Counter=2
  fi
  Ignores=${#Ignorelist[@]} # Save a count for later
  MakePartitionList
}

AddExtras() {
  # Ignorelist started and Counter set to next record number by calling
  # function ChangeSwapPartition or ChangeRootPartition
  # Add each field (extra partition) from AddPartList into the array:
  for a in ${AddPartList[@]}; do
    Ignorelist[$Counter]=$a
    Counter=$((Counter+1))
  done
  Ignores=${#Ignorelist[@]} # Save a count for later
}
