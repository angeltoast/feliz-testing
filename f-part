#!/bin/bash

# The Feliz2 installation scripts for Arch Linux
# Developed by Elizabeth Mills
# Revision date: 15th October 2016

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
#      WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#            General Public License for more details.

# A copy of the GNU General Public License is available from the Feliz2
#        page at http://sourceforge.net/projects/feliz2/files
#        or https://github.com/angeltoast/feliz2, or write to:
#                 The Free Software Foundation, Inc.
#                  51 Franklin Street, Fifth Floor
#                    Boston, MA 02110-1301 USA

# In this module - settings for partitioning:
# -----------------------      ------------------------
# Functions          Line       Functions           Line
# -----------------------      ------------------------
# CheckParts           38       AllocateRoot        460
# BuildPatitionLists  113       CheckPartition      519
# Partitioning        208       AllocateSwap        527
# MakePartitionList   239       NoPartitions        610
# AutoPartition       254       SetSwapFile         625
# AutoWarning         297       Parted              649
# RunAutoPart         333       MorePartitions      653
# BIOS_autopart       347       MakePartition       708
# select_filesystem   418       UpdateArray         767
# EditLabel           435       SetLabel            792
# -----------------------      ------------------------

CheckParts() {
# First test for existing partitions
  ShowPartitions=$(lsblk -l | grep 'part' | awk '{print $1}')
  local Counter=0
  for i in $ShowPartitions
  do
    Counter=$((Counter+1))
  done
  PARTITIONS=${Counter}

  if [ $PARTITIONS -eq 0 ]; then          # If no partitions exist, offer options
    print_heading
    while [ $PARTITIONS -eq 0 ]
    do
      echo
      PrintOne "If you are uncertain about partitioning, you should read the Arch Wiki."
      echo
      PrintOne "There are no partitions on the device, and at least"
      if [ ${UEFI} -eq 1 ]; then          # Installing in UEFI environment
        PrintOne "two partitions are needed - one for EFI /boot, and"
        PrintOne "one for /root. An option for guided manual partitioning"
        PrintOne "and creation of an EFI partition table has been added,"
        PrintOne "or you can exit now to use an external tool. Alternatively,"
      else                                # Installing in BIOS environment
        PrintOne "one partition is needed for the root directory."
        PrintOne "You can use 'cfdisk' to create a partition table, or "
      fi
      PrintOne "Feliz can automatically create partitions for you, if you"
      PrintOne "wish. If you choose to do nothing now, the script will"
      PrintOne "terminate to allow you to partition in some other way."
      echo
      if [ ${UEFI} -eq 1 ]; then  
        PartitioningEFI                   # Partitioning options for EFI 
      else 
        Partitioning                      # Partitioning options for BIOS
      fi
                                          # Terminate
      if [ $Response = "3" ]; then
        read_timed "Exiting to allow you to partition the device"
        shutdown -h now
      fi
                                          # Check that partitions have been created
      ShowPartitions=$(lsblk -l | grep 'part' | awk '{print $1}')
      Counter=0
      for i in $ShowPartitions
      do
        Counter=$((Counter+1))
      done
      PARTITIONS=${Counter}
    done
    BuildPartitionLists                   # Generate an array of partitions - this is a first call
  else                                    # Partitions exist
    print_heading
    PrintOne "Here is a list of available partitions on all connected devices ..."
    echo
    BuildPartitionLists                   # Generate an array of partitions - this is a first call
    Counter=0
    for part in ${PartitionList}
    do
      if [ $Counter = 0 ]; then
        PrintOne "${PartitionArray[$Counter]}"
      else
        PrintMany "${PartitionArray[$Counter]}"
      fi
      Counter=$((Counter+1))
    done
    echo
    if [ ${UEFI} -eq 1 ]; then          # Installing in UEFI environment
      PrintOne "There is a guided manual partitioning option, or Feliz"
      PrintOne "can automatically create a new GPT partition table for"
      PrintOne "you, if you wish. Please note that both these options"
      PrintOne "will wipe the disk - any exisiting data will be erased!"
      PrintOne "If you choose to 'Leave it as it is' the script will"
      PrintOne "next enable you to allocate the existing partitions."
      echo
      PartitioningEFI                   # UEFI partitioning options    
    else                                # Installing in BIOS environment
      PrintOne "'cfdisk' is available for you to edit them, or feliz can"
      PrintOne "overwrite them with a new partition table if you wish."
      PrintOne "If you choose to 'Leave it as it is' the script will next"
      PrintOne "enable you to allocate the existing partitions."
      echo
      Partitioning                      # BIOS partitioning options
    fi
    MakePartitionList                   # Regenerate the array of partitions
  fi
}

BuildPartitionLists() { # First called by CheckParts to generate details of existing partitions for display, then to prepare partition arrays for selection for root, swap and others
  
  # 1) Prepare two arrays from attached devices using blkid (installed with Feliz)
    # First an array of all partitions up to sd*99
    #                           |includes word | select 1st field | cut /dev/ | remove colon
    ListTypeIDs=$(blkid /dev/sd* | grep ' TYPE' | awk '{print $1}' | cut -c 6- | sed s/://g)
    # Then a matching array of types
    #                         |includes word |  select last field   | remove TYPE | remove quotes
    ListTypes=$(blkid /dev/sd* | grep ' TYPE' | awk '{print $(NF-1)}' | cut -c 6- | sed s/\"//g)
    # Add records from those two indexed arrays into the associative array
    local Counter=0
    for i in ${ListTypeIDs}
    do
      x=0
      for l in ${ListTypes}
      do
        if [ $x -eq $Counter ]; then
          FileSystem[$i]=$l # ... get the matching type
          break
        fi
        x=$((x+1))
      done
      Counter=$((Counter+1))
    done
  
  # 2) Find all up to sd*99 with LABEL | select 1st field | remove /dev/ | remove colon
  ListLabelledIDs=$(blkid /dev/sd* | grep LABEL | awk '{print $1}' | cut -c 6- | sed s/://g)
  # If at least one labelled partition found, get a matching list of labels (remove quotes)
  if [ -n "$ListLabelledIDs" ]; then
    ListLabelledLabels=$(blkid /dev/sd* | grep LABEL | awk '{print $2}' | cut -c 7- | sed s/\"//g)
  fi
  # Add records from those two indexed arrays into associative array
  Counter=0
  for i in ${ListLabelledIDs}
  do
    x=0
    for l in ${ListLabelledLabels}
    do
      if [ $x -eq $Counter ]; then
        Labelled[$i]=$l # ... get the matching label
        break
      fi
      x=$((x+1))
    done
    Counter=$((Counter+1))
  done
  local HowManyLabelled="${#Labelled[@]}"
  
  # 3) Find any partitions flagged as bootable
  ListAll=$(sfdisk -l | grep /dev | grep '*' | awk '{print $1}' | cut -c 6-)
  declare -a Flagged
  Counter=0
  for i in $ListAll
  do
    Flagged[${Counter}]="$i"
    Counter=$((Counter+1))
  done
  local HowManyFlagged="${#Flagged[@]}"
  # 4) Prepare list of short identifiers (sda1 sda2 ...)
  PartitionList=""
  ShowPartitions=$(lsblk -l | grep 'part' | awk '{print $1}')
  # 5) Run through short identifiers, checking the three arrays for a match
  Counter=0 # For count of partitions
  Label=""
  for part in ${ShowPartitions}
  do
  # First test Flagged
    local x=0
    until [ ${x} -eq ${HowManyFlagged} ]
    do
      if [ $part = "${Flagged[$x]}" ]; then
        Bootable="(Bootable)"
        break
      else
        Bootable=""
      fi
      x=$((x+1))
    done
    # Next test Labelled
    ThisPart=${Labelled[${part}]} # Find the record in Labelled that matches the current iteration
    if [ -n "${ThisPart}" ]; then
      Label="${ThisPart}"
    fi
    # Finally get the filesystem type
    ThisPart=${FileSystem[${part}]} # Find the record in FileSystem that matches the current iteration
    LongID=$(lsblk -l | grep ${part} | awk '{print $1 " " $4 " " $7}')
    PartitionArray[${Counter}]="$LongID $ThisPart ${Label} ${Bootable}"
    Label=""
    # Save the short ID for later functions
    PartitionList="${PartitionList} ${part}"
    (( Counter+=1 ))
  done
  PARTITIONS=${Counter}
}

Partitioning() {
  local Proceed=""
  AutoPart=0 # Set flag to 'off' by default
  while [ -z $Proceed ]
  do
    PrintOne "1) Open cfdisk so I can partition manually"
    PrintMany "2) Allow feliz to partition the whole device"
    PrintMany "3) Leave it as it is"
    echo
    TPread "Enter the number of your selection : "
    Proceed=$Response
    echo
    case $Proceed in
      1) cfdisk 2>> feliz.log
        tput setf 0 # Change foreground colour to black temporarily to hide error message
        clear
        partprobe 2>> feliz.log #Inform kernel of changes to partitions
        tput sgr0 # Reset colour
        ShowPartitions=$(lsblk -l | grep 'part' | awk '{print $1}')
      ;;
      2) AutoPartition
      ;;
      3) echo
      ;;
      *) invalid_option
        Proceed=""
        print_heading
    esac
  done
}

MakePartitionList() {
  # Call BuildPartitionLists function to generate an array of partitions
  # This is not a first call, so first empty the existing array
  local x=0
  local HowMany="${#PartitionArray[@]}"
  until [ ${x} -eq ${HowMany} ]
  do
    unset PartitionArray[$x]
    x=$((x+1))
  done
  BuildPartitionLists # Then rebuild
}

AutoPartition() {
  # Called from option 2) within Partitioning()
  AutoPart=0
  until [ ${AutoPart} -gt 0 ]
  do
    DiskDetails=$(lsblk -l | grep 'disk' | awk '{print $1}')
    UseDisk=$DiskDetails # If more than one, UseDisk will be first
    # Count lines. If more than one disk, ask user which to use
    local Counter=0
    CountDisks=0
    for i in $DiskDetails
    do
      Counter=$((Counter+1))
      Drives[$Counter]=$i
    done
    if [ $Counter -gt 1 ]
    then
      UseDisk="" # Reset for user choice
      while [ -z $UseDisk ]
      do
        print_heading
        PrintOne "There are $Counter devices available"
        PrintOne "Which do you wish to use for installation?"
        PrintOne "(Remember, this is auto-partition, and any data"
        PrintOne "on the chosen device will be lost)"
        echo
        Counter=0
        for i in $DiskDetails
        do
          Counter=$((Counter+1))
          PrintOne "$Counter) $i"
        done
        echo
        TPread "Enter the number of your selection: "
        UseDisk="${Drives[$Response]}"
        AutoWarning
      done
    else
      AutoWarning
    fi
  done
}

AutoWarning() {
  while :
  do
    print_heading
    echo
    PrintOne "This will erase any data on ${UseDisk}"
    PrintOne "Are you sure you wish to continue?: "
    echo
    listgen1 "Yes No" "" "nodone"
    case $Response in
      "1" | "Y" | "y") RunAutoPart
        print_heading
        PrintOne "Partitioning of ${GrubDevice} successful"
        PrintOne "-------------------------------------"
        PrintMany "$ShowPart1"
        PrintMany "$ShowPart2"
        PrintMany "$ShowPart3"
        PrintMany "$ShowPart4"
        echo
        PrintOne "You will have the opportunity to review these later."
        echo
        PrintOne "Press any key to continue"
        read -n1
        break
        ;;
      "2" | "N" | "n") UseDisk=""
        break 2
        ;;
      *) invalid_option
    esac
  done
}

RunAutoPart() {
  GrubDevice="/dev/${UseDisk}"
  Home="N"
  # Get disk size
  DiskSize=$(lsblk -l | grep "${UseDisk}\ " | awk '{print $4}' | sed s/G//g)
  
  if [ ${UEFI} -eq 1 ]; then
    UEFI_autopart
  else
    BIOS_autopart
  fi
}

BIOS_autopart() { # Partitioning for a BIOS environment
  
  sgdisk --zap-all /dev/${UseDisk} &>> feliz.log    # Remove all existing filesystems
  wipefs -a /dev/${UseDisk} &>> feliz.log           # from the drive
    
  Parted "mklabel msdos"                            # Create filesystem
                                                    # Note: $Grubdevice (eg: /dev/sda) set by RunAutoPart
  if [ $DiskSize -ge 40 ]; then                     # ------------- separate /home partition -------------
    Parted "mkpart primary linux-swap 1MiB 4GiB"    # /swap 4GiB
    SwapPartition="${GrubDevice}1"                  # /dev/sda1
    MakeSwap="Y"
    Parted "mkpart primary ext4 4GiB 19GiB"         # /root 15GiB
    Parted "set 2 boot on"                          # Bootable
    RootPartition="${GrubDevice}2"                  # /dev/sda2
    RootType="ext4"
    Parted "mkpart primary ext4 19GiB 100%"         # /home remainder (from 21GiB)
    AddPartList[0]="${GrubDevice}3"                 # /dev/sda3     |  
    AddPartMount[0]="/home"                         # Mountpoint    | array of additional partitions
    AddPartType[0]="ext4"                           # Filesystem    |
    Home="Y"
  elif [ $DiskSize -ge 30 ]; then                   # ------------- separate /home partition -------------
    Parted "mkpart primary linux-swap 1MiB 4GiB"    # /swap 4GiB
    SwapPartition="${GrubDevice}1"                  # /dev/sda1
    MakeSwap="Y"
    Parted "mkpart primary ext4 4GiB 16GiB"         # /root 12GiB
    Parted "set 2 boot on"                          # Bootable
    RootPartition="${GrubDevice}2"                  # /dev/sda2
    RootType="ext4"
    Parted "mkpart primary ext4 16GiB 100%"         # /home remainder (up to 23GiB )
    AddPartList[0]="${GrubDevice}3"                 # /dev/sda3     |  
    AddPartMount[0]="/home"                         # Mountpoint    | array of additional partitions
    AddPartType[0]="ext4"                           # Filesystem    |
    Home="Y"
  elif [ $DiskSize -ge 18 ]; then                   # --------- /swap and /root partitions only ---------
    Parted "mkpart primary linux-swap 1MiB 4GiB"    # /swap 4GiB
    SwapPartition="${GrubDevice}1"                  # /dev/sda1
    MakeSwap="Y"
    Parted "mkpart primary ext4 4GiB 100%"          # /root remainder (up to 25GiB)
    Parted "set 2 boot on"                          # Bootable
    RootPartition="${GrubDevice}2"                  # /dev/sda2
    RootType="ext4"
  elif [ $DiskSize -gt 10 ]; then                   # --------- /swap and /root partitions only ---------
    Parted "mkpart primary linux-swap 1MiB 2GiB"    # /swap 2GiB
    SwapPartition="${GrubDevice}1"                  # sda1
    Parted "mkpart primary ext4 2GiB 100%"          # /root remainder (up to 15GiB)
    Parted "set 2 boot on"                          # Bootable
    RootPartition="${GrubDevice}2"                  # /dev/sda2
    RootType="ext4"
  else                                              # ---------------- No swap partition ----------------
    # Swap file and one main partition up to 10GiB
    Parted "mkpart primary ext4 1MiB 100%"          # /root (whole disk)
    Parted "set 1 boot on"                          # Bootable
    RootPartition="${GrubDevice}1"                  # /dev/sda1
    RootType="ext4"
    SwapFile="2G"                                   # Swap file
    SwapPartition=""                                # Clear swap partition variable
  fi                                                # ---------------------------------------------------
  ShowPart1="Swap:  `lsblk -l | grep "${UseDisk}1" | awk '{print $4, $1}'`" >/dev/null
  ShowPart2="Root:  `lsblk -l | grep "${UseDisk}2" | awk '{print $4, $1}'`" >/dev/null
  ShowPart3="Other: `lsblk -l | grep "${UseDisk}3" | awk '{print $4, $1}'`" >/dev/null
  AutoPart=1                                        # Set auto-partition flag to 'on'
}

select_filesystem() { # User chooses filesystem from list in global variable ${TypeList}
  local Counter=0
  PrintOne "Please now select the file system for ${Partition}"
  PrintOne "It is not recommended to mix the btrfs file-system with others."
  echo
  listgen1 "${TypeList}" "Filesystems"
  for i in ${TypeList}
  do
    Counter=$((Counter+1))
    if [ $Counter -eq $Response ]
    then
      PartitionType=$i
      break
    fi
  done
}

EditLabel() {
  Label="${Labelled[$1]}"
  if [ -n ${Label} ]; then
    # Inform the user and accept input
    print_heading
    echo
    PrintOne "The partition you have chosen is labelled '${Label}'"
    echo
    PrintOne "If you wish to keep that label, enter 1            "
    PrintMany "If you wish to delete the label, enter 2"
    PrintMany "If you wish to enter a new label, type it at the prompt"
    echo
    TPread "Enter 1, 2 or a new label: "
    # Save to the -A array
    case $Response in
      1) LabellingArray[$PartitionID]=$Label
      ;;
      2) LabellingArray[$PartitionID]=""
      ;;
      *) LabellingArray[$PartitionID]=$Response
    esac
  fi
}

AllocateRoot() {
  # Display partitions for user-selection
  # Uses list of all available partitions in PartitionList
  
  if [ ${UEFI} -eq 1 ]; then      # Installing in UEFI environment
    AllocateEFI                   # First allocate the EFI /boot partition
  fi
  
  print_heading
  Remaining=""
  local Counter=0
  Partition=""
  PartitionType=""
  PrintOne "Please now select a partition to use for root"
  echo
  listgen2 "$PartitionList" "Partitions" "" "PartitionArray"
  Reply=$Response
  if [ $Result != "Done" ]; then
    PassPart=$Result
    SetLabel "$Result"
    UpdateArray # Remove the selected partition from $PartitionArray[]
  fi
  Counter=0
  for i in ${PartitionList}
  do
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]; then
      Partition="/dev/$i"
      RootPartition="${Partition}"
      # Before going to select_filesystem, check the partition
      CheckPartition
      if [ ${CurrentType} ]; then
        PrintOne "You can choose to leave it as it is, but should"
        PrintOne "understand that not reformatting the root"
        PrintOne "partition can have unexpected consequences."
        echo
      fi
      # Now select a filesystem
      select_filesystem
      if [ -z ${PartitionType} ]
      then
        RootType="ext4"
      else
        RootType="${PartitionType}"
      Label="${Labelled[${PassPart}]}"
      if [ -n "${Label}" ]; then
        EditLabel $PassPart
      fi
      fi
    else
      Remaining="$Remaining $i" # Add next available partition
    fi
  done
  PartitionList=$Remaining      # Replace original PartitionList with remaining options
}

CheckPartition() {
  # Finds if there is an existing file system on the selected partition
  print_heading
  CurrentType=$(file -sL ${Partition} | grep "ext" | cut -c26-30)
  if [ ${CurrentType} ]; then
    PrintOne "The selected partition ${Partition} is currently formatted to ${CurrentType}"
    PrintOne "Reformatting it will remove all data currently on it."
  fi
}

AllocateSwap() {
  print_heading
  PrintOne "Select a partition for swap from the ones that"
  PrintOne "remain, or you can allocate a swap file."
  PrintOne "Warning: Btrfs does not support swap files."
  echo
  Remaining=""
  local Counter=0
  SwapPartition=""
  PickFrom="$PartitionList Swapfile"
  SwapFile=""
  declare -a CopyArray # For passing to listgen2
  local Counter=0
  for p in "${PartitionArray[@]}"
  do
    CopyArray[${Counter}]=${PartitionArray[$Counter]}
    Counter=$((Counter+1))
  done
  CopyArray[${Counter}]="Swapfile"
  PrintOne "If you skip this step, no swap will be allocated."
  echo
  listgen2 "$PickFrom" "Partitions" "" "CopyArray"
  Reply=$Response # Number of selected item
  if [ $Result != "Swapfile" ] && [ $Result != "Done" ]; then # Short ID of selected item
    PassPart=$Result
  fi
  echo
  Counter=0
  for i in ${PickFrom}
  do
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]
    then
      case $i in
        "Done") SwapPartition=""
              break
        ;;
        "Swapfile") SetSwapFile
            SwapPartition=""
            break
        ;;
        *) SwapPartition="/dev/$i"
         # IsSwap=`lsblk -l | grep $i | grep SWAP | awk '{print $7}'`
          IsSwap=$(blkid /dev/sd* | grep 'swap' | awk '{print $1}')
          if [ -n "$IsSwap" ]; then
            print_heading
            PrintOne "$i is already formatted as a swap partition."
            PrintOne "Reformatting it will change the UUID, and if this swap"
            PrintOne "partition is used by another operating system, that"
            PrintOne "system will no longer be unable to access the partition."
            PrintOne "Do you wish to reformat it?"
            echo
            listgen1 "Yes No" "" "nodone"
            case $Response in
              "1" | "Y" | "y") MakeSwap="Y"
              ;;
              "2" | "N" | "n") MakeSwap="N"
              ;;
              *) MakeSwap="Y"
            esac
          fi
          Label="${Labelled[${PassPart}]}"
          if [ -n "${Label}" ]; then
            EditLabel "$PassPart"
            SetLabel "$PassPart"
          fi
          UpdateArray # Remove the selected partition from $PartitionArray[]
      esac
    else
      if [ $i != "Done" ] && [ $i != Swapfile ]; then
        Remaining="$Remaining $i" # Add next available partition
      fi
    fi
  done
  print_heading
  if [ $SwapPartition ]; then
    read_timed "$SwapPartition will be used for swap" 1
  elif [ $SwapFile ]; then
    read_timed "A swap file of ${SwapFile} will be allocated." 1
  else
    read_timed "No swap option has been allocated." 1
  fi
  echo
  PartitionList=$Remaining  # Replace original PartitionList with remaining options
}

NoPartitions() { # There are no unallocated partitions
  PrintOne "There are no partitions available for swap,"
  PrintOne "but you can allocate a swap file, if you wish."
  Message="Create a swap file?: "
  echo
  listgen1 "Yes No" "" "nodone"
  case $Response in
    "1" | "Y" | "y") SetSwapFile
      SwapPartition=""
     ;;
    *) SwapPartition=""
      SwapFile=""
  esac
}

SetSwapFile() {
  LoopRepeat="Y"
  while [ ${LoopRepeat} = "Y" ]
  do
    PrintOne "Allocate the size of your swap file (M = Megabytes, G = Gigabytes)"
    TPread "Size of swap file [eg: 512M or 2G]: "
    RESPONSE="${Response^^}"
    # Check that entry includes 'M or G'
    CheckInput=$(grep "G\|M" <<< "${RESPONSE}" )
    echo
    if [ -z ${CheckInput} ]; then
      PrintOne "You must include M or G"
      SwapFile=""
    else
      SwapFile=$RESPONSE
      break
    fi
  done
}

MorePartitions() {
  local Elements=0
  AddedToRemaining=0
  for i in ${PartitionList}
  do
    Elements=$((Elements+1))
  done
  while [ $Elements -gt 0 ]
  do
    print_heading
    Remaining=""
    PrintOne "The following partitions remain unallocated."
    PrintOne "If you wish to use one, select it from the list,"
    PrintOne "or choose 'Done' to finish partitioning."
    echo
    listgen2 "$PartitionList" "Partitions" "" "PartitionArray"
    if [ $Result != "Done" ]; then
      PassPart=$Result
      SetLabel "$Result"
      UpdateArray # Remove the selected partition from $PartitionArray[]
    fi
    echo
    for Part in ${PartitionList} # Iterate through the list
    do
      Partition=""
      PartitionType=""
      if [ $Part = $Result ] && [ $Result != "Done" ]; then
        Partition="/dev/$Part"
        MakePartition # Call complete details
        Label="${Labelled[${PassPart}]}"
        if [ -n "${Label}" ]; then
          EditLabel $PassPart
        fi
      elif [ $Part != "Done" ]; then   # Part is not selected and not 'Done'
        Remaining="$Remaining $Part" # Add unused partition to temp list
        AddedToRemaining=$(($AddedToRemaining+1))
      fi
    done
    PartitionList=$Remaining  # Replace original PartitionList with temp list
    if [ $Result = "Done" ]; then
      Elements=0
      break
    else
      Elements=$AddedToRemaining
    fi
  done
  # Ensure that if AddPartList (the defining array) is empty, all others are too
  if [ -z ${#AddPartList[@]} ]
  then
    AddPartList=""
    AddPartMount=""
    AddPartType=""
  fi
}

MakePartition() { # Called by MorePartitions
  # Add the selected partition to the array for extra partitions
  # 1) Save to AddPartList (eg: /dev/sda5)
  ExtraPartitions=${#AddPartList[@]}
  AddPartList[$ExtraPartitions]="${Partition}"
  CheckPartition   # Before going to select_filesystem, check the partition
  if [ ${CurrentType} ]; then
    PrintOne "You can choose to leave it as it is, by selecting 'Done', but not"
    PrintOne "reformatting an existing partition can have unexpected consequences."
    echo
  fi
  # 2) Select filesystem
  select_filesystem
  AddPartType[$ExtraPartitions]="${PartitionType}"  # Add it to AddPartType list
  # 3) Get a mountpoint
  LoopRepeat="Y"
  while [ ${LoopRepeat} = "Y" ]
  do
    echo
    PrintOne "Enter a mountpoint for ${Partition} ..."
    TPread "(eg: /home) ... /"
    # Check that entry includes '/'
    CheckInput=${Response:0:1}        # First character of ${Response}
    case ${CheckInput} in
      "") PrintOne "You must enter a valid mountpoint"
          PartMount=""
          ;;
      *) if [ ${CheckInput} != "/" ]; then
            PartMount="/${Response}"
        else
            PartMount="${Response}"
        fi
    esac
    # Check that the mountpoint has not already been used
    MountPointCounter=0
    if [ -z ${AddPartMount} ]; then
      LoopRepeat="N"
    else
      # Go through AddPartMount checking each item against PartMount
      for MountPoint in ${AddPartMount}
      do
        MountPointCounter=$((MountPointCounter+1))
        if [ $MountPoint = $PartMount ]; then
          read_timed "Mountpoint ${PartMount} has already been used. Please use a different mountpoint."
        else
          LoopRepeat="N"
          break
        fi
      done
    fi
    if [ ${LoopRepeat} = "N" ]
    then
      break
    fi
  done
  AddPartMount[$ExtraPartitions]="${PartMount}"
}

UpdateArray() { # Remove the selected partition from $PartitionArray[]
  # Called by AllocateRoot, AllocateSwap and MorePartitions
  local Counter=0
  declare -a NewArray  # Empty NewArray
  # Build NewArray excluding the partition selected in the calling function
  for p in "${PartitionArray[@]}"
  do
    First=${p:0:4}          # Characters 1 to 5 of ${p}
    if [ $First ]; then
      if [ ${PassPart} != ${First} ]; then
        NewArray[${Counter}]="$p"
        (( Counter+=1 ))
      fi
    fi
  done
  # Then copy NewArray into PartitionArray
  Counter=0
  for p in "${NewArray[@]}"
  do
    PartitionArray[${Counter}]=${NewArray[$Counter]}
    Counter=$((Counter+1))
  done
  unset PartitionArray[$Counter] # Delete the last element
}

SetLabel() { # Called from the root, swap and extra partitions routines
# ... each passing a single argument containing the partition ID
# Build an associative array of partitions (LabellingArray[]) as
# declared in felizrunning with other arrays
PartitionID=$1
local HowMany="${#PartitionArray[@]}"
local x=0
until [ ${x} -eq ${HowMany} ]
do
  CompareID=$(echo ${PartitionArray[${x}]} | awk '{print $1}')
  if [ -z ${CompareID} ]; then
    x=$((x+1))
    continue
  fi
  if [ ${CompareID} = ${PartitionID} ]; then # If the partition is in the array, it has a label
  #  Label=`echo ${PartitionArray[${x}]} | awk '{print $4}'` # Save the label
    Label=${PartitionArray[${x}]}
  fi
  x=$((x+1))
done
}
