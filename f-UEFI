#!/bin/bash

# UEFIcode - Functions and variables for installing on UEFI systems
# -------------------------------------------------------------

# The Feliz2 installation scripts for Arch Linux
# Developed by Elizabeth Mills
# Revision date: 13th October 2016

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
#      WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#            General Public License for more details.

# A copy of the GNU General Public License is available from the Feliz2
#        page at http://sourceforge.net/projects/feliz2/files
#        or https://github.com/angeltoast/feliz2, or write to:
#                 The Free Software Foundation, Inc.
#                  51 Franklin Street, Fifth Floor
#                    Boston, MA 02110-1301 USA

# Variables for UEFI Architecture
UEFI=0            # 1 = UEFI; 0 = BIOS
EFIPartition=""   # "/dev/sda1" 
UEFI_MOUNT=""    	# UEFI mountpoint
DualBoot="N"      # For formatting EFI partition

# All UEFI-specific functions are in this module
# ---- ------------ ---------------------------------------------------------
# Line   Function      Purpose                                          
# ---- ------------ ---------------------------------------------------------
#  41  TestUEFI      Test environment; set UEFI variable
#  55  AllocateEFI   Offers list of partitions for user to select EFI /boot
#  94  UEFI_autopart Automatically prepare partitions for available space     
# ---- ------------ ---------------------------------------------------------

# 1) Assess environment
TestUEFI() { # Called at launch of Feliz script, before all other actions
 dmesg | grep -q "efi: EFI"           # Test for EFI (-q tells grep to be quiet)
 if [ $? -eq 0 ]; then                # check exit code; 0 = EFI, else BIOS
    # Mount efivarfs if it is not already mounted
    if [[ -z $(mount | grep /sys/firmware/efi/efivars) ]]; then
      mount -t efivarfs efivarfs /sys/firmware/efi/efivars
    fi
    UEFI=1
  else
    UEFI=0
 fi
}

PartitioningEFI() {
  local Proceed=""
  AutoPart=0 # Set flag to 'off' by default
  while [ -z $Proceed ]
  do
    PrintOne "1) Manual partitioning (option not yet available)" # "Help me to partition manually"
    PrintMany "2) Allow feliz to partition the whole device"
    PrintMany "3) Leave it as it is"
    echo
    TPread "Enter the number of your selection : "
    Proceed=$Response
    echo
    case $Proceed in
      1) clear
        print_heading
        echo
        Proceed=""
        continue  # Option not yet available
        
        tput setf 0 # Change foreground colour to black temporarily to hide error message
        clear
        partprobe 2>> feliz.log #Inform kernel of changes to partitions
        tput sgr0 # Reset colour
        ShowPartitions=$(lsblk -l | grep 'part' | awk '{print $1}')
      ;;
      2) AutoPartition
      ;;
      3) echo
      ;;
      *) invalid_option
        Proceed=""
        print_heading
    esac
  done
}

# 2) Allocation - user allocates existing partitions
AllocateEFI() { # Called at start of AllocateRoot, before allocating root partition
  # Uses list of available partitions in PartitionList created in ManagePartitions
  print_heading
	Remaining=""
	local Counter=0
  Partition=""
	PartitionType=""
  echo
	PrintOne "Here are the partitions that are available."
	PrintOne "First you should select one to use for EFI /boot"
	PrintOne "This must be of type vfat, and may be about 512MiB"  
  echo
  listgen2 "$PartitionList" "Partitions" "" "PartitionArray"
  Reply=$Response
  if [ $Result != "Done" ]; then
    PassPart=$Result
    SetLabel "$Result"
    UpdateArray # Remove the selected partition from $PartitionArray[]
  fi
  Counter=0
  for i in ${PartitionList}
  do
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]; then
			Partition="/dev/$i"
			EFIPartition="${Partition}"
		else
			Remaining="$Remaining $i"	# Add next available partition
		fi
	done
  PartitionList=$Remaining			# Replace original PartitionList with remaining options
}

# 3) Auto-create partitions for UEFI system and set variables for mounting
UEFI_autopart() { # Partitioning for a UEFI environment
  
  sgdisk --zap-all /dev/${UseDisk} &>> feliz.log      # Remove all existing filesystems
  wipefs -a /dev/${UseDisk} &>> feliz.log             # from the drive
  
  Parted "mklabel gpt"
  if [ $DiskSize -ge 40 ]; then
    # Device is large enough for separate /home, /root (20 GiB) and /swap (8 GiB)
    Parted "mkpart ESP fat32 1MiB 513MiB"             # EFI boot partition
    Parted "set 1 boot on"
    EFIPartition="${GrubDevice}1"                     # "/dev/sda1" 
    Parted "mkpart primary linux-swap 513MiB 8GiB"    # /swap "/dev/sda2"
    SwapPartition="${GrubDevice}2"
    MakeSwap="Y"
    Parted "mkpart primary ext4 8GiB 23GiB"           # /root "/dev/sda3"
    RootPartition="${GrubDevice}3"
    RootType="ext4"
    Parted "mkpart primary ext4 23GiB 100%"           # /home "/dev/sda4"
    AddPartList[0]="${GrubDevice}4" # Add to the array of additional partitions
    AddPartMount[0]="/home"
    AddPartType[0]="ext4"
    Home="Y"
  elif [ $DiskSize -ge 30 ]; then
    # Device is just large enough for separate /home partition & swap partition
    Parted "mkpart ESP fat32 1MiB 513MiB"             # EFI boot partition
    Parted "set 1 boot on"
    EFIPartition="${GrubDevice}1"                     # "/dev/sda1" 
    Parted "mkpart primary linux-swap 513MiB 4GiB"    # /swap "/dev/sda2"
    SwapPartition="${GrubDevice}2"
    MakeSwap="Y"
    Parted "mkpart primary ext4 4GiB 16GiB"           # /root "/dev/sda3"
    RootPartition="${GrubDevice}3"
    RootType="ext4"
    Parted "mkpart primary ext4 16GiB 100%"           # /home "/dev/sda4"
    AddPartList[0]="${GrubDevice}4" # Add to the array of additional partitions
    AddPartMount[0]="/home"
    AddPartType[0]="ext4"
    Home="Y"
  elif [ $DiskSize -ge 18 ]; then
    # Swap 4Gib and one main partition up to 20GiB
    Parted "mkpart ESP fat32 1MiB 513MiB"             # EFI boot partition
    Parted "set 1 boot on"
    EFIPartition="${GrubDevice}1"                     # "/dev/sda1" 
    Parted "mkpart primary linux-swap 513MiB 4GiB"    # /swap "/dev/sda2"
    SwapPartition="${GrubDevice}2"
    MakeSwap="Y"
    Parted "mkpart primary ext4 4GiB 100%"            # /root "/dev/sda3"
    RootPartition="${GrubDevice}3"
    RootType="ext4"
  elif [ $DiskSize -gt 10 ]; then
    # Swap 2Gib and one main partition up to 16GiB
    Parted "mkpart ESP fat32 1MiB 513MiB"             # EFI boot partition
    Parted "set 1 boot on"
    EFIPartition="${GrubDevice}1"                     # "/dev/sda1" 
    Parted "mkpart primary linux-swap 513MiB 2GiB"    # /swap "/dev/sda2"
    SwapPartition="${GrubDevice}2"
    Parted "mkpart primary ext4 2GiB 100%"            # /root "/dev/sda3"
    RootPartition="${GrubDevice}3"
    RootType="ext4"
    SwapFile="2G"
    SwapPartition=""
  else # If disk < 10 Gb
    # Swap file and one main partition up to 10GiB
    Parted "mkpart ESP fat32 1MiB 513MiB"             # EFI boot partition
    Parted "set 1 boot on"
    EFIPartition="${GrubDevice}1"                     # "/dev/sda1" 
    Parted "mkpart primary ext4 513MiB 100%"          # /root "/dev/sda3"
    RootPartition="${GrubDevice}2"
    RootType="ext4"
    SwapFile="2G"
    SwapPartition=""
  fi
  ShowPart1="Boot:  `lsblk -l | grep "${UseDisk}1" | awk '{print $4, $1}'`" >/dev/null
  ShowPart2="Swap:  `lsblk -l | grep "${UseDisk}2" | awk '{print $4, $1}'`" >/dev/null
  ShowPart3="Root:  `lsblk -l | grep "${UseDisk}3" | awk '{print $4, $1}'`" >/dev/null
  ShowPart4="Other: `lsblk -l | grep "${UseDisk}4" | awk '{print $4, $1}'`" >/dev/null
  AutoPart=1 # Set flag to 'on' for mounting

}
