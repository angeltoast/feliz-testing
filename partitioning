#!/bin/bash

# The Feliz2 installation scripts for Arch Linux
# Developed by Elizabeth Mills
# Revision date: 7th September 2016

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# A copy of the GNU General Public License is available from the Feliz2
# page at http://sourceforge.net/projects/feliz2/files
# or https://github.com/angeltoast/feliz2, or write to:
# The Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# In this module:
# -----------------------      ------------------------
# Functions         Line       Functions           Line
# -----------------------      ------------------------
# CheckParts          24       AllocateRoot       304
# Partitioning        94       CheckPartition      299
# AutoPartition      128       AllocateSwap        309
# AutoWarning        171       SetSwapFile         504
# select_filesystem  204       MorePartitions      588
# EditLabel          276       MakePartition       612
# -----------------------      ------------------------

CheckParts() {
# First test for existing partitions
  ShowPartitions=`lsblk -l | grep 'part' | awk '{print $1}'`
  local Counter=0
  for i in $ShowPartitions
  do
    Counter=$((Counter+1))
  done
  PARTITIONS=${Counter}
  # If no partitions exist, offer cfdisk to create (or exit)
  if [ $PARTITIONS -eq 0 ]
  then
    print_heading
    while [ $PARTITIONS -eq 0 ]
    do
      echo
      PrintOne "There are no partitions on the device, and at least one"
      PrintOne "partition is needed for the root directory."
      PrintOne "If you are uncertain about partitioning, you should read the Arch Wiki."
      echo
      PrintOne "You can use 'cfdisk' to create a partition table, or "
      PrintOne "feliz can create partitions for you, if you wish."
      PrintOne "If you choose to do nothing now, the script will"
      PrintOne "terminate to allow you to partition in some other way."
      echo
      Partitioning # Partitioning options
      if [ $Response = "3" ]; then
        read_timed "Exiting"
        exit
      fi
      # Check that partitions have been created
      ShowPartitions=`lsblk -l | grep 'part' | awk '{print $1}'`
      Counter=0
      for i in $ShowPartitions
      do
        Counter=$((Counter+1))
      done
      PARTITIONS=${Counter}
    done
    # Call function to generate an array of partitions
    BuildPartitionLists # This is a first call
  else
    # Alternatively, offer cfdisk to edit existing partitions
    print_heading
    PrintOne "Here is a list of available partitions on all connected devices ..."
    echo
    # Call function to generate an array of partitions
    BuildPartitionLists # This is a first call
    Counter=0
    for part in ${PartitionList}
    do
      if [ $Counter = 0 ]; then
        PrintOne "${PartitionArray[$Counter]}"
      else
        PrintMany "${PartitionArray[$Counter]}"
      fi
      Counter=$((Counter+1))
    done
    echo
    PrintOne "'cfdisk' is available for you to edit them, or feliz can"
    PrintOne "overwrite them with a new partition table if you wish."
    PrintOne "If you choose to do nothing now, the script will next"
    PrintOne "enable you to allocate the existing partitions."
    echo
    Partitioning # Partitioning options
    # Call function to regenerate the array of partitions
    MakePartitionList
  fi
}

Partitioning() {
  local Proceed=""
  AutoPart=0 # Set flag to 'off' by default
  while [ -z $Proceed ]
  do
    PrintOne "1) Open cfdisk so I can partition manually"
    PrintMany "2) Allow feliz to partition the whole device"
    PrintMany "3) Leave it as it is"
    echo
    TPread "Enter the number of your selection : "
    Proceed=$Response
    echo
    case $Proceed in
      1) cfdisk 2>> feliz.log
        tput setf 0 # Change foreground colour to black temporarily to hide error message
        partprobe 2>> feliz.log #Inform kernel of changes to partitions
        tput sgr0 # Reset colour
        ShowPartitions=`lsblk -l | grep 'part' | awk '{print $1}'`
      ;;
      2) AutoPartition
      ;;
      3) echo
      ;;
      *) invalid_option
        Proceed=""
        print_heading
    esac
  done
}

AutoPartition() {
  # Called from option 2) within Partitioning()
  AutoPart=0
  until [ ${AutoPart} -gt 0 ]
  do
    DiskDetails=`lsblk -l | grep 'disk' | awk '{print $1}'`
    UseDisk=$DiskDetails # If more than one, UseDisk will be first
    # Count lines. If more than one disk, ask user which to use
    local Counter=0
    CountDisks=0
    for i in $DiskDetails
    do
      Counter=$((Counter+1))
      Drives[$Counter]=$i
    done
    if [ $Counter -gt 1 ]
    then
      UseDisk="" # Reset for user choice
      while [ -z $UseDisk ]
      do
        print_heading
        PrintOne "There are $Counter devices available"
        PrintOne "Which do you wish to use for installation?"
        PrintOne "(Remember, this is auto-partition, and any data"
        PrintOne "on the chosen device will be lost)"
        echo
        Counter=0
        for i in $DiskDetails
        do
          Counter=$((Counter+1))
          PrintOne "$Counter) $i"
        done
        echo
        TPread "Enter the number of your selection: "
        UseDisk="${Drives[$Response]}"
        AutoWarning
      done
    else
      AutoWarning
    fi
  done
}

AutoWarning() {
  while :
  do
    print_heading
    PrintOne "This will erase any data on ${UseDisk}"
    PrintOne "Are you sure you wish to continue?: "
    echo
    listgen1 "Yes No" "" "nodone"
    case $Response in
      "1" | "Y" | "y") RunAutoPart
        print_heading
        PrintOne "Partitioning of ${GrubDevice} successful"
        PrintOne "-------------------------------------"
        PrintMany "Swap: ${SwapPartition}${SwapFile} $ShowPart1"
        PrintMany "Root: ${RootPartition} ${RootType} $ShowPart2"
        if [ ${Home} = "Y" ]; then
          ShowPart3=`lsblk -l | grep "${UseDisk}3" | awk '{print $4}'` >/dev/null
          PrintMany "Home: ${AddPartList[0]} ${AddPartType[0]} $ShowPart3"
        fi
        echo
        PrintOne "You will have the opportunity to review these later."
        echo
        PrintOne "Press any key to continue"
        read -n1
        break
        ;;
      "2" | "N" | "n") UseDisk=""
        break 2
        ;;
      *) invalid_option
    esac
  done
}

select_filesystem() { # $1 = list passed as string by caller
  local Counter=0
  PrintOne "Please now select the file system for ${Partition}"
  PrintOne "It is not recommended to mix the btrfs file-system with others."
  echo
  listgen1 "${TypeList}" "Filesystems"
  for i in ${TypeList}
  do
    Counter=$((Counter+1))
    if [ $Counter -eq $Response ]
    then
      PartitionType=$i
      break
    fi
  done
}

EditLabel() {
  Label="${Labelled[$1]}"
  if [ -n ${Label} ]; then
    # Inform the user and accept input
    print_heading
    echo
    PrintOne "The partition you have chosen is labelled '${Label}'"
    echo
    PrintOne "If you wish to keep that label, enter 1            "
    PrintMany "If you wish to delete the label, enter 2"
    PrintMany "If you wish to enter a new label, type it at the prompt"
    echo
    TPread "Enter 1, 2 or a new label: "
    # Save to the -A array
    case $Response in
      1) LabellingArray[$PartitionID]=$Label
      ;;
      2) LabellingArray[$PartitionID]=""
      ;;
      *) LabellingArray[$PartitionID]=$Response
    esac
  fi
}

AllocateRoot() {
  # Display partitions for user-selection
  # Uses list of all available partitions in PartitionList
  print_heading
  Remaining=""
  local Counter=0
  Partition=""
  PartitionType=""
  PrintOne "Please now select a partition to use for root"
  echo
  listgen2 "$PartitionList" "Partitions" "" "PartitionArray"
  Reply=$Response
  if [ $Result != "Done" ]; then
    PassPart=$Result
    SetLabel "$Result"
    UpdateArray # Remove the selected partition from $PartitionArray[]
  fi
  Counter=0
  for i in ${PartitionList}
  do
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]; then
      Partition="/dev/$i"
      RootPartition="${Partition}"
      # Before going to select_filesystem, check the partition
      CheckPartition
      if [ ${CurrentType} ]; then
        PrintOne "You can choose to leave it as it is, but should"
        PrintOne "understand that not reformatting the root"
        PrintOne "partition can have unexpected consequences."
        echo
        TypeList="ext2 ext3 ext4 btrfs"
      else
        TypeList="ext2 ext3 ext4 btrfs"
      fi
      # Now select a filesystem
      select_filesystem
      if [ -z ${PartitionType} ]
      then
        RootType="ext4"
      else
        RootType="${PartitionType}"
      Label="${Labelled[${PassPart}]}"
      if [ -n "${Label}" ]; then
        EditLabel $PassPart
      fi
      fi
    else
      Remaining="$Remaining $i" # Add next available partition
    fi
  done
  PartitionList=$Remaining      # Replace original PartitionList with remaining options
}

CheckPartition() {
  # Finds if there is an existing file system on the selected partition
  print_heading
  CurrentType=`file -sL ${Partition} | grep "ext" | cut -c26-30`
  if [ ${CurrentType} ]; then
    PrintOne "The selected partition ${Partition} is currently formatted to ${CurrentType}"
    PrintOne "Reformatting it will remove all data currently on it."
  fi
}

AllocateSwap() {
  print_heading
  PrintOne "Select a partition for swap from the ones that"
  PrintOne "remain, or you can allocate a swap file."
  PrintOne "Warning: Btrfs does not support swap files."
  echo
  Remaining=""
  local Counter=0
  SwapPartition=""
  PickFrom="$PartitionList Swapfile"
  SwapFile=""
  declare -a CopyArray # For passing to listgen2
  local Counter=0
  for p in "${PartitionArray[@]}"
  do
    CopyArray[${Counter}]=${PartitionArray[$Counter]}
    Counter=$((Counter+1))
  done
  CopyArray[${Counter}]="Swapfile"
  PrintOne "If you skip this step, no swap will be allocated."
  echo
  listgen2 "$PickFrom" "Partitions" "" "CopyArray"
  Reply=$Response # Number of selected item
  if [ $Result != "Swapfile" ] && [ $Result != "Done" ]; then # Short ID of selected item
    PassPart=$Result
  fi
  echo
  Counter=0
  for i in ${PickFrom}
  do
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]
    then
      case $i in
        "Done") SwapPartition=""
              break
        ;;
        "Swapfile") SetSwapFile
            SwapPartition=""
            break
        ;;
        *) SwapPartition="/dev/$i"
         # IsSwap=`lsblk -l | grep $i | grep SWAP | awk '{print $7}'`
          IsSwap=`sudo blkid /dev/sd* | grep 'swap' | awk '{print $1}'`
          if [ -n "$IsSwap" ]; then
            print_heading
            PrintOne "$i is already formatted as a swap partition,"
            PrintOne "Do you wish to reformat it?"
            echo
            listgen1 "Yes No" "" "nodone"
            case $Response in
              "1" | "Y" | "y") MakeSwap="Y"
              ;;
              "2" | "N" | "n") MakeSwap="N"
              ;;
              *) MakeSwap="Y"
            esac
          fi
          Label="${Labelled[${PassPart}]}"
          if [ -n "${Label}" ]; then
            EditLabel "$PassPart"
            SetLabel "$PassPart"
          fi
          UpdateArray # Remove the selected partition from $PartitionArray[]
      esac
    else
      if [ $i != "Done" ] && [ $i != Swapfile ]; then
        Remaining="$Remaining $i" # Add next available partition
      fi
    fi
  done
  print_heading
  if [ $SwapPartition ]; then
    read_timed "$SwapPartition will be used for swap" 1
  elif [ $SwapFile ]; then
    read_timed "A swap file of ${SwapFile} will be allocated." 1
  else
    read_timed "No swap option has been allocated." 1
  fi
  echo
  PartitionList=$Remaining  # Replace original PartitionList with remaining options
}

NoPartitions() { # There are no unallocated partitions
  PrintOne "There are no partitions available for swap,"
  PrintOne "but you can allocate a swap file, if you wish."
  Message="Create a swap file?: "
  echo
  listgen1 "Yes No" "" "nodone"
  case $Response in
    "1" | "Y" | "y") SetSwapFile
      SwapPartition=""
     ;;
    *) SwapPartition=""
      SwapFile=""
  esac
}

SetSwapFile() {
  LoopRepeat="Y"
  while [ ${LoopRepeat} = "Y" ]
  do
    PrintOne "Allocate the size of your swap file (M = Megabytes, G = Gigabytes)"
    TPread "Size of swap file [eg: 512M or 2G]: "
    RESPONSE="${Response^^}"
    # Check that entry includes 'M or G'
    CheckInput=(`echo $RESPONSE | grep "G\|M"`)
    echo
    if [ -z ${CheckInput} ]; then
      PrintOne "You must include M or G"
      SwapFile=""
    else
      SwapFile=$RESPONSE
      LoopRepeat="N"
    fi
    if [ ${LoopRepeat} = "N" ]
    then
      break
    fi
  done
}

MorePartitions() {
  local Elements=0
  AddedToRemaining=0
  for i in ${PartitionList}
  do
    Elements=$((Elements+1))
  done
  while [ $Elements -gt 0 ]
  do
    print_heading
    Remaining=""
    PrintOne "The following partitions remain unallocated."
    PrintOne "If you wish to use one, select it from the list,"
    PrintOne "or choose 'Done' to finish partitioning."
    echo
    listgen2 "$PartitionList" "Partitions" "" "PartitionArray"
    if [ $Result != "Done" ]; then
      PassPart=$Result
      SetLabel "$Result"
      UpdateArray # Remove the selected partition from $PartitionArray[]
    fi
    echo
    for Part in ${PartitionList} # Iterate through the list
    do
      Partition=""
      PartitionType=""
      if [ $Part = $Result ] && [ $Result != "Done" ]; then
        Partition="/dev/$Part"
        MakePartition # Call complete details
        Label="${Labelled[${PassPart}]}"
        if [ -n "${Label}" ]; then
          EditLabel $PassPart
        fi
      elif [ $Part != "Done" ]; then   # Part is not selected and not 'Done'
        Remaining="$Remaining $Part" # Add unused partition to temp list
        AddedToRemaining=$(($AddedToRemaining+1))
      fi
    done
    PartitionList=$Remaining  # Replace original PartitionList with temp list
    if [ $Result = "Done" ]; then
      Elements=0
      break
    else
      Elements=$AddedToRemaining
    fi
  done
  # Ensure that if AddPartList (the defining array) is empty, all others are too
  if [ -z ${#AddPartList[@]} ]
  then
    AddPartList=""
    AddPartMount=""
    AddPartType=""
  fi
}

MakePartition() { # Called by MorePartitions
  # Add the selected partition to the array for extra partitions
  # 1) Save to AddPartList (eg: /dev/sda5)
  ExtraPartitions=${#AddPartList[@]}
  AddPartList[$ExtraPartitions]="${Partition}"
  CheckPartition   # Before going to select_filesystem, check the partition
  if [ ${CurrentType} ]; then
    PrintOne "You can choose to leave it as it is, by selecting 'Done', but not"
    PrintOne "reformatting an existing partition can have unexpected consequences."
    echo
  fi
  # 2) Select filesystem
  TypeList="ext2 ext3 ext4 btrfs" # Set format types for the selected partition
  select_filesystem
  AddPartType[$ExtraPartitions]="${PartitionType}"  # Add it to AddPartType list
  # 3) Get a mountpoint
  LoopRepeat="Y"
  while [ ${LoopRepeat} = "Y" ]
  do
    echo
    PrintOne "Enter a mountpoint for ${Partition} ..."
    TPread "(eg: /home) ... /"
    # Check that entry includes '/'
    CheckInput=(`echo $Response | cut -c1`)
    case ${CheckInput} in
      "") PrintOne "You must enter a valid mountpoint"
          PartMount=""
          ;;
      *) if [ ${CheckInput} != "/" ]; then
            PartMount="/${Response}"
        else
            PartMount="${Response}"
        fi
    esac
    # Check that the mountpoint has not already been used
    MountPointCounter=0
    if [ -z ${AddPartMount} ]; then
      LoopRepeat="N"
    else
      # Go through AddPartMount checking each item against PartMount
      for MountPoint in ${AddPartMount}
      do
        MountPointCounter=$((MountPointCounter+1))
        if [ $MountPoint = $PartMount ]; then
          read_timed "Mountpoint ${PartMount} has already been used. Please use a different mountpoint."
        else
          LoopRepeat="N"
          break
        fi
      done
    fi
    if [ ${LoopRepeat} = "N" ]
    then
      break
    fi
  done
  AddPartMount[$ExtraPartitions]="${PartMount}"
}
