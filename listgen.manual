Using listgen1 and listgen2
---------------------------
These menus are designed to be application-independent.

listgen1
--------
listgen1 is an alternative to the bash 'select' function for use in shell scripts to
generate a numbered menu. Unlike 'select' it centres the menu on the screen, using the PrintOne and PrintMany functions.

It takes the form: listgen1 "argument1" "argument2" "argument3"

It receives up to three string arguments:
 1) A simple string array variable of the items to be listed;
 2) An optional one-word menu heading (--title) which will be underlined in the cli version; 
 3) An optional alternative final item to be displayed instead of 'Done' (eg: 'Retry').
    If set to 'nodone' (or 'nocancel' in the case of the Dialog version) the menu will display without a 'Done'/'<Cancel>' option (useful to ensure that one of the options is chosen).

If the 3rd argument is required, there must be a 2nd argument, even if it is an empty string.

In addition to the arguments specifically passed, both listgen1 and listgen2 make use of two global variables (if set) ...
 1) $Passed ... this will be used as a page heading (--pagetitle);
 2) (Dialog only) $Message ... Instructions above a menubox, or information in a msgbox.

Example calls:
 listgen1 "$Accessories" "-Accessories-"
 listgen1 "Reboot Shutdown" "" "nodone"

The string array variable may be passed in one of three ways:
1) It may be passed directly: "item1 item2 item3 ... "
2) It may be assigned to a variable: VariableName="item1 item2 item3 ... " 
  Example: Accessories="Conky Geany Nautilus Terminator"
3) It may be generated by a bash command ...
  Example: Partitionlist=$(lsblk -l | grep 'part')
  Note: For the Dialog version, a bash-generated list should be converted to a string array. For example:
     Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
     passzones=""
     for z in ${Zones[@]}; do
       passzones="$passzones $z"
      done
      Message="To set the system clock, please choose the World Zone of your location."
      listgen1 "${passzones}" "World zones" "nocancel"

listgen1 sets 2 global variables for use by the calling function ...
 1) $Response - the item number selected by the user, and
 2) $Result - the label (from the variable array) of the item selected.

listgen1 uses 2 built-in functions:
 1) PrintOne (which centres text on the screen), and
 2) PrintMany (which aligns subsequent items of a list under the first)

-----------------------------------------------------------------------

listgen2
--------
listgen2 is specifically designed for displaying longer descriptions in a menu.
When an item is selected, InfoMenu finds that item in a reference variable array
of short (one-word) names, and saves it as the global variable $Result which may
then be used by the calling function if desired. Although complex to set up, it adds greater functionality and user-friendliness for menus.

The reference array must be specifically declared using the -A option, and the elements filled, before it can be used:

It takes the form: listgen2 "$PrimaryFile" "Heading" "Finished" "ReferenceArray"

Example: (from achoodesktop - luxuries)
Desktop="conky cairo-dock docky gparted yaourt"
LongDesk[1]="Conky - Desktop time and system information           "
LongDesk[2]="Cairo Dock - Highly customizable dock and launcher application"
LongDesk[3]="Docky - Application for opening applications and managing windows"
LongDesk[4]="GParted - make/delete/resize partitions"
LongDesk[5]="Yaourt - Easy to use AUR package installer"

listgen2 receives four arguments (four MUST be passed, even if one or more is empty):
 1) The primary file. That is, the string of short references;   
 2) An optional one-word heading (if passed, this will be diplayed and underlined);
 3) An optional alternative to be displayed instead of 'Done' (eg: 'Retry').
    If set to 'nodone', the menu will display without a Done option.
 4) The name (only) of the reference array (this will be used to access the array;
    Only 1) and 4) are essential - 2) and 3) are optional and may be blank strings (but MUST be included).

Example: listgen2 "$Graphical" "Graphical" "nodone" "LongGraph"
... or ...
Example: listgen2 "$Office" "" "" "LongOffice"

listgen2 accesses the same global variables as listgen1 and uses the same two built-in functions
