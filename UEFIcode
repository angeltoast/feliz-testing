#!/bin/bash

# UEFIcode - Functions and variables for installing on UEFI systems
# -------------------------------------------------------------
# All UEFI-specific code is to be in this module
# Notes:
# This code was written for Achoo
# The names of some calling functions may have changed
# Check Arch Wiki for changes to recommended practice

# Variables for UEFI Architecture
UEFI=0            # 1 = UEFI; 0 = BIOS
EFIPartition=""   # "/dev/sda1" 
UEFI_MOUNT=""    	# UEFI mountpoint
DualBoot="N"      # For formatting EFI partition

# ---- ------------ --------------------------------------------------------- ----
# Line   Function      Purpose                                     'My notes' Line       
# ---- ------------ --------------------------------------------------------- ----
#  25  TestUEFI      Test environment; if UEFI, inform user, and allow exit  13
#  55  AllocateEFI   Offers list of partitions for user to select EFI /boot  37
#  93  MountUEFI     During installation, prepares the EFI /boot partition   67
# ---- ------------ --------------------------------------------------------- ----

# 1) Assess environment
TestUEFI() { # Called at launch of Feliz script, before all other actions

read -p "In TestUEFI at line ${LINENO}"

 dmesg | grep -q "efi: EFI"           # Test for EFI (-q tells grep to be quiet)
 if [ $? -eq 0 ]; then                # check exit code; 0 = EFI, else BIOS
    echo "You are using EFI boot."    # For testing only - remove when tested ..............
    # Mount efivarfs if it is not already mounted
    if [[ -z $(mount | grep /sys/firmware/efi/efivars) ]]; then
      mount -t efivarfs efivarfs /sys/firmware/efi/efivars
    fi
    UEFI=1
    PrintOne "It seems that your computer is operating in UEFI mode."
    PrintOne "Feliz can work with your UEFI system, if you wish. If you"
    PrintOne "have already created the necessary partitions, you will be"
    PrintOne "able to allocate them. See the Arch Wiki for guidance."
    PrintOne "Alternatively, Feliz can partition the entire drive for UEFI,"
    PrintOne "but beware that any existing data on the drive will be deleted."
    PrintOne "If in doubt, stop the installation and check the Arch Wiki."
    echo
    PrintOne "Do you wish to continue installation or abort?: "
      echo
      listgen1 "Continue Abort" "Options" "nodone"
      echo
      if [ $Response -eq 2 ]; then    # User wishes to abort installation
        shutdown -h now
      fi
  else
    echo "You are using BIOS boot"    # For testing only - remove when tested .............
    UEFI=0
 fi
}

# 2) Allocation - user allocates existing partitions
AllocateEFI() { # Called at start of AllocateRoot, before allocating root partition
  # Uses list of available partitions in PartitionList created in ManagePartitions
	Remaining=""
	local Counter=0
  Partition=""
	PartitionType=""
  SetPS3
	print_info "Here are the partitions that are available."
	print_info "First you should select one to use for EFI (/boot)"
  echo
	select partition in ${PartitionList}
	do
    Reply=$REPLY
    for i in ${PartitionList}
		do
		Counter=$((Counter+1))
			if [ $Counter -eq $Reply ]
			then
				Partition="/dev/$i"
				EFIPartition="${Partition}"
        echo
        print_info "Are other operating systems (eg: Windows) dual-booting"
      TPread "with this installation? (y/N): "
      case $Response in
        "n" | "N" | "") DualBoot="N"
        ;;
        *) DualBoot="Y"
      esac
			else
				Remaining="$Remaining $i"	# Add next available partition
			fi
		done
    PartitionList=$Remaining			# Replace original PartitionList with remaining options
		break
  done
}

# 3) Auto-create partitions for UEFI system and set variables for mounting
UEFI_autopart() { # Partitioning for a UEFI environment
  Parted "mklabel gpt"
  if [ $DiskSize -ge 40 ]; then
    # Device is large enough for separate /home, /root (20 GiB) and /swap (8 GiB)
    Parted "mkpart ESP fat32 1MiB 513MiB"             # EFI boot partition
    Parted "set 1 boot on"
    EFIPartition="${GrubDevice}1"                     # "/dev/sda1" 
    Parted "mkpart primary linux-swap 513MiB 8GiB"    # /swap "/dev/sda2"
    SwapPartition="${GrubDevice}2"
    MakeSwap="Y"
    Parted "mkpart primary ext4 8GiB 23GiB"           # /root "/dev/sda3"
    RootPartition="${GrubDevice}3"
    RootType="ext4"
    Parted "mkpart primary ext4 23GiB 100%"           # /home "/dev/sda4"
    AddPartList[0]="${GrubDevice}4" # Add to the array of additional partitions
    AddPartMount[0]="/home"
    AddPartType[0]="ext4"
    Home="Y"
  elif [ $DiskSize -ge 30 ]; then
    # Device is just large enough for separate /home partition & swap partition
    Parted "mkpart ESP fat32 1MiB 513MiB"             # EFI boot partition
    Parted "set 1 boot on"
    EFIPartition="${GrubDevice}1"                     # "/dev/sda1" 
    Parted "mkpart primary linux-swap 513MiB 4GiB"    # /swap "/dev/sda2"
    SwapPartition="${GrubDevice}2"
    MakeSwap="Y"
    # Root partition 15GiB
    Parted "mkpart primary ext4 4GiB 16GiB"           # /root "/dev/sda3"
    RootPartition="${GrubDevice}3"
    RootType="ext4"
    Parted "mkpart primary ext4 16GiB 100%"           # /home "/dev/sda4"
    AddPartList[0]="${GrubDevice}4" # Add to the array of additional partitions
    AddPartMount[0]="/home"
    AddPartType[0]="ext4"
    Home="Y"
  elif [ $DiskSize -ge 18 ]; then
    # Swap 4Gib and one main partition up to 20GiB
    Parted "mkpart ESP fat32 1MiB 513MiB"             # EFI boot partition
    Parted "set 1 boot on"
    EFIPartition="${GrubDevice}1"                     # "/dev/sda1" 
    Parted "mkpart primary linux-swap 513MiB 4GiB"    # /swap "/dev/sda2"
    SwapPartition="${GrubDevice}2"
    MakeSwap="Y"
    Parted "mkpart primary ext4 4GiB 100%"            # /root "/dev/sda3"
    RootPartition="${GrubDevice}3"
    RootType="ext4"
  elif [ $DiskSize -gt 10 ]; then
    # Swap 2Gib and one main partition up to 16GiB
    Parted "mkpart ESP fat32 1MiB 513MiB"             # EFI boot partition
    Parted "set 1 boot on"
    EFIPartition="${GrubDevice}1"                     # "/dev/sda1" 
    Parted "mkpart primary linux-swap 513MiB 2GiB"    # /swap "/dev/sda2"
    SwapPartition="${GrubDevice}2"
    Parted "mkpart primary ext4 2GiB 100%"            # /root "/dev/sda3"
    RootPartition="${GrubDevice}3"
    RootType="ext4"
    SwapFile="2G"
    SwapPartition=""
  else # If disk < 10 Gb
    # Swap file and one main partition up to 10GiB
    Parted "mkpart ESP fat32 1MiB 513MiB"             # EFI boot partition
    Parted "set 1 boot on"
    EFIPartition="${GrubDevice}1"                     # "/dev/sda1" 
    Parted "mkpart primary ext4 513MiB 100%"          # /root "/dev/sda3"
    RootPartition="${GrubDevice}2"
    RootType="ext4"
    SwapFile="2G"
    SwapPartition=""
  fi
  ShowPart1="Boot: `lsblk -l | grep "${UseDisk}1" | awk '{print $4}'`" >/dev/null
  ShowPart2="Swap: `lsblk -l | grep "${UseDisk}2" | awk '{print $4}'`" >/dev/null
  ShowPart3="Root: `lsblk -l | grep "${UseDisk}3" | awk '{print $4}'`" >/dev/null
  ShowPart4=""
  AutoPart=1 # Set flag to 'on' for mounting
}

# 4) Format EFI boot partition and mount (after /root created at /mnt)
MountUEFI() {
  mkfs.fat -F32 ${EFIPartition} 2> error.log
  CheckForError "${LINENO} 'mkfs.fat -F32 ${EFIPartition}'" 2
  mkdir /mnt/boot
  mount ${EFIPartition} /mnt/boot
}
