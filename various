#!/bin/bash

# The Feliz installation scripts for Arch Linux
# 17 June 2016

# /cliff/various
# Various CLI functions for input/output, processing and installing

# Developed by Elizabeth Mills

# Please read the introduction in the README file

# -------------------------      -------------------------
# Functions           Line       Functions           Line
# -------------------------      -------------------------
# arch_chroot           27       Bugger               136
# print_heading         31       SetGrubDevice        148
# invalid_option        39       
# TPread                44       InstallKernel        176
# DisplayProgress       59       AddCodecs            209
# TPecho                63       McInitCPIO           222
# read_timed            81       SetRootPassword      231
# SetKernel             99       SetUserPassword      269
# ConfirmVbox          112       DisplayFinished      296

arch_chroot() {  # From Lution AIS
  arch-chroot /mnt /bin/bash -c "${1}" 2>> feliz.log
}

print_heading() {
  clear
  T_COLS=`tput cols`
  tput cup 1 $((($T_COLS/2)-20))
  printf "~ $Backtitle ~\n"
  printf "%$(tput cols)s\n"|tr ' ' '-'
}

invalid_option() { # (from AUI scripts)
  echo
  read_timed "Invalid entry. Try again ..." 1
}

TPread() { # Aligned prompt for user-entry
  # $1 = prompt ... Returns result through $Response
  T_COLS=`tput cols`
  lov=${#1}
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 2 ))
  elif [ ${lov} -gt ${T_COLS} ]; then
    stpt=0
  else
    stpt=$(( ($T_COLS - 10) / 2 ))
  fi
  EMPTY="$(printf '%*s' $stpt)"
  read -p "$EMPTY $1" Response
}

DisplayProgress() { # For compatibility with Squiff
  TPecho "$1" "$2"
}

TPecho() { # For displaying status while running on auto
  echo
  CurrentTime=$(date +%s)
  Difference=$(( $CurrentTime-$StartTime ))
  DIFFMIN=$(( $Difference/60 ))
  DIFFSEC=$(( $Difference % 60 ))
  T_COLS=`tput cols`
  EMPTY="     "
  lov=${#1}
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 3 ))
    EMPTY="$(printf '%*s' $stpt)"
  fi
  tput bold
  echo -e "$EMPTY $1 \n"
  tput sgr0
}

read_timed() { # $1 = text to display; $2 = duration
  T_COLS=`tput cols`
  lov=${#1}
  if [ $2 ]; then
    tim=$2
  else
    tim=2
  fi
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 2 ))
    EMPTY="$(printf '%*s' $stpt)"
  else
    EMPTY=""
  fi
  read -t ${tim} -p "$EMPTY $1"
  echo
}

SetKernel() {
  print_heading
  echo
  PrintOne "Choose your kernel"
  PrintOne "The Long-Term-Support kernel (LTS) offers stabilty,"
  PrintOne "while the Latest kernel has all the new features."
  PrintOne "If in doubt, choose LTS."
  echo
  local Counter=0
  listgen1 "LTS Latest" "Kernels" "nodone"
  Kernel=${Response} # Set the Kernel variable (1 = LTS; 2 = Latest)
}

ConfirmVbox() {
  Retry="Y"
  until [ $Retry = "N" ]
  do
    print_heading
    PrintOne "It appears that feliz is running in Virtualbox."
    PrintOne "If it is, feliz can install Virtualbox guest"
    PrintOne "utilities and make appropriate settings for you."
    echo
    PrintOne "Install Virtualbox guest utilities?: "
    echo
    listgen1 "Yes No" "" "nodone"
    echo
    case $Response in
      1) IsInVbox="VirtualBox"
        Retry="N"
      ;;
      "") invalid_option
      ;;
      *) IsInVbox=""
        Retry="N"
    esac
  done
}

Bugger() {
    print_heading
    PrintOne "This is a bug"
    echo
    PrintOne " =á»˜= "
    echo
    PrintOne "It's probably harmless"
    echo
    PrintOne "Press any key to continue"
    read
}

SetGrubDevice() {
  DEVICE=""
  DevicesList="$(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd')";
  print_heading
  GrubDevice=""
  Counter=0
  PrintOne "Select the device where Grub is to be installed."
  PrintOne "Note that if you do not select a device, Grub"
  PrintOne "will not be installed, and you will have to make"
  PrintOne "alternative arrangements for booting your new system."
  echo
  listgen1 "${DevicesList}" "Devices" "None"
  Reply=$Response
  for i in ${DevicesList}
  do
    Item=$i
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]; then
      if [ $Item = "$Done" ]; then
        GrubDevice=""
      else
        GrubDevice=$Item
      fi
      break
    fi
  done
}

InstallKernel() {   # Kernel and some other core systems
  
  LANG=C            # Temporary addition to overcome bug in Arch man pages

  case $Kernel in   # Selected kernel

    1) TPecho "Installing LTS kernel"
      pacstrap /mnt linux-lts 2>> feliz.log
      ;;

    *) TPecho "Installing Latest kernel - this may take some time"
      pacstrap /mnt linux 2>> feliz.log
      
  esac
  
  # Man pages
  TPecho "Installing man-pages"
  pacstrap /mnt man-pages 2>> feliz.log     # Note: man-db installed last, after DE

  TPecho "Installing core systems"
  pacstrap /mnt cryptsetup dhcpcd dialog diffutils file gettext inetutils iproute2 iputils jfsutils licenses logrotate lvm2 mdadm nano netctl pacman pciutils pcmciautils procps-ng psmisc reiserfsprogs s-nail sed systemd-sysvcompat tar usbutils vi which xfsprogs autoconf automake binutils bison fakeroot flex gcc groff libtool make patch pkg-config sudo 2>> feliz.log

  TPecho "Installing cli tools"
  pacstrap /mnt btrfs-progs gamin gksu gvfs ntp wget openssh screenfetch unrar unzip vim xarchiver xorg-xedit xterm 2>> feliz.log

  # Enable sshd
  arch_chroot "systemctl enable sshd.service" >/dev/null
  
}

AddCodecs() {
  TPecho "Adding codecs"
  pacstrap /mnt a52dec autofs faac faad2 flac lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv wavpack x264 gstreamer0.10-plugins pulseaudio pulseaudio-alsa libdvdcss dvd+rw-tools dvdauthor dvgrab flashplugin 2>> feliz.log
  
  TPecho "Installing Wireless Tools"
  pacstrap /mnt b43-fwcutter ipw2100-fw ipw2200-fw zd1211-firmware 2>> feliz.log
  pacstrap /mnt iw wireless_tools wpa_actiond wifi-menu 2>> feliz.log
  
  TPecho "Installing X, Graphics, etc"
  pacstrap /mnt xorg-server xorg-server-utils xorg-xinit xorg-twm 2>> feliz.log
  
  TPecho "Installing  opensource video drivers"
  pacstrap /mnt xf86-video-vesa xf86-video-nouveau xf86-input-synaptics 2>> feliz.log
  
}

McInitCPIO() {
  DisplayProgress "Running mkinitcpio" 10
  case $Kernel in
    1) arch-chroot /mnt /bin/bash -c mkinitcpio -p linux-lts 2>> feliz.log
    ;;
    *) arch-chroot /mnt /bin/bash -c mkinitcpio -p linux 2>> feliz.log
  esac
}

SetRootPassword() {
  print_heading
  echo
  PrintOne "Success!"
  echo
  PrintOne "Finished installing in $DIFFMIN minutes and $DIFFSEC seconds"
  echo
  PrintOne "-----------------------"
  echo
  PrintOne "Finally we need to set passwords ..."
  echo
  PrintOne "Note that you will not be able to "
  PrintOne "see passwords as you enter them ..."
  echo
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    read -s -p "Enter a password for root: " Pass1
    echo
    read -s -p "Re-enter password for root: " Pass2
    echo
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      print_heading
      read_timed "Passwords cannot be blank. Try again ..." 1
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
     echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
     arch_chroot "passwd root" < /tmp/.passwd >/dev/null
     rm /tmp/.passwd 2>> feliz.log
     Repeat="N"
    else
      print_heading
      PrintOne "Passwords don't match. Try again"
    fi
  done
}

SetUserPassword() {
  echo
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    read -s -p "Enter a password for $UserName: " Pass1
    echo
    read -s -p "Re-enter password for $UserName: " Pass2
    echo
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      print_heading
      read_timed "Passwords cannot be blank. Try again ..." 1
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
      echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
      arch_chroot "passwd ${UserName}" < /tmp/.passwd >/dev/null
      rm /tmp/.passwd 2>> feliz.log
      Repeat="N"
    else
      print_heading
      echo "Passwords don't match. Try again"
      continue
    fi
  done
}

DisplayFinished() {
  
  print_heading
  read_timed "Congratulations, installation is complete."
  read_timed "Feliz will now shut down the computer."
  read_timed "Remove the installation media before restarting."
  read_timed "Have fun!"
}
