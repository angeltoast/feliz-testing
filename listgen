#!/bin/bash

# Developed by Elizabeth Mills
# Revision date: 23rd December 2016

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.

# This program is distributed in the hope that it will be useful, but
#      WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#            General Public License for more details.

# A copy of the GNU General Public License is available from the Feliz2
#        page at http://sourceforge.net/projects/feliz2/files
#        or https://github.com/angeltoast/feliz2, or write to:
#                 The Free Software Foundation, Inc.
#                  51 Franklin Street, Fifth Floor
#                    Boston, MA 02110-1301 USA

# Functions return the text of the selected item as global variable $Result
# and the selected item number as global variable $Response
# Window width and height are adjusted according to content

# See listgen.manual for guidance on the use of these functions

# In this module:
# Functions for providing an intuitive interface without using Dialog
# --------------------   ------------------------
# Function        Line
# --------------------   ------------------------
# Heading          47    Print a heading
# first_item       60    Prints first item of a menu
# subsequent_item  71    Prints successive menu items
# PrintRev         77    Reverses text colour
# Buttons          86    Prints a row of buttons. 3 arguments: Type; Button string; Message string
# ActiveMenu      191    Controls the highlighting of menu items. 1 argument = Type (Menu, Yes/No)
# listgen1        303    Generates a simple menu of one-word items
# listgen2        360    Generates a menu of multi-word items
# listgenx        411    Generates a numbered list of one-word items in columns
# SelectPage      522    Used by listgenx to manage page handling
# PrintPage       569    Used by listgenx to display selected page
# --------------------   ------------------------

Heading() {   # Always use this function to clear the screen
  if [ ! $Backtitle ]; then
    Backtitle="Generated By Listgen"
  fi
  tput sgr0                             # Make sure colour inversion is reset
  clear
  T_COLS=$(tput cols)                   # Get width of terminal
  tput cup 0 $(((T_COLS/2)-20))         # Move the cursor to left of center
  printf "%-s\n" "$Backtitle"           # Display backtitle
  printf "%$(tput cols)s\n"|tr ' ' '-'  # Draw a line across width of terminal
  cursor_row=3                          # Save cursor row after heading
}

first_item() { # Aligned text according to screen size
  local width=$(tput cols)
  local lov=$MaxLen                           # Maximum length of Variable
  if [ ${lov} -lt ${width} ]; then
    stpt=$(( (width - lov) / 2 ))
  fi
  tput cup $cursor_row $stpt                  # Move cursor to startpoint
  printf "%-s\v" "$1"
  cursor_row=$((cursor_row+1))
}

subsequent_item() { # Subsequent item(s) in an aligned list
  tput cup $cursor_row $stpt                  # Move cursor to startpoint
  printf "%-s\n" "$1"
  cursor_row=$((cursor_row+1))
}

PrintRev() {  # Receives numeric argument of item number
  tput rev                                     # Reverse colour
  ItemLen=${#ListgenArray[${1}]}
  Spaces=$((MaxLen-ItemLen))
  Padding="$(printf '%*s' "$Spaces")"          # Pad with spaces to make length
  printf "%-s" "${ListgenArray[${1}]}$Padding" # Reprint the item at this position
  tput sgr0 	                                 # Reset colour
}

Buttons() {
  # Receives 3 arguments: 1) Type (Menu, Yes/No); 2) Button string; 3) Message string
  local Len=${#2}                             # Measure length of button string
  button_count=0
  button_end=0
  this_button_start=0
  for (( i=1; i <= Len; ++i ))                # Go through the string counting button delimiters
  do
    x=$(echo $2 | cut -c $i)
    if [ $x ] && [ $x = "[" ]; then
      button_count=$((button_count+1))        # Increment the button counter
      if [ $button_count -eq 1 ]; then        # Currently limited to two buttons
        button_start[${button_count}]=$i      # Save start position in the string
        this_button_start=$i                  # Retain start position for end calculation
      else
        button_start[${button_count}]=$((i-1))  # Save start position in the string
        this_button_start=$i                    # Save position for end calculation
      fi
      this_button_start=$i                      # Retain start position for end calculation
    elif [ $x ] && [ $x = "]" ]; then
      if [ $button_count -eq 1 ]; then
        button_len[${button_count}]=$((i - this_button_start +1)) # Calculate length
        button_len[2]=0
        button_text[2]=""
      else
        button_len[${button_count}]=$((i - this_button_start))    # Calculate length
      fi
      button_text[${button_count}]=$(echo $2 | cut -c ${button_start[${button_count}]}-$i)
    fi
  done
  if [ $button_count -eq 0 ]; then              # Error exit
    echo "listgen-sgi line $LINENO - No buttons specified" > feliz.log
    return 1
  fi

  # Prepare display
  local width=$(tput cols)
  local lov=${#2}                             # Total length of button string
  if [ ${lov} -lt ${width} ]; then
    first_button_start=$(( (width - lov) / 2 ))
  else
    first_button_start=1
  fi
  if [ $button_count -gt 1 ]; then
    second_button_start=$((first_button_start+button_start[2]))
  else
    second_button_start=$first_button_start
  fi
  Echo
  tput cup $cursor_row $first_button_start    # Reposition cursor
  button_row=$cursor_row                      # Save row position of buttons
  printf "%-s\n" "$2"                         # Print buttons
  case $3 in
  "nomessage") Message=$3
  ;;
    *) cursor_row=$((cursor_row+1))           # Advance cursor row after buttons
    Echo
    lov=${#3}                                 # Length of message
    if [ ${lov} -lt ${width} ]; then
      message_start=$(( (width - lov) / 2 ))
    else
      message_start=1
    fi
    tput cup $cursor_row $message_start       # Reposition cursor
    Echo "$3"                                 # Print message
  esac
  ActiveMenu "$1"
}

ActiveMenu() {  # Receives 2 arguments: 1) Type (Menu, Yes/No); 2) Caller (listgen1 or listgen2)
  tput civis &
  local Counter=0
  selected_button=1
  if [ $1 = "Yes/No" ]; then        # Prevent vertical cursor movement
    cursor_bottom=0                 # Initialise at unrealistic limits
    cursor_top=100
    cursor_row=$first_button_start  # Prepare to move cursor to first button
    tput cup $cursor_row $stpt      # Move cursor to selected position
  else                              # ie: Not Yes/No
    cursor_row=$cursor_top          # Prepare to move cursor to top
    tput cup $cursor_row $stpt      # Move cursor to selected position
    PrintRev "$Counter"             # Print top item in reverse colour
  fi
  while :
  do
    if [ $selected_button -eq 1 ]; then
      tput cup $button_row $first_button_start          # Move cursor to button position
      tput rev                                          # Reverse colour
      printf "%-${button_len[1]}s" "${button_text[1]}"  # Highlight first button
      tput sgr0                                         # Restore colour settings
    else
      tput cup $button_row $second_button_start         # Move cursor to button position
      tput rev                                          # Reverse colour
      printf "%-${button_len[2]}s" "${button_text[2]}"  # Highlight first button
      tput sgr0                                         # Restore colour settings
    fi
    read -rsn1 KeyPress                                 # Capture key press
    case "${KeyPress}" in
      "") # Ok/Return pressed
        if [ $1 = "Yes/No" ]; then
          Response=$selected_button
          UseLength=${button_len[${Response}]}
          UseLength=$((UseLength-2))             # This is -4 for braces +2 characters from start
          Result="$(echo ${button_text[${Response}]} | cut -c 3-${UseLength})"
        else  # ie: menu
          if [ $selected_button -eq 1 ]; then
            Response=$((Counter+1))
            if [ $CalledBy = "listgen2" ]; then
              Compare=1
              for i in $PrimaryFile
              do
                if [ $Compare -eq $Response ]; then
                  Result="$i"
                  break
                fi
                Compare=$((Compare+1))
              done
            else
              Result="${ListgenArray[${Counter}]}"
            fi
          else
            Response=0
            Result="Exit"
          fi
        fi
        tput cnorm
        break
      ;;
      A) # Up arrow:
        if [ $cursor_row -gt $cursor_top ]; then            # Not already at top
          tput cup $cursor_row $stpt                        # Reposition cursor
          printf "%-s\n" "${ListgenArray[${Counter}]}$Padding" # Reprint item at this position
          cursor_row=$((cursor_row-1))                      # Next row up
          tput cup $cursor_row $stpt                        # move cursor to selected row
          Counter=$((Counter-1))                            # Decrease counter for next list item
          PrintRev $Counter                                 # Print current item in reverse colour
        fi
      ;;
      B) # Down arrow
        if [ $cursor_row -lt $cursor_bottom ]; then         # Not already at bottom
          tput cup $cursor_row $stpt                        # Reposition cursor
          printf "%-s\n" "${ListgenArray[${Counter}]}$Padding" # Reprint item at this position
          cursor_row=$((cursor_row+1))                      # Next row down
          tput cup $cursor_row $stpt                        # move cursor to selected row
          Counter=$((Counter+1))                            # Increase counter for next list item
          PrintRev $Counter                                 # Print current item in reverse colour
        fi
      ;;
      C) # Right arrow
        if [ $selected_button -eq 1 ]; then
          tput cup $button_row $first_button_start          # Move cursor to ok button position
          printf "%-${button_len[1]}s" "${button_text[1]}"  # Unhighlight ok button
          tput rev                                          # Reverse colour
          tput cup $button_row $second_button_start         # Move cursor to exit button position
          printf "%-${button_len[2]}s" "${button_text[2]}"  # Highlight exit button
          tput sgr0                                         # Reset
          tput cup $cursor_row $stpt                        # return cursor to menu row
          selected_button=2                                 # Set button variable
        fi
      ;;
      D) # Left arrow
        if [ $selected_button -eq 2 ]; then
          tput cup $button_row $second_button_start         # Move cursor to second button
          printf "%-${button_len[2]}s" "${button_text[2]}"  # Unhighlight second button
          tput rev                                          # Reverse colour
          tput cup $button_row $first_button_start          # Move cursor to first button position
          printf "%-${button_len[1]}s" "${button_text[1]}"  # Highlight ok button
          tput sgr0                                         # Reset
          tput cup $cursor_row $stpt                        # return cursor to menu row
          selected_button=1
        fi
      ;;
      *) tput cup $cursor_row $stpt                         # Reposition cursor
      continue
    esac
  done
}

listgen1() { # Simple listing alternative to the bash 'select' function
  # Arguments:
  # 1) Primary file (string of single-word references)
  # 2) No longer used - experimenting with 'nomessage'
  # 3) Optional hiding of [ Exit ] ("nocancel")
  # Read listgen.manual for full details
  case $2 in
    "nomessage") Message="$2"
    ;;
    *) Message="Use arrow keys to move. [Enter] to select"
  esac
  Padding=" "
  MaxLen=2
  while :
  do
    local Counter=0
    MenuList=$1
    # Find length of longest item to create padding for use in reverse colour
    for i in $MenuList
    do
      Counter=$((Counter+1))
      if [ $Counter -eq 1 ]; then
        MaxLen=${#i}              # Save length
      else
        ItemLen=${#i}
        if [ $ItemLen -gt $MaxLen ]; then
          MaxLen=$ItemLen
        fi
      fi
    done
    # Now run through the file again to print each item
    Counter=0
    for i in $MenuList
    do
      if [ $Counter -eq 0 ]; then
        cursor_top=$cursor_row
        first_item "$i"
      else
        subsequent_item "$i"
      fi
      ListgenArray[$Counter]=$i   # Save to array for menu actions
      Counter=$((Counter+1))
    done
    CalledBy="listgen1"
    cursor_bottom=$((cursor_row-1))
    case $3 in
    "nocancel") Buttons "Menu" "[ Ok ]" "$Message"
    ;;
    "") Buttons "Menu" "[ Ok ] [ Exit ]" "$Message"
    ;;
    *) Buttons "Menu" "[ Ok ] [ $3 ]" "$Message"
    esac
    break
  done
}

listgen2() { # Advanced menuing function with extended descriptions
  # Arguments:
  # 1) Primary file (string of single-word references)
  # 2) Not used in interactive menus
  # 3) Optional hiding of [ Exit ] ("nocancel")
  # 4) Secondary file (the name {only} of the array containing long descriptions)
  # Read listgen.manual for full details
  Padding=" "
  MaxLen=2
  while :
  do
    Result=""
    PrimaryFile="$1"
    name=$4[@]
    LongDescription=("${!name}")
    # First find length of longest item to create padding for use in reverse colour
    Max=$(echo $PrimaryFile | wc -w)
    for (( i=0; i < $Max; ++i ))
    do
      if [ $i -eq 0 ]; then
        MaxLen=${#LongDescription[${i}]}
      else
        ItemLen=${#LongDescription[${i}]}
        if [ $ItemLen -gt $MaxLen ]; then
          MaxLen=$ItemLen
        fi
      fi
    done
    # Now run through the file again to print each item
    for (( i=0; i < $Max; ++i ))
    do
      if [ $i -eq 0 ]; then
        cursor_top=$cursor_row
        ListgenArray[$i]="${LongDescription[${i}]}"   # Save to array for menu actions
        first_item "${LongDescription[${i}]}"
      else
        ListgenArray[$i]="${LongDescription[${i}]}"   # Save to array for menu actions
        subsequent_item "${LongDescription[${i}]}"
      fi
    done
    CalledBy="listgen2"
    cursor_bottom=$((cursor_row-1))
    if [ $3 ] && [ $3 = "nocancel" ]; then
      Buttons "Menu" "[ Ok ]" "Use arrow keys to move. [Enter] to select"
    else
      Buttons "Menu" "[ Ok ] [ Exit ]" "Use arrow keys to move. [Enter] to select"
    fi
    return 0
  done
}

listgenx() { # Calling function creates input.file before calling listgenx
             # input.file must be one record per line

             # This version of listgen is to create numbered lists for 'difficult'
             # situations. Calling function can send optional 'Headline' string as
             # $1 and optional limit on length of any item as $2
  if [ "$1" ]; then
    Headline="$1"
  else
    Headline=""
  fi
  if [ $2 ]; then
    RestrictLength=$2
  else
    RestrictLength=18
  fi
  total_items=$(cat input.file | wc -l)
  LastItem="$(tail -n 1 input.file)"
  Heading
  # Establish terminal size
  terminal_width=$(tput cols)             # Start with full terminal width
  terminal_width=$((terminal_width-4))    # Allow for two characters margin each side
  terminal_centre=$((terminal_width/2))   # Page centre used to calculate start point
  terminal_height=$(tput lines)           # Full height of terminal
  top_row=4                               # Leave space for heading
  cursor_row=$top_row                     # Start cursor at top row
  bottom_row=$((terminal_height-4))       # Leave space for footer
  items_in_column=$((bottom_row-top_row)) # Number of items in each column

  # Prepare an array of columns
  declare -a Columns                      # Prepare an array to hold all prepared columns
  declare -a ColumnWidths                 # And one for their widths
  WidthOfColumns=2                        # Initialise for loop
  local Counter=0
  RecordNumber=0                          # Initialise record-counting variable
  while [ $RecordNumber -le $total_items  ] # ....... Outer loop for entire file #####
  do
    TestLen=0                             # Set length-testing variable for column
    Column=""                             # Start column string variable
    for (( line=1; line <= $items_in_column; ++line )) # ......... Column loop #####
    do
      RecordNumber=$((RecordNumber+1))
      item=$(head -n $RecordNumber input.file | tail -1)  # Read item from file
      ItemLen=${#item}                            # Measure length
      ItemLen=$((ItemLen+3))                      # Add column spacing
      if [ $ItemLen -gt $TestLen ]; then
        TestLen=$ItemLen                          # Save greatest length
      fi
      Column="$Column $item"                      # Save this record in string
      if [ $RecordNumber -gt $total_items ]; then # If last record
        break
      fi
    done # .... End of column loop ####
    NumberOfColumns=$((NumberOfColumns+1))        # Increment columns counter
    Columns[${NumberOfColumns}]="${Column}"       # Save this column to the array
    ColumnWidths[${NumberOfColumns}]=$TestLen     # Save the width of this column
    Column=""                                     # Empty the string for next column
  done # ........ End of file loop #####

  # Now build all pages, before proceeding to page-handling in SelectPage()
  declare -a Pages  # Each element of this array will hold a list of the columns forming the page
  declare -a PageWidths  # Each element of this array will hold total width of columns forming the page
  Page=""           # This variable will hold a list of column numbers for the selected page
  PageNumber=1      # Page selector
  PageWidth=4       # Start width accumulator with margins
  ColumnWidth=0
  RecordCounter=0   # For numbering
  LastPage=0        #

  while :
  do
    for (( column=1; column <= $NumberOfColumns; ++column )) # Build a page #########################
    do
      if [ $((PageWidth+ColumnWidth+4)) -ge $terminal_width ]; then # If adding another column would
        PageWidths[${PageNumber}]=$PageWidth  # exceed page width ... save this page's width
        PageWidth=4                           # and reset variable for next page
        Pages[${PageNumber}]="${Page}"        # Copy the list of columns to Pages array
        PageNumber=$((PageNumber+1))          # Then set next page, advance page counter, and
        Page=""                               # Empty string for next list of columns
      fi

      ColumnWidth=0
      # Loop through each $Columns[@] to test the length of each string
      for item in ${Columns[${column}]}
      do
        ItemLen=${#item}
        if [ $ItemLen -gt $ColumnWidth ]; then
          ColumnWidth=$((ItemLen+3))           # Longest item plus spaces between columns
        fi
      done

      if [ $((PageWidth+ColumnWidth+1)) -lt $terminal_width ]; then # Page is not full
        PageWidth=$((PageWidth+ColumnWidth+1))  # Add column width to page width accumulator
        Page="$Page $column"                  # and append the column number to this page
      fi

      if [ $column -eq $NumberOfColumns ]; then # Last column
        LastPage=$PageNumber
        PageWidths[${PageNumber}]=$PageWidth
        Pages[${PageNumber}]="${Page}"        # Copy the list of columns to Pages array
        break 2
      fi
    done
  done

  PageNumber=1    # Start at first page
  SelectPage      # Switch between pages

}

SelectPage() {
  while :
  do
    # Display appropriate page according to user input
    case $PageNumber in
    1) if [ $LastPage -gt 1 ]; then   # On page 1, with more than 1 page in total
        Instructions="                 Enter '>' for next page"
      else
        Instructions=""
      fi
      PrintPage
      case $? in                       # Return will be 0, 1, or 2
      1) PageNumber=$PageNumber        # < (left arrow) = illegal call to previous page
      ;;
      2) if [ $LastPage -gt 1 ]; then  # On page 1, with more than 1 page in total
          PageNumber=$((PageNumber+1)) # > (right arrow) = next page
        else
          PageNumber=$PageNumber       # > (right arrow) = illegal call to next page
        fi
      ;;
      *) break                        # 0 : an item was selected or 'Exit' entered
      esac
    ;;
    $LastPage) Instructions="         Enter '<' for previous page"
      PrintPage
      case $? in                      # Return will be 0, 1, or 2
      1) PageNumber=$((PageNumber-1)) # < (left arrow) = previous page
      ;;
      2) PageNumber=PageNumber        # > (right arrow) = illegal call to next page
      ;;
      *) break                        # 0 : an item was selected or 'Exit' entered
      esac
    ;;
    *) Instructions="  Enter '<' for previous page - or - '>' for next page"
      PrintPage
      case $? in                      # Return will be 0, 1, or 2
      1) PageNumber=$((PageNumber-1)) # < (left arrow) = previous page
      ;;
      2) PageNumber=$((PageNumber+1)) # > (right arrow) = next page
      ;;
      *) break                        # 0 : an item was selected or 'Exit' entered
      esac
    esac
  done
}

PrintPage() {
  Heading
  if [ "$Headline" ]; then
    PrintOne "${Headline}"
  fi
  ThisPage="${Pages[${PageNumber}]}"            # String of column numbers for this page
  PageWidth=${PageWidths[${PageNumber}]}        # Full width of this page
  column_start=$(( terminal_centre - (PageWidth/2) -3 ))
  cursor_row=$top_row                           # Start at top row
  while :
  do
    local Counter=1
    for column in ${ThisPage}                   # Outer loop iterates through columns for $ThisPage
    do                                          # getting the column numbers
      ColumnWidth=${ColumnWidths[${column}]}
      for item in ${Columns[${column}]}         # Inner loop iterates through contents of columns
      do
        tput cup $cursor_row $column_start      # Move cursor to print point
        printf "%-s\n" "${Counter}) $item"
        if [ $item = $LastItem ]; then
          break
        fi
        cursor_row=$((cursor_row+1))
        Counter=$((Counter+1))
      done
      column_start=$((column_start+ColumnWidth+2))  # Start next column
      cursor_row=$top_row                           # ... at top row
    done
    tput cup $((terminal_height-2)) $((terminal_centre-25)) # Move cursor to bottom of screen
    Echo "${Instructions}"
    tput cup $((bottom_row+1)) 0                    # Then back to row below bottom row
    TPread "Please enter the number of your selection: "
    case $Response in
    '' | "Exit" | "exit") Result="Exit"
      return 0                  # Quit without selecting anything
    ;;
    "<") return 1                                   # Previous page, if valid
    ;;
    ">") return 2                                   # Next page, if valid
    ;;
    *[!0-9]*) continue
    ;;
    *) Counter=0                            # Find the numbered item in the columns of this page
      for column in ${ThisPage}             # Outer loop iterates through $ThisPage
      do
        for item in ${Columns[${column}]}   # Inner loop iterates through $Columns[@] for this page
        do
          Counter=$((Counter+1))
          if [ $Counter -eq $Response ]; then
            Result=$item
            return 0
          fi
        done
      done
    esac
  done
}
