#!/bin/bash

# feliz-uefi - Additional functions and variables for UEFI
# --------------------------------------------------------
# None of these functions is called, and this script is not sourced in feliz
# --------------------------------------------------------------------------

# Variables for UEFI Architecture
UEFI=0              # 1 = UEFI; 0 = BIOS
UEFI_MOUNT=""     	# UEFI mountpoint
System="BIOS"       # From Lution - may not be needed in Feliz (yet)
DualBoot="N"        # For formatting EFI partition

TestUEFI() { # Called immediately after establishing internet connection
 dmesg | grep -q "EFI v" # Test for EFI (-q tells grep to output nothing)
 if [ $? -eq 0 ]         # check exit code; 0 = EFI, else BIOS
 then
    echo "You are using EFI boot."
    # Mount efivarfs if it is not already mounted
    if [[ -z $(mount | grep /sys/firmware/efi/efivars) ]]; then
      mount -t efivarfs efivarfs /sys/firmware/efi/efivars
    fi
    UEFI=1
    System="UEFI"
    print_info "UEFI detected. Achoo! can work with your UEFI system, but it"
    print_info "is your responsibility to ensure that you have created the"
    print_info "necessary partitions and to allocate them correctly."
    print_info "If in doubt, stop the installation and check the Arch Wiki."
  else
    echo "You are using BIOS boot"
    UEFI=0
    System="BIOS"
 fi
}

AllocateEFI() {
# Called directly by TestUEFI (must be before AllocateRoot)	
# Uses list of available partitions in PartitionList created in ManagePartitions
	Remaining=""
	local Counter=0
  Partition=""
	PartitionType=""
  SetPS3
	print_info "Here are the partitions that are available."
	print_info "First you should select one to use for EFI (/boot)"
  echo
	select partition in ${PartitionList}
	do
    Reply=$REPLY
    for i in ${PartitionList}
		do
		Counter=$((Counter+1))
			if [ $Counter -eq $Reply ]
			then
				Partition="/dev/$i"
				EFIPartition="${Partition}"
        echo
        print_info "Are other operating systems (eg: Windows) dual-booting"
      TPread "with this installation? (y/N): "
      case $Response in
        "n" | "N" | "") DualBoot="N"
        ;;
        *) DualBoot="Y"
      esac
			else
				Remaining="$Remaining $i"	# Add next available partition
			fi
		done
    PartitionList=$Remaining			# Replace original PartitionList with remaining options
		break
  done
}

MountUEFI() {
  # To be called from MountPartitions
  if [ ${UEFI} -eq 1 ] && [ ${DualBoot} = "N" ]; then
    mkfs.fat -F32 ${EFIPartition} 2> error.log
    CheckForError "${LINENO} 'mkfs.fat -F32 ${EFIPartition}'" 2
    mkdir /mnt/boot
    mount ${EFIPartition} /mnt/boot
  fi
}

# Called by achoo at install bootloader stage
if [[ $UEFI -eq 1 ]]; then
  mount -t efivarfs efivarfs /sys/firmware/efi/efivars 2> error.log
fi
