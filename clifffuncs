#!/bin/bash

# felizfuncs - Various functions

# Developed by Elizabeth Mills, incorporating some code adapted from
# the excellent Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# -------------------------      -------------------------
# Functions           Line       Functions           Line
# -------------------------      -------------------------
# Various input/output  22       arch_chroot          242
# Internet connection   87       SetGrubDevice        246
# Various input/output  22       SetGrubDevice        246
# Internet connection   87       umount_partitions    274
# Mirrorlist           131       MountPartitions      283
# SetScope             159       InstallKernel        342
# SetKernel            193       TestExistingDM       336
# ConfirmVbox          206       SetRootPassword      365
# MakePartitionList    229       SetUserPassword      394

invalid_option() { # (from AUI scripts)
  echo 
  read_timed "Invalid option. Try again ..." 1
}

print_heading() {
  clear
  T_COLS=`tput cols`
  tput cup 1 $((($T_COLS/2)-20))
  printf "~ feliz! The Arch Linux Installation Script ~\n"
  printf "%$(tput cols)s\n"|tr ' ' '-'
}

TPecho() { # For displaying status while running on auto
  echo
  CurrentTime=$(date +%s)
  Difference=$(( $CurrentTime-$StartTime ))
  DIFFMIN=$(( $Difference/60 ))
  DIFFSEC=$(( $Difference % 60 ))
  T_COLS=`tput cols`
  tput bold
  lov=${#1}
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 3 ))
    EMPTY="$(printf '%*s' $stpt)"
    echo -e "$EMPTY ${DIFFMIN}m ${DIFFSEC}s - $1 \n"
  else
    echo -e "${DIFFMIN}m ${DIFFSEC}s - $1 \n"
  fi
  tput sgr0
  echo
}

read_timed() { # $1 = text to display; $2 = duration
  T_COLS=`tput cols`
  lov=${#1}
  if [ $2 ]; then
    tim=$2
  else
    tim=2
  fi
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 2 ))
    EMPTY="$(printf '%*s' $stpt)"
  else
    EMPTY=""
  fi
  read -t ${tim} -p "$EMPTY $1"
  echo
}

ReflectorMirrorList() { # Use reflector (added to archiso) to generate fast mirror list
  TPecho "Using Reflector to generate mirrorlist"
  reflector --verbose -l 5 --sort rate --save /etc/pacman.d/mirrorlist 2>> feliz.log
  if [ $? -gt 0 ]; then
    LocalMirrorList
  else
    chmod +r /etc/pacman.d/mirrorlist 2>> feliz.log
  fi
}

LocalMirrorList() { # In case Reflector fails, generate and save a shortened 
  # mirrorlist of only the mirrors defined in the CountryCode variable.
	TPecho "Reflector not available - generating local mirrorlist instead"
	URL="https://www.archlinux.org/mirrorlist/?country=${CountryCode}&use_mirror_status=on"
	MirrorTemp=$(mktemp --suffix=-mirrorlist) 2>> feliz.log
	# Use curl to get list of mirrors from the Arch mirrorlist ${URL} to ${MirrorTemp}
	curl -so ${MirrorTemp} ${URL} 2>> feliz.log
	# Use sed to filter entries
	sed -i 's/^#Server/Server/g' ${MirrorTemp} 2>> feliz.log
	# Make a safe copy of existing mirrorlist
	mv -f /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig 2>> feliz.log
	# Replace existing mirrorlist with new local mirrorlist
	mv -f ${MirrorTemp} /etc/pacman.d/mirrorlist 2>> feliz.log
	chmod +r /etc/pacman.d/mirrorlist 2>> feliz.log
}

SetKernel() {
  print_heading
  echo
  PrintOne "Choose your kernel"
  PrintOne "The Long-Term-Support kernel (LTS) offers stabilty,"
  PrintOne "while the Latest kernel has all the new features."
  PrintOne "If in doubt, choose LTS."
  echo
  local Counter=0
  listgen1 "LTS Latest" "Kernels" "nodone"
  Kernel=${Response} # Set the Kernel variable (1 = LTS; 2 = Latest)
}

ConfirmVbox() {
  Retry="Y"
  until [ $Retry = "N" ]
  do
    print_heading
    PrintOne "It appears that feliz is running in Virtualbox."
    PrintOne "If it is, feliz can install Virtualbox guest"
    PrintOne "utilities and make appropriate settings for you."
    echo
    TPread "Install Virtualbox guest utilities? (y/n): "
    echo
    case $Response in
      "y" | "Y") IsInVbox="VirtualBox"
        Retry="N"
      ;;
      "") invalid_option
      ;;
      *) IsInVbox=""
        Retry="N"
    esac
  done
}

MakePartitionList() {
# Call BuildPartitionLists function to generate an array of partitions
# This is not a first call, so first empty the existing array
 	local x=0
  local HowMany="${#PartitionArray[@]}"
  until [ ${x} -eq ${HowMany} ]
  do
    unset PartitionArray[$x]
    x=$((x+1))
  done
  BuildPartitionLists # Then rebuild
}

arch_chroot() {  # From Lution AIS
  arch-chroot /mnt /bin/bash -c "${1}" 2>> feliz.log
}  

SetGrubDevice() {
  DEVICE=""
  DevicesList="$(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd')";
	print_heading
  GrubDevice=""
	Counter=0
	PrintOne "Select the device where Grub is to be installed."
  PrintOne "Note that if you select the 'None' option, Grub will"
  PrintOne "not be installed, and you will have to make"
  PrintOne "alternative arrangements for booting your new system."
  echo
	listgen1 "${DevicesList}" "Devices" "None"
  Reply=$Response
  for i in ${DevicesList}
	do
    Item=$i
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]; then
      if [ $Item = "$Done" ]; then
        GrubDevice=""
      else
        GrubDevice=$Item
      fi
      break
  	fi
	done
}

InstallationMode() { # New function in each UI branch
print_heading
tput bold
read_timed "Entering installation mode" 1
tput sgr0
read_timed "If you are re-using existing partitions, the system may" 1
read_timed "pause to ask you to confirm that you wish to mount them." 1
read_timed "This may happen more than once ..." 1
read_timed "'y' would be an appropriate response." 1
}

MountPartitions() {
  case $RootType in
    "") TPecho "Not formatting root partition"
    ;;
    *) TPecho "Formatting /root partition"
      umount ${RootPartition} /mnt >/dev/null 2>> feliz.log
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${RootPartition} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${CurrentType} ] && [ $RootType = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${RootPartition}
    elif [ $RootType = "btrfs" ]; then
      mkfs.btrfs -f ${RootPartition} 2>> feliz.log
    else
      Partition=`echo $RootPartition | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${RootType} ${RootPartition}
    fi
  esac
  TPecho "Mounting /root partition"	
  mount ${RootPartition} /mnt 2>> feliz.log # eg: mount /dev/sda1 /mnt
  if [ ${SwapPartition} ]; then
    swapoff -a 2>> feliz.log
    if [ $MakeSwap = "Y" ]; then
      TPecho "Making /swap partition"
      Partition=`echo $SwapPartition | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mkswap ${Label} ${SwapPartition} # eg: mkswap -L Arch-Swap /dev/sda2
    fi
    TPecho "Activating /swap"
    swapon ${SwapPartition} 2>> feliz.log # eg: swapon /dev/sda2
  fi

  local Counter=0
  for id in ${AddPartList}
  do
    TPecho "Mounting ${id} as ${AddPartMount[$Counter]}"
    umount ${id} /mnt${AddPartMount[$Counter]} >/dev/null 2>> feliz.log
    mkdir -p /mnt${AddPartMount[$Counter]} 2>> feliz.log	# eg: mkdir -p /mnt/home
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${AddPartType[$Counter]} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${AddPartType[$Counter]} = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${id}
    elif [ ${AddPartType[$Counter]} = "btrfs" ]; then
      mkfs.btrfs -f ${id} 2>> feliz.log
    elif [ ${AddPartType[$Counter]} != "" ]; then
      Partition=`echo ${id} | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${AddPartType[$Counter]} ${id} # eg: mke2fs -L Arch-Home -t ext4 /dev/sda3
    fi
    mount ${id} /mnt${AddPartMount[$Counter]} 2>> feliz.log	# eg: mount /dev/sda3 /mnt/home
		Counter=$((Counter+1))
	done
}

InstallKernel() {
  TPecho "Installing cli tools"
  pacstrap /mnt  base-devel bash  btrfs-progs bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext gksu glibc grep gzip inetutils iproute2 iputils jfsutils less licenses logrotate lvm2 man-db man-pages mdadm nano netctl ntp openssh pacman pciutils pcmciautils perl procps-ng psmisc reflector reiserfsprogs s-nail screenfetch sed shadow sudo sysfsutils systemd-sysvcompat tar texinfo unrar unzip usbutils util-linux vi vim wget which xfsprogs xarchiver 2>> feliz.log
  arch_chroot "systemctl enable sshd.service" >/dev/null
  case $Kernel in
    1) TPecho "Installing LTS kernel"
        pacstrap /mnt linux-lts
        if [ -n ${IsInVbox} ] && [ $Scope != "Basic" ]; then # Installing in Virtualbox
          TPecho "Installing virtualbox guest modules"
          pacstrap /mnt virtualbox-guest-utils virtualbox-guest-modules-lts  virtualbox-guest-dkms
          echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf 2>> feliz.log  # To overcome piix4 Virtualbox error
          cp virtualbox.conf /mnt/etc/modules-load.d/ 2>> feliz.log
        fi
      ;;  
    *) TPecho "Installing Latest kernel"
        pacstrap /mnt linux
        if [ -n ${IsInVbox} ] && [ $Scope != "Basic" ]; then # Installing latest kernel in Virtualbox
          TPecho "Installing virtualbox guest modules"
          pacstrap /mnt virtualbox-guest-utils virtualbox-guest-dkms
          echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf 2>> feliz.log  # To overcome piix4 Virtualbox error
          cp virtualbox.conf /mnt/etc/modules-load.d/ 2>> feliz.log
        fi
  esac
  TPecho "Installing opensource video drivers"
  pacstrap /mnt xf86-video-vesa xf86-video-nouveau 2>> feliz.log # Install opensource video drivers
}

TestExistingDM() {
  # Test for existing display manager and disable if necessary
  arch-chroot /mnt touch etc/output.log # Create empty file
  arch-chroot /mnt systemctl list-unit-files | grep '(*dm|slim)\.service' > mnt/etc/output.log
  DMLine=`cat /mnt/etc/output.log`
  local Counter=1
  case ${DMLine} in
    "") TPecho "No previous DM discovered"
    ;;
    *) local Continue="Y"
      while [ ${Continue} = "Y" ]
      do
        ExDM=`echo $DMLine  | cut -f ${Counter} -d ' '` # First of pair is DM
        if [ -z ${ExDM} ]; then
          Continue="N" # Quit if no further entries
          break
        fi
        Counter=$((Counter+1))
        ExDMStatus=`echo $DMLine  | cut -f ${Counter} -d ' '` # Second is status
        case ${ExDMStatus} in
          "enabled") arch_chroot "systemctl disable ${ExDM}" >/dev/null
          ;;
          *) TPecho "${ExDM} already disabled"
        esac
        Counter=$((Counter+1))
      done
  esac
}

SetRootPassword() {
  print_heading
  echo
  PrintOne "Success!"
  echo
  if [ $Scope = "Basic" ]; then
    PrintOne "Finished installing basic Arch in $DIFFMIN minutes and $DIFFSEC seconds"
  else
    PrintOne "Finished installing Arch with ..."
    echo
    PrintOne "${LuxuriesList}"
    echo
    PrintOne "... in $DIFFMIN minutes and $DIFFSEC seconds"
  fi
  echo
 	PrintOne "-----------------------"
  echo
  PrintOne "Finally we need to set passwords ..."
  echo
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    read -s -p "Enter a password for root: " Pass1
    echo
    read -s -p "Re-enter root password: " Pass2
    echo
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      read_timed "Passwords cannot be blank. Try again ..." 1
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
     echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd 2>> feliz.log
     arch_chroot "passwd root" < /tmp/.passwd >/dev/null
     rm /tmp/.passwd 2>> feliz.log
     Repeat="N"
    else
      print_heading
      PrintOne "Passwords don't match. Try again"
    fi
  done
}

SetUserPassword() {
  print_heading
  echo
	PrintOne   "And now a password for $UserName: "
  echo
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    read -s -p "Enter a password for $UserName: " Pass1
    echo
    read -s -p "Re-enter password for $UserName: " Pass2
    echo
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      read_timed "Passwords cannot be blank. Try again ..." 1
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
      echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd 2>> feliz.log
      arch_chroot "passwd ${UserName}" < /tmp/.passwd >/dev/null
      rm /tmp/.passwd 2>> feliz.log
      Repeat="N"
    else
      echo "Passwords don't match. Try again"
    fi
  done
}
