#!/bin/bash

# felizdesktop - Functions relevant to users, locations, desktop
# settings and data review called by the main feliz script

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# ---------------     -----------------------
# Function   Line     Function           Line
# ---------------     -----------------------
# Keymap        20      Display Managers    428
# Locale        59      FinalCheck          549
# Timezone     122      ManualSettings      640
# Subzone      161      ChangeRootPartition 666
# Username     235      ChangeSwapPartition 674
# Hostname     251      ChangePartitions    682
# PickLuxuries 216      AddExtras           694

getkeymap() {
print_heading
echo
PrintOne "${_Keyboard1}"
Repeat=1
while [ $Repeat -eq 1 ]
do
  echo
  PrintOne "${_Keyboard2}"
  PrintOne "${_Keyboard3}"
  PrintOne "${_Keyboard4} ..."
  echo
  TPread "${_Keyboard5}: "
  local Term="${Response,,}"
  echo
  # ListKbs=`localectl list-keymaps | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'` # This line failed following change in Arch, so the following line has been substituted
  ListKbs=`cat keymaps.list | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`
  case ${ListKbs} in
    "") print_heading
      echo
      PrintOne "${_Keyboard_Not_Found} '$Term'"
      PrintOne "${_Try_again}"
      continue
      ;;
    *) listgen1 "$ListKbs" "${_Keyboards}" "${_Retry}"
  esac
  case ${Result} in
    "${_Retry}") print_heading
        continue
      ;;
    *) Repeat=0
      Countrykbd="${Result}"
    loadkeys ${Countrykbd} 2>> feliz.log
    echo
    read_timed "${_Keyboard_Set}: '$Countrykbd'" 1
  esac
done
}

setlocale() {
SearchPrompt=" (${_setlocale_SearchPrompt}): "
print_heading
PrintOne "${_setlocale1}"
PrintOne "${_setlocale2}"
PrintOne "${_setlocale3}"
InvalidEntry=1
while [ $InvalidEntry -eq 1 ]
do
  echo
  PrintOne "${_Enter_Code}"
  echo
  TPread "$SearchPrompt"
  print_heading
  if [ -z ${Response} ]
  then
    invalid_option
  else
    echo
    searchterm="${Response,,}"
    LocaleList=(`cat /etc/locale.gen | grep ${searchterm}....UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
    if [ ${#LocaleList[@]} -eq 0 ]
    then
      SEARCHTERM="${Response^^}"
      LocaleList=(`cat /etc/locale.gen | grep ${SEARCHTERM}.UTF-8 | sed 's/\..*$//' | sed  '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
    fi
    local Counter=0
    localelist=""
    for l in ${LocaleList[@]}
    do
      localelist="${localelist} $l"
      Counter=$((Counter+1))
    done
    if [ $Counter -eq 0 ]; then
      invalid_option
      continue
    fi
    PrintOne "${_Choose_Locale}: "
    echo
    listgen1 "${localelist}" "" "${_Try_again}"
    case $Result in
      "${_Try_again}") continue
      ;;
      *) CountryLocale="${Result}.UTF-8"
      CountryCode=(`echo ${Result} | cut -c4-6`)
      break
    esac
  fi
  print_heading
done
echo
read_timed "${_Locale_Set}: `echo $CountryLocale | cut -c1-5`" 1
}

SetTimeZone() {
Complete=0
SearchPrompt="${_SetTimeZone_Message1}"
while [ $Complete -eq 0 ]
do
  print_heading
  PrintOne "$SearchPrompt"
  PrintOne "${_SetTimeZone_Message2}."
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  echo
  zones=""
  for x in ${Zones[@]}
  do
    zones="$zones $x"
  done
  listgen1 "${zones}" "${_World_Zones}" "nodone"
  ZONE=$Result
  echo
  case $Result in
    "UTC") SUBZONE=""
        read_timed "Zone set to: '$ZONE'" 1
        Complete=1
    ;;
    *) SetSubZone
    read_timed "${_Zones}: '$ZONE/$SUBZONE'" 1
  esac
done
echo
}

SetSubZone() {
SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
while [ $Complete -eq 0 ]
do
  print_heading
  PrintOne "${_World_Zone} = $ZONE"
  echo
  PrintOne "${_City1}"
  TPread "${_City2}: "
  echo
  if [ -z ${Response} ]
  then
    invalid_option
    continue
  else
    Zone2="${Response^^}"
  fi
  subzones=""
  local Counter=0
  for x in ${SubZones[@]}
  do
    if [ `echo $x | cut -c1` = $Zone2 ]; then
      subzones="$subzones $x"
      Counter=$((Counter+1))
    fi
  done
  if [ ${Counter} -eq 0 ]; then
    invalid_option
    continue
  fi
  listgen1 "$subzones" "" "${_Try_again}"
  case $Result in
    "${_Try_again}") break
    ;;
    *) SUBZONE=$Result
  esac
  Complete=1
done
}

UserName() {
  print_heading
  PrintOne "${_UserName_Message1}."
  PrintOne "${_UserName_Message2}"
  PrintOne "${_UserName_Message3}"
  echo
  TPread "${_User_Name}: "
  Entered=${Response,,}
  case $Entered in
    "") UserName="archie"
    ;;
    *) UserName=${Entered}
  esac
  PrintOne "${_Will_Be_Created}   "
}

SetHostname() {
  Entered="arch-linux"
  print_heading
  PrintOne "${_SetHostName_Message1}"
  PrintOne "${_SetHostName_Message2}"
  PrintOne "${_SetHostName_Message3}."
  echo
  TPread "${_Enter_Hostname} : "
  Entered=${Response,,}
  case $Entered in
    "") HostName="arch-linux"
    ;;
    *) HostName=${Entered}
  esac
  PrintOne "${_Hostname} = $HostName"
}

PickLuxuries() { # User selects any combination from a store of extras
  local Complete=0
  print_heading
  case "$LuxuriesList" in
  "") PrintOne "${_PickLuxuries_Message1}"
     echo
    PrintOne "${_PickLuxuries_Message2}."
  ;;
  *) PrintOne "${_PickLuxuries_Message5}"
  esac
  echo
  while [ $Complete -eq 0 ]
  do
    listgen1 "${_Categories_List}" "${_Categories}" "${_Done}"
    Category=$Response
    if [ $Result = "${_Done}" ]; then
      break
    else
      ShoppingList
      print_heading
      PrintOne "${_PickLuxuries_Message3}: ${LuxuriesList}"
      echo
      PrintOne "${_PickLuxuries_Message4}"
      PrintOne "${_PickLuxuries_Message6}"
      echo
    fi
  done
  if [ -n "${LuxuriesList}" ]; then
    Scope="Full"
  else
    Scope="Basic"
  fi
}

KeepOrDelete() {
Bagged="$1"
Validated="N"
until [ $Validated = "Y" ]
do
  print_heading
  PrintOne "$Bagged ${_Already1}" # Display message and wait for input
  TPread "${_Already2} (1=${_Keep}/2=${Delete}): "
  case $Response in # Process response
    1) Validated="Y"
      Temp="$LuxuriesList"
    ;;
    2) Validated="Y"
      Temp=""
      for lux in $LuxuriesList
      do
        if [ ${lux} != ${Bagged} ]; then
          Temp="$Temp $lux"
        fi
      done
    ;;
    *) invalid_option
  esac
done
LuxuriesList="$Temp"
}

ShoppingList() {
# Called by PickLuxuries after a category has been chosen.
local Complete=0
Passed="${_Choose_First}"
while [ $Complete -eq 0 ]
do
  print_heading
  PrintOne "${_Addedsofar}: ${LuxuriesList}"
  echo

  # $Category passed here is number of item in _Categories_List
  local Count=1
  for i in ${_Categories_List[@]}
  do
    if [ $Count -eq $Category ]; then
      break # Get the category name by item number
      (( Count+=1 ))
    fi
  done
  Headline=${i}
  # Pass category to listgen2 for user to choose one item;
  local Counter=1
  case $Category in
    1) for i in ${Accessories}
        do
          LongAccs1[${Counter}]="$i - ${LongAccs[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Accessories" "${Headline}" "" "LongAccs1"
    ;;
    2)  for i in ${Desktops}
        do
          LongDesk1[${Counter}]="$i - ${LongDesk[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Desktops" "${Headline}" "" "LongDesk1"
    ;;
    3) for i in ${Graphical}
        do
          LongGraph1[${Counter}]="$i - ${LongGraph[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Graphical" "${Headline}" "" "LongGraph1"
    ;;
    4) for i in ${Internet}
        do
          LongNet1[${Counter}]="$i - ${LongNet[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Internet" "${Headline}" "" "LongNet1"
    ;;
    5) for i in ${Multimedia}
        do
          LongMulti1[${Counter}]="$i - ${LongMulti[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Multimedia" "${Headline}" "" "LongMulti1"
    ;;
    6) for i in ${Office}
        do
          LongOffice1[${Counter}]="$i - ${LongOffice[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Office" "${Headline}" "" "LongOffice1"
    ;;
    7) for i in ${Programming}
        do
          LongProg1[${Counter}]="$i - ${LongProg[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Programming" "${Headline}" "" "LongProg1"
    ;;
    8) for i in ${WindowManagers}
        do
          LongWMs1[${Counter}]="$i - ${LongWMs[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$WindowManagers" "${Headline}" "" "LongWMs1"
    ;;
    *) break
  esac
  Passed="${_Choose_Next}" # Loop until user selects "Done"
  if [ $Result = "${_Done}" ]; then
    break
  fi
  AddToList="Y"
  # First check that chosen item is not already on the list
  for lux in $LuxuriesList
  do
    if [ ${lux} = ${Result} ]; then
      KeepOrDelete "$Result" # New function
      Result=""
      continue
    fi
  done
  # Then carry out any specific tests and add the item to the list
  SaveResult=$Result # (Because other subroutines return $Result)
  if [ ${SaveResult} = "libreoffice" ]; then
    LuxuriesList="${LuxuriesList} libreoffice-fresh"
    continue
  fi
  case $SaveResult in
    "Cinnamon") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Deepin") DesktopEnvironment="Deepin"
           AddDEextras "deepin-extra"
        case $Response in
          0) DDEextras="deepin-extra"
           ;;
          *) DDEextras=""
        esac
      ;;
    "Enlightenment") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Feliz") DesktopEnvironment=$SaveResult
          FelizXfce="Yes"
        GoodiesXfce="xfce4-goodies"
        ChooseDM
      ;;
    "Fluxbox") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Gnome") DesktopEnvironment=$SaveResult
        GoodiesGnome=""
      ;;
    "JWM") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "KDE") DesktopEnvironment=$SaveResult
      ;;
    "LXDE") DesktopEnvironment=$SaveResult
      ;;
    "LXQt") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Mate") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Openbox") DesktopEnvironment=$SaveResult
        AddDEextras "tint2"
        case $Response in
          "Y" | "y") GoodiesOpenbox="tint2"
          ;;
         *) GoodiesOpenbox=""
        esac
        ChooseDM
      ;;
    "Xfce") DesktopEnvironment=$SaveResult
         AddDEextras "xfce4-goodies"
         case $Response in
            "Y" | "y") GoodiesXfce="xfce4-goodies"
           ;;
           *) GoodiesXfce=""
         esac
         ChooseDM
      ;;
      "") continue
      ;;
     *) echo
    esac
    LuxuriesList="${LuxuriesList} ${SaveResult}"
done
Passed=""
}

ChooseDM() { # Choose a display manager unless already fixed by certain DEs
  if [ -z $DisplayManager ]; then
    Counter=0
    Greeter=""
    DMList="GDM LightDM LXDM sddm SLIM XDM"
    print_heading
    PrintOne "${_ChooseDM_Message1}"
    PrintOne "${_ChooseDM_Message2}"
    PrintOne "${_ChooseDM_Message3}"
    PrintOne "${_ChooseDM_Message4}"
    PrintOne "${_ChooseDM_Message5}"
    echo
    listgen1 "${DMList}" "${_ChooseDM_Greeter}" "None"
    Reply=$Response
    for item in ${DMList}
    do
      Counter=$((Counter+1))
      if [ $Counter -eq $Reply ]
      then
        SelectedDM=$item
        case $SelectedDM in
          "GDM") DisplayManager="gdm"
            ;;
          "LightDM") DisplayManager="lightdm"
                Greeter="lightdm-gtk-greeter"
            ;;
          "LXDM") DisplayManager="lxdm"
            ;;
          "sddm") DisplayManager="sddm"
            ;;
          "SLIM") DisplayManager="slim"
            ;;
          "XDM") DisplayManager="xdm"
            ;;
          *) DisplayManager=""
        esac
        break
      fi
    done
  fi
}

AddDEextras() {
 local Extras="$1"
 print_heading
 echo
 case $DesktopEnvironment in
  "Deepin") PrintOne "${_Deepin1}"
    PrintOne "${_Deepin2}"
    echo
    ;;
  "Openbox") PrintOne "${_Tint1}"
    PrintOne "${_Tint2}"
    echo
    ;;
  "Xfce") PrintOne "${_Xfce4_Goodies0}"
    PrintOne "${_Xfce4_Goodies1}"
    echo
    ;;
  *) echo
 esac
 TPread "${_ShoppingList_Extras}: "
}

FinalCheck() {
Repeat=1
while [ $Repeat -gt 0 ]
do
  print_heading
  PrintOne "${_FinalCheck_Message1} ..."
  echo
  PrintOne "1)  `echo ${_FinalCheck_Options} | awk '{print $1}'` ${_partition} ... $RootPartition : $RootType" 50
  if [ $SwapPartition ] || [ $SwapFile ]; then
    PrintMany "2)  `echo ${_FinalCheck_Options} | awk '{print $2}'` partition ... $SwapPartition $SwapFile"
  else
    PrintMany "2)  ${_No_Swap}"
  fi
  if [ ${#AddPartList[@]} ]; then
    Counter=0
    PrintMany "3)  `echo ${_FinalCheck_Options} | awk '{print $3}'` ${_partition} ..."
    for i in ${AddPartList[@]}
    do
      PrintMany "     ${AddPartMount[$Counter]} : ${AddPartList[$Counter]} : ${AddPartType[$Counter]}" 50
      Counter=$((Counter+1))
    done
  else
    PrintMany "3)  ${_No_Partitions}"
  fi
  case $Kernel in
    1) PrintMany "4)  ${_LTS_Kernel}"
    ;;
    *) PrintMany "4)  ${_Latest_Kernel}"
  esac
  if [ $GrubDevice ]; then
  PrintMany "5)  ${_Grub_Install} $GrubDevice" 50
  else
    PrintMany "5)  ${_No_Grub}"
  fi
  PrintMany "6)  ${_Keyboard_is} $Countrykbd"
  PrintMany "7)  ${_Locale_is} $CountryLocale"
  PrintMany "8)  ${_Zones} $ZONE/$SUBZONE"
  case ${IsInVbox} in
    "VirtualBox") PrintMany "9)  ${_Virtualbox_On}"
    ;;
    *) PrintMany "9)  ${_Virtualbox_Off}"
  esac
  if [ -z $DisplayManager ]; then
    PrintMany "10)  ${_No_Display_Manager}"
  else
    PrintMany "10)  ${_Display_Manager} = $DisplayManager"
  fi
  PrintMany "11)  ${_Root_and_User} ..."
  PrintMany "     ${_Hostname} = '$HostName'"
  PrintMany "     ${_User} = '$UserName'"
  PrintMany "12) ${_Extra_Items} ..."
  PrintOne "${LuxuriesList}"
  echo
  PrintOne "${_FinalCheck_Message3}"
  TPread "${_FinalCheck_Message4}: "
  Change=$Response
  case $Change in
    1) ChangeRootPartition
        AllocateRoot
    ;;
    2) ChangeSwapPartition
        AllocateSwap
    ;;
    3) ChangePartitions
        MorePartitions
    ;;
    4) SetKernel
    ;;
    5) SetGrubDevice
    ;;
    6) getkeymap
    ;;
    7) setlocale
    ;;
    8) SetTimeZone
    ;;
    9) ConfirmVbox
    ;;
    10) DisplayManager=""
      ChooseDM
    ;;
    11) ManualSettings
    ;;
    12) PickLuxuries
    ;;
    *) Repeat=0
  esac
done
}

ManualSettings() {
  Retry="Y"
  Response=3
  while [ $Retry = "Y" ]
  do
    print_heading
    PrintOne "${_ManualSettings_Message0}:"
    echo
    PrintOne "1) ${_Hostname} (currently $HostName)"
    PrintMany "2) ${_User} (currently $UserName)"
    echo
    TPread "${_Number_of_selection} : "
    echo
    case $Response in
      1) TPread "${_Enter_new} ${_Hostname} (currently $HostName) : "
         HostName=$Response
        ;;
      2) TPread "${_Enter_new} ${_Name_for_user} (currently $UserName) : "
         UserName=$Response
        ;;
      *) Retry="N"
         break
    esac
  done
}
