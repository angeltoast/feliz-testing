#!/bin/bash

# felizdesktop - Functions relevant to users, locations, desktop
# settings and data review called by the main feliz script

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# ---------------     -----------------------
# Function   Line     Function           Line
# ---------------     -----------------------
# Keymap        20      Display Managers    428
# Locale        59      FinalCheck          549
# Timezone     122      ManualSettings      640
# Subzone      161      ChangeRootPartition 666
# Username     235      ChangeSwapPartition 674
# Hostname     251      ChangePartitions    682
# PickLuxuries 216      AddExtras           694    

getkeymap() {
print_heading
echo
PrintOne "Now let's try to find your keyboard."
Repeat=1
while [ $Repeat -eq 1 ]
do
  echo
  PrintOne "If you know the code for your keyboard layout, enter"
  PrintOne "it now. If not, try entering an abbreviation for your"
  PrintOne "country or language and a list will be displayed ..."
  echo
  TPread "(eg: 'atari' or 'us'): "
  local Term="${Response,,}"
  echo
  # ListKbs=`localectl list-keymaps | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'` # This line failed following change in Arch, so the following line has been substituted
  ListKbs=`cat keymaps.list | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`
  case ${ListKbs} in
    "") print_heading
      echo
      PrintOne "No keyboards found containing '$Term'"
      PrintOne "Try again"
      continue
      ;;
    *) listgen1 "$ListKbs" "Keyboards" "Retry"
  esac
  case ${Result} in
    "Retry") print_heading
        continue
      ;;
    *) Repeat=0
      Countrykbd="${Result}"
    loadkeys ${Countrykbd} 2>> feliz.log
    echo
    read_timed "The keyboard is now set to: '$Countrykbd'" 1
  esac
done
}

setlocale() {
SearchPrompt=" (for example: GB or en): "
print_heading
PrintOne "Next we will try to find your locale"
PrintOne "This will be used to find the best mirrors"
PrintOne "for downloading your system"
InvalidEntry=1
while [ $InvalidEntry -eq 1 ]
do
  echo
  PrintOne "Please enter a two-letter code for your country or language."
  echo
  TPread "$SearchPrompt"
  print_heading
  if [ -z ${Response} ]
  then
    invalid_option
  else
    echo
    searchterm="${Response,,}"
    LocaleList=(`cat /etc/locale.gen | grep ${searchterm}....UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
    if [ ${#LocaleList[@]} -eq 0 ]
    then
      SEARCHTERM="${Response^^}"
      LocaleList=(`cat /etc/locale.gen | grep ${SEARCHTERM}.UTF-8 | sed 's/\..*$//' | sed  '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
    fi
    local Counter=0
    localelist=""
    for l in ${LocaleList[@]}
    do
      localelist="${localelist} $l"
      Counter=$((Counter+1))
    done
    if [ $Counter -eq 0 ]; then
      invalid_option
      continue
    fi
    PrintOne "Choose your locale from this list, or 'Try_Again': "
    echo
    listgen1 "${localelist}" "" "Try_Again"
    case $Result in
      "Try_Again") continue
      ;;
      *) CountryLocale="${Result}.UTF-8"
      CountryCode=(`echo ${Result} | cut -c4-6`)
      break
    esac
  fi
  print_heading
done
echo
read_timed "Locale is set to: `echo $CountryLocale | cut -c1-5`" 1
}

SetTimeZone() {
Complete=0
SearchPrompt="To set the system clock, please first"
while [ $Complete -eq 0 ]
do
  print_heading
  PrintOne "$SearchPrompt"
  PrintOne "choose the World Zone of your location."
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  echo
  zones=""
  for x in ${Zones[@]}
  do
    zones="$zones $x"
  done
  listgen1 "${zones}" "Zones" "nodone"
  ZONE=$Result
  echo
  case $Result in
    "UTC") SUBZONE=""
        read_timed "Zone set to: '$ZONE'" 1
        Complete=1
    ;;
    *) SetSubZone
    read_timed "Zone and Subzone set to: '$ZONE/$SUBZONE'" 1
  esac
done
echo
}

SetSubZone() {
SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
while [ $Complete -eq 0 ]
do
  print_heading
  PrintOne "World zone = $ZONE"
  echo
  PrintOne "Please enter the first letter"
  TPread "of your nearest major city: "
  echo
  if [ -z ${Response} ]
  then
    invalid_option
    continue
  else
    Zone2="${Response^^}"
  fi
  subzones=""
  local Counter=0
  for x in ${SubZones[@]}
  do
    if [ `echo $x | cut -c1` = $Zone2 ]; then
      subzones="$subzones $x"
      Counter=$((Counter+1))
    fi
  done
  if [ ${Counter} -eq 0 ]; then
    invalid_option
    continue
  fi
  listgen1 "$subzones" "" "Try_Again"
  case $Result in
    "Try_Again") break
    ;;
    *) SUBZONE=$Result
  esac
  Complete=1
done
}

UserName() {
	print_heading
	PrintOne "Enter a name for the primary user of the new system."
  PrintOne "If you don't create a username here, a default user called"
  PrintOne "'archie' will be set up"
  echo
	TPread "Enter a username: "
  Entered=${Response,,}
	case $Entered in
		"") UserName="archie"
		;;
		*) UserName=${Entered}
	esac
	PrintOne "$UserName will be created   "
}

SetHostname() {
	Entered="arch-linux"
	print_heading
	PrintOne "A hostname is needed. This will be a unique name to identify"
	PrintOne "your device on a network. If you do not enter one, the"
	PrintOne "default hostname of 'arch-linux' will be used."
  echo
	TPread "Enter a hostname for your computer : "
  Entered=${Response,,}
	case $Entered in
		"") HostName="arch-linux"
		;;
		*) HostName=${Entered}
	esac
	PrintOne "Hostname set to: $HostName"
}

PickLuxuries() { # User selects any combination from a store of extras
  local Complete=0
  print_heading
  case "$LuxuriesList" in
  "") PrintOne "Now you have the option to add 'extras' such as a web"
    PrintOne "browser, desktop environment, office software, etc."
    PrintOne "Yaourt is also available as an option, in 'Accessories'"
    echo
    PrintOne "If you want only a base Arch installation, exit without choosing any extras."
  ;;
  *) PrintOne "You can add more items to your list,"
    PrintOne "or delete those you don't want."
  esac
  echo
  while [ $Complete -eq 0 ]
  do
    listgen1 "$Categories" "Categories" "Done"
    Category=$Response
    if [ $Result = "Done" ]; then
      break
    else
      ShoppingList
      print_heading
      PrintOne "Added so far: ${LuxuriesList}"
      echo
      PrintOne "You can now choose from any of the other lists,"
      PrintOne "or choose 'Done' to finish this part of the setup"
      echo
    fi
  done
  if [ -n "${LuxuriesList}" ]; then
    Scope="Full"
  else
    Scope="Basic"  
  fi
}

KeepOrDelete() {
Bagged="$1"
# 1) Display message and wait for input
Validated="N"
until [ $Validated = "Y" ]
do
  print_heading
  PrintOne "$Bagged is already in your shopping list"
  TPread "Do you wish to delete it or keep it? (d/k): "
# 2) Process
  case $Response in
    "k"|"K") Validated="Y"
      Temp="$LuxuriesList"
    ;;
    "d"|"D") Validated="Y"
      Temp=""
      for lux in $LuxuriesList
      do
        if [ ${lux} != ${Bagged} ]; then
          Temp="$Temp $lux"
        fi
      done
    ;;
    *) invalid_option
  esac
done 
LuxuriesList="$Temp"
}

ShoppingList() {
# Called by PickLuxuries after a category has been chosen.
local Complete=0
Passed="Choose your first item"
while [ $Complete -eq 0 ]
do
  print_heading
  PrintOne "Added so far: ${LuxuriesList}"
  echo
  # Pass category to listgen2 for user to choose one item;
  local Counter=1
  case $Category in
    1) for i in ${Accessories}
        do
          LongAccs1[${Counter}]="$i - ${LongAccs[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Accessories" "Accessories" "" "LongAccs1"
    ;;
    2)  for i in ${Desktops}
        do
          LongDesk1[${Counter}]="$i - ${LongDesk[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Desktops" "Desktops" "" "LongDesk1"
    ;;
    3) for i in ${Graphical}
        do
          LongGraph1[${Counter}]="$i - ${LongGraph[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Graphical" "Graphical" "" "LongGraph1"
    ;;
    4) for i in ${Internet}
        do
          LongNet1[${Counter}]="$i - ${LongNet[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Internet" "Internet" "" "LongNet1"
    ;;
    5) for i in ${Multimedia}
        do
          LongMulti1[${Counter}]="$i - ${LongMulti[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Multimedia" "Multimedia" "" "LongMulti1"
    ;;
    6) for i in ${Office}
        do
          LongOffice1[${Counter}]="$i - ${LongOffice[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Office" "Office" "" "LongOffice1"
    ;;
    7) for i in ${Programming}
        do
          LongProg1[${Counter}]="$i - ${LongProg[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$Programming" "Programming" "" "LongProg1"
    ;;
    8) for i in ${WindowManagers}
        do
          LongWMs1[${Counter}]="$i - ${LongWMs[${Counter}]}"
          (( Counter+=1 ))
        done
        listgen2 "$WindowManagers" "Window_Managers" "" "LongWMs1"
    ;;
    *) break
  esac
  Passed="Choose your next item" # Loop until user selects "Done" 
  if [ $Result = "Done" ]; then
    break
  fi
  AddToList="Y"
  # First check that chosen item is not already on the list
  for lux in $LuxuriesList
  do
    if [ ${lux} = ${Result} ]; then
      KeepOrDelete "$Result" # New function
      Result=""
      continue
    fi
  done
  # Then carry out any specific tests and add the item to the list
  SaveResult=$Result # (Because other subroutines return $Result)
  if [ ${SaveResult} = "libreoffice" ]; then
    LuxuriesList="${LuxuriesList} libreoffice-fresh"
    continue
  fi
  case $SaveResult in
    "Cinnamon") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Deepin") DesktopEnvironment="Deepin"
           AddDEextras "deepin-extra"
        case $Response in
          0) DDEextras="deepin-extra"
           ;;
          *) DDEextras=""
        esac
      ;;
    "Enlightenment") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Feliz") DesktopEnvironment=$SaveResult
          FelizXfce="Yes"
        GoodiesXfce="xfce4-goodies"
        ChooseDM
      ;;
    "Fluxbox") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Gnome") DesktopEnvironment=$SaveResult
        GnomeOptions
      ;;
    "JWM") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "KDE") DesktopEnvironment=$SaveResult
      ;;
    "LXDE") DesktopEnvironment=$SaveResult
      ;;
    "LXQt") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Mate") DesktopEnvironment=$SaveResult
        ChooseDM
      ;;
    "Openbox") DesktopEnvironment=$SaveResult
        AddDEextras "tint2"
        case $Response in
          "Y" | "y") GoodiesOpenbox="tint2"
          ;;
         *) GoodiesOpenbox=""
        esac
        ChooseDM
      ;;
    "Xfce") DesktopEnvironment=$SaveResult
         AddDEextras "xfce4-goodies"
         case $Response in
            "Y" | "y") GoodiesXfce="xfce4-goodies"
           ;;
           *) GoodiesXfce=""
         esac
         ChooseDM
      ;;
      "") continue
      ;;
     *) echo	
 		esac
    LuxuriesList="${LuxuriesList} ${SaveResult}"
done
Passed=""
}

ChooseDM() { # Choose a display manager unless already fixed by certain DEs
  if [ -z $DisplayManager ]; then
    Counter=0
    Greeter=""
    DMList="GDM LightDM LXDM sddm SLIM XDM"
    print_heading
    PrintOne "You can choose one of the following display managers."
    PrintOne "Be aware that not all display managers work equally well"
    PrintOne "with all desktop environments. If in doubt, choose LightDM."
    PrintOne "If you do not install a display manager, you will have"
    PrintOne "to launch your desktop environment manually."
    echo
    listgen1 "${DMList}" "Display-Managers" "None"
    Reply=$Response
    for item in ${DMList}
    do
      Counter=$((Counter+1))
      if [ $Counter -eq $Reply ]
      then
        SelectedDM=$item
        case $SelectedDM in
          "GDM") DisplayManager="gdm"
            ;;
          "LightDM") DisplayManager="lightdm"
                Greeter="lightdm-gtk-greeter"	
            ;;
          "LXDM") DisplayManager="lxdm"
            ;;
          "sddm") DisplayManager="sddm"
            ;;
          "SLIM") DisplayManager="slim"
            ;;
          "XDM") DisplayManager="xdm"
            ;;
          *) DisplayManager=""
        esac	
        break
      fi
    done
  fi
}

GnomeOptions() {
Redo="Y"
GoodiesGnome=""
while [ $Redo = "Y" ]
do
  print_heading
  PrintOne "'Gnome with extras' adds a text editor, disk"
  PrintOne "manager, archive manager and a set of games"
  PrintOne "If in doubt, choose '2) Standard Gnome'"
  echo
  PrintOne "1) Minimal Gnome (gnome-shell)"
  PrintMany "2) Standard Gnome"
  PrintMany "3) Gnome with extras"
  echo
  TPread "Enter the number of your selection : "
  echo
  case $Response in
    1) DesktopEnvironment="gnome-shell"
      Redo="N"
    ;;
    2) Redo="N"
    ;;
    3) GoodiesGnome="gnome-extra"
      Redo="N"
    ;;
    *) invalid_option
  esac
done
}

AddDEextras() {
 local Extras="$1"
 print_heading
 echo
 case $DesktopEnvironment in
  "Deepin") PrintOne "The deepin-extras pack includes includes the Deepin game "
    PrintOne "center, media players, terminal & screenshot tools"
    echo
    ;;
  "Openbox") PrintOne "tint2 is a system panel/taskbar that can be configured"
    PrintOne "to include a system tray, task list, battery monitor, clock, etc."
    echo
    ;;
  "Xfce") PrintOne "The xfce4-goodies pack includes includes the Whisker menu,"
    PrintOne "extra plugins and a number of utilities such as the mousepad editor"
    echo
    ;;
  *) echo
 esac
 TPread "Include the $Extras pack? [y/n] : "
}

LibreVersion() {
Redo="Y"
Response="1"
while [ $Redo = "Y" ]
do
  print_heading
  PrintOne "LibreOffice was recently updated to version 5, but"
  PrintOne "some people still prefer the older version. So feliz"
  PrintOne "gives you the option to choose."
  echo
  PrintOne "Version 5 (also called libreoffice-fresh)"
  PrintMany "Version 4 (now known as libreoffice-still)"
  echo
  TPread "Enter the version number you prefer (5 or 4) : "
  echo
  case $Response in
    "5" | "4") Redo="N"
    ;;
    *) invalid_option
  esac
done
}

FinalCheck() {
Repeat=1
while [ $Repeat -gt 0 ]
do
  print_heading
  PrintOne "These are the settings you have entered. Please check them ..."
  echo
  PrintOne "1)  Root partition ... $RootPartition : $RootType" 50
  if [ $SwapPartition ] || [ $SwapFile ]; then
    PrintMany "2)  Swap partition ... $SwapPartition $SwapFile"
  else
    PrintMany "2)  No provision has been made for swap"
  fi
  if [ ${#AddPartList[@]} ]; then
    Counter=0
    PrintMany "3)  Extra partitions ..."
    for i in ${AddPartList[@]}
    do
      PrintMany "     ${AddPartMount[$Counter]} : ${AddPartList[$Counter]} : ${AddPartType[$Counter]}" 50
      Counter=$((Counter+1))
    done
  else
    PrintMany "3)  No additional partitions have been allocated"
  fi
  case $Kernel in
    1) PrintMany "4)  The LTS kernel will be installed"
    ;;
    *) PrintMany "4)  The latest kernel will be installed"
  esac
  if [ $GrubDevice ]; then
  PrintMany "5)  Grub will be installed to $GrubDevice" 50
  else
    PrintMany "5)  No provision has been made for Grub"
  fi
  PrintMany "6)  Keyboard is $Countrykbd"
  PrintMany "7)  Locale will be set to $CountryLocale"
  PrintMany "8)  Zone/subZone will be $ZONE/$SUBZONE"
  case ${IsInVbox} in
    "VirtualBox") PrintMany "9)  Virtualbox guest utilities will be installed"
    ;;
    *) PrintMany "9)  Virtualbox guest utilities will not be installed"
  esac
  if [ -z $DisplayManager ]; then
    PrintMany "10)  No Display Manager selected"
  else
    PrintMany "10)  Display Manager = $DisplayManager"
  fi
  PrintMany "11)  Root and user settings ..."
  PrintMany "     Hostname = '$HostName'"
  PrintMany "     User = '$UserName'"
  PrintMany "12) The following extras have been selected ..."
  PrintOne "${LuxuriesList}"
  echo
  PrintOne "Press [Enter] to install with these settings, or"
  TPread "enter an item number if you wish to change it: "
  Change=$Response
  case $Change in
    1) ChangeRootPartition
        AllocateRoot
    ;;
    2) ChangeSwapPartition
        AllocateSwap
    ;;
    3) ChangePartitions
        MorePartitions
    ;;
    4) SetKernel
    ;;
    5) SetGrubDevice
    ;;
    6) getkeymap
    ;;
    7) setlocale
    ;;
    8) SetTimeZone
    ;;
    9) ConfirmVbox
    ;;
    10) DisplayManager=""
      ChooseDM
    ;;
    11) ManualSettings
    ;;
    12) PickLuxuries
    ;;
    *) Repeat=0
  esac
done
}

ManualSettings() {
  Retry="Y"
  Response=3
  while [ $Retry = "Y" ]
  do
    print_heading
    PrintOne "Enter number for data to change, or [Enter] to finish:"
    echo
    PrintOne "1) Hostname (currently $HostName)"
    PrintMany "2) Username (currently $UserName)"
    echo
    TPread "Enter the number of your selection : "
    echo
    case $Response in
      1) TPread "Enter new Hostname (currently $HostName) : "
         HostName=$Response
        ;;
      2) TPread "Enter new username to be created (currently $UserName) : "
         UserName=$Response
        ;;
      *) Retry="N"
         break
    esac
  done
}
