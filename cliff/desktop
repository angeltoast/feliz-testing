#!/bin/bash

# The Feliz installation scripts for Arch Linux
# 12 June 2016

# /cliff/desktop
# CLI functions relevant to users, settings, extra applications and review

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# -----------------   -----------------------
# Function     Line   Function           Line
# -----------------   -----------------------
# getkeymap      25
# setocale       63    KeepOrDelete       255
# SetTimeZone   117    ShoppingList       283
# SetSubZone    148    ChooseDM           441
# Username      188    AddDEextras        483
# Hostname      204    FinalCheck         513
# PickLuxuries  220    ManualSettings     604

getkeymap() {
  print_heading
  echo
  PrintOne "Let's try to find your keyboard"
  Repeat=1
  while [ $Repeat -eq 1 ]
  do
    echo
    PrintOne "If you know the code for your keyboard layout, enter"
    PrintOne "it now. If not, try entering an abbreviation for your"
    PrintOne "country or language and a list will be displayed ..."
    echo
    TPread "(eg: 'atari' or 'us'): "
    local Term="${Response,,}"
    echo
    ListKbs=`cat keymaps.list | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`
    case ${ListKbs} in
      "") print_heading
        echo
        PrintOne "No keyboards found containing '$Term'"
        PrintOne "Try again"
        continue
        ;;
      *) listgen1 "$ListKbs" "Keyboards" "Retry"
    esac
    case ${Result} in
    "Retry") print_heading
      continue
      ;;
    *) Repeat=0
      Countrykbd="${Result}"
      loadkeys ${Countrykbd} 2>> feliz.log
    esac
  done
  print_heading
  read_timed "The keyboard is now set to: '$Countrykbd'" 1
}

setlocale() {
  SearchPrompt=" (for example: GB or en): "
  print_heading
  PrintOne "Next we will try to find your locale. This will"
  PrintOne "be used to set fonts and language, and to find"
  PrintOne "the best mirrors for downloading your system"
  InvalidEntry=1
  while [ $InvalidEntry -eq 1 ]
  do
    echo
    PrintOne "Please enter a two-letter code for your country or language."
    echo
    TPread "$SearchPrompt"
    print_heading
    if [ -z ${Response} ]
    then
      invalid_option
      print_heading
    else
      echo
      searchterm="${Response,,}"
      LocaleList=(`cat /etc/locale.gen | grep ${searchterm}....UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
      if [ ${#LocaleList[@]} -eq 0 ]
      then
        SEARCHTERM="${Response^^}"
        LocaleList=(`cat /etc/locale.gen | grep ${SEARCHTERM}.UTF-8 | sed 's/\..*$//' | sed  '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
      fi
      local Counter=0
      localelist=""
      for l in ${LocaleList[@]}
      do
        localelist="${localelist} $l"
        Counter=$((Counter+1))
      done
      if [ $Counter -eq 0 ]; then
        invalid_option
        print_heading
        continue
      fi
      PrintOne "Choose your locale from this list, or 'Try_Again': "
      echo
      listgen1 "${localelist}" "" "Try_again}"
      case $Result in
        "Try_again") continue
        ;;
        *) CountryLocale="${Result}.UTF-8"
        CountryCode=(`echo ${Result} | cut -c4-6`)
        break
      esac
    fi
    print_heading
  done
  print_heading
  read_timed "Locale is set to: `echo $CountryLocale | cut -c1-5`" 1
}

SetTimeZone() {
Complete=0
while [ $Complete -eq 0 ]
do
  print_heading
  PrintOne "To set the system clock, please first"
  PrintOne "choose the World Zone of your location."
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  echo
  zones=""
  for x in ${Zones[@]}
  do
    zones="$zones $x"
  done
  listgen1 "${zones}" "World_Zones" "nodone"
  ZONE=$Result
  echo
  case $Result in
    "UTC") SUBZONE=""
        print_heading
        read_timed "Zone set to: '$ZONE'" 1
        Complete=1
    ;;
    *) SetSubZone
    print_heading
    read_timed "Zone and Subzone set to: '$ZONE/$SUBZONE'" 1
  esac
done
echo
}

SetSubZone() {
SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
while [ $Complete -eq 0 ]
do
  print_heading
  PrintOne "World Zone = $ZONE"
  echo
  PrintOne "Please enter the first letter"
  TPread "of your nearest major city: "
  echo
  if [ -z ${Response} ]
  then
    invalid_option
    continue
  else
    Zone2="${Response^^}"
  fi
  subzones=""
  local Counter=0
  for x in ${SubZones[@]}
  do
    if [ `echo $x | cut -c1` = $Zone2 ]; then
      subzones="$subzones $x"
      Counter=$((Counter+1))
    fi
  done
  if [ ${Counter} -eq 0 ]; then
    invalid_option
    continue
  fi
  listgen1 "$subzones" "" "Try_again"
  case $Result in
    "Try_again") break
    ;;
    *) SUBZONE=$Result
  esac
  Complete=1
done
}

UserName() {
  print_heading
  PrintOne "Enter a name for the primary user of the new system."
  PrintOne "If you don't create a username here, a default user"
  PrintOne "called 'archie' will be set up"
  echo
  TPread "User Name: "
  Entered=${Response,,}
  case $Entered in
    "") UserName="archie"
    ;;
    *) UserName=${Entered}
  esac
  PrintOne "User '${UserName}' will be created."
}

SetHostname() {
  Entered="arch-linux"
  print_heading
  PrintOne "A hostname is needed. This will be a unique name to identify"
  PrintOne "your device on a network. If you do not enter one, the"
  PrintOne "default hostname of 'arch-linux' will be used."
  echo
  TPread "Enter a hostname for your computer: "
  Entered=${Response,,}
  case $Entered in
    "") HostName="arch-linux"
    ;;
    *) HostName=${Entered}
  esac
  PrintOne "Hostname = $HostName"
}

PickLuxuries() { # User selects any combination from a store of extras
  CategoriesList="Accessories Desktop_Environments Graphical Internet Multimedia Office Programming Window_Managers"
  local Complete=0
  print_heading
  case "$LuxuriesList" in
  "") PrintOne "Now you have the option to add extras, such as a web browser, etc"
     echo
    PrintOne "If you want only a base Arch installation, exit without choosing any extras."
  ;;
  *) PrintOne "You can add more items, or select items to delete."
  esac
  echo
  while [ $Complete -eq 0 ]
  do
    listgen1 "${CategoriesList}" "Categories" "Done"
    Category=$Response
    if [ $Result = "Done" ]; then
      break
    else
      ShoppingList
      print_heading
      PrintOne "Added so far:: ${LuxuriesList}"
      echo
      PrintOne "You can now choose from any of the other lists,"
      PrintOne "or choose <Done> to finish this part of the setup"
      echo
    fi
  done
  if [ -n "${LuxuriesList}" ]; then
    Scope="Full"
  else
    Scope="Basic"
  fi
}

KeepOrDelete() {
Bagged="$1"
Validated="N"
until [ $Validated = "Y" ]
do
  print_heading
  Message="$Bagged is already in your shopping list.\n"
  listgen1 "Keep Delete" "$Bagged" "nodone"
  case $Response in
    1) Validated="Y"
      Temp="$LuxuriesList"
    ;;
    2) Validated="Y"
      Temp=""
      for lux in $LuxuriesList
      do
        if [ ${lux} != ${Bagged} ]; then
          Temp="$Temp $lux"
        fi
      done
    ;;
    *) invalid_option
  esac
done
LuxuriesList="$Temp"
}

ShoppingList() { # Called by PickLuxuries after a category has been chosen.
  local Complete=0
  Passed="Choose your first item"
  while [ $Complete -eq 0 ]
  do
    print_heading
    PrintOne "Added so far: ${LuxuriesList}"
    echo
     # $Category passed here is number of item in CategoriesList
    Headline=${Categories[$Category]}
    # Pass category to listgen2 for user to choose one item;
    local Counter=1
    case $Category in
       1) for i in ${Accessories}
          do
           LongAccs1[${Counter}]="$i - ${LongAccs[${Counter}]}"
           (( Counter+=1 ))
          done
         listgen2 "$Accessories" "${Headline}" "" "LongAccs1"
       ;;
       2) for i in ${Desktops}
          do
           LongDesk1[${Counter}]="$i - ${LongDesk[${Counter}]}"
           (( Counter+=1 ))
          done
         listgen2 "$Desktops" "${Headline}" "" "LongDesk1"
       ;;
       3) for i in ${Graphical}
          do
            LongGraph1[${Counter}]="$i - ${LongGraph[${Counter}]}"
           (( Counter+=1 ))
          done
           listgen2 "$Graphical" "${Headline}" "" "LongGraph1"
       ;;
       4) for i in ${Internet}
          do
           LongNet1[${Counter}]="$i - ${LongNet[${Counter}]}"
            (( Counter+=1 ))
         done
         listgen2 "$Internet" "${Headline}" "" "LongNet1"
       ;;
       5) for i in ${Multimedia}
          do
            LongMulti1[${Counter}]="$i - ${LongMulti[${Counter}]}"
            (( Counter+=1 ))
          done
          listgen2 "$Multimedia" "${Headline}" "" "LongMulti1"
       ;;
       6) for i in ${Office}
          do
            LongOffice1[${Counter}]="$i - ${LongOffice[${Counter}]}"
            (( Counter+=1 ))
          done
          listgen2 "$Office" "${Headline}" "" "LongOffice1"
       ;;
       7) for i in ${Programming}
          do
            LongProg1[${Counter}]="$i - ${LongProg[${Counter}]}"
            (( Counter+=1 ))
          done
          listgen2 "$Programming" "${Headline}" "" "LongProg1"
       ;;
       8) for i in ${WindowManagers}
          do
            LongWMs1[${Counter}]="$i - ${LongWMs[${Counter}]}"
            (( Counter+=1 ))
          done
          listgen2 "$WindowManagers" "${Headline}" "" "LongWMs1"
      ;;
      *) break
    esac
    Passed="Choose your next item" # Loop until user selects "Done"
    if [ $Result = "Done" ]; then
      break
    fi
    AddToList="Y"
    # First check that chosen item is not already on the list
    for lux in $LuxuriesList
    do
      if [ ${lux} = ${Result} ]; then
        KeepOrDelete "$Result" # New function
        Result=""
        continue
      fi
    done
    # Then carry out any specific tests and add the item to the list
    SaveResult=$Result # (Because other subroutines return $Result)
    if [ ${SaveResult} = "libreoffice" ]; then
      LuxuriesList="${LuxuriesList} libreoffice-fresh"
      continue
    fi
    case $SaveResult in
      "Cinnamon") DesktopEnvironment=$SaveResult
          ChooseDM
       ;;
      "Deepin") DesktopEnvironment="Deepin"
          case $Response in
            1) DDEextras="deepin-extra"
            ;;
            *) DDEextras=""
          esac
     	  ChooseDM
        if [ $DisplayManager="lightdm" ]; then
          Greeter="deepin-session-ui"
        fi
       ;;
      "Enlightenment") DesktopEnvironment=$SaveResult
         case $Response in
            1) EnExtras="connman terminology"
            ;;
            *) EnExtras=""
         esac
         ChooseDM
       ;;
      "Fluxbox") DesktopEnvironment=$SaveResult
          ChooseDM
        ;;
      "Gnome") DesktopEnvironment=$SaveResult
          case $Response in
           1) GoodiesGnome="xfce4-goodies"
           ;;
           *) GoodiesGnome=""
          esac
          DisplayManager="reserved"
        ;;
      "JWM") DesktopEnvironment=$SaveResult
          ChooseDM
        ;;
      "KDE") DesktopEnvironment=$SaveResult
          DisplayManager="reserved"
        ;;
     "LXDE") DesktopEnvironment=$SaveResult
          ChooseDM
       ;;
      "LXQt") DesktopEnvironment=$SaveResult
          ChooseDM
        ;;
      "Mate") DesktopEnvironment=$SaveResult
          ChooseDM
       ;;
     "Openbox") DesktopEnvironment=$SaveResult
        case $Response in
          1) GoodiesOpenbox="tint2"
          ;;
          *) GoodiesOpenbox=""
         esac
         ChooseDM
       ;;
      "Xfce") DesktopEnvironment=$SaveResult
         case $Response in
            1) GoodiesXfce="xfce4-goodies"
            ;;
            *) GoodiesXfce=""
         esac
         ChooseDM
       ;;
      "") continue
       ;;
      *) echo
    esac
    LuxuriesList="${LuxuriesList} ${SaveResult}"
  done
  Passed=""
}

ChooseDM() { # Choose a display manager unless already fixed by certain DEs
  case $DisplayManager in
    "") # Only offered if no other display manager has been set
    Counter=0
    Greeter=""
    DMList="GDM LightDM LXDM sddm SLIM XDM"
    print_heading
    PrintOne "You can choose one of the following display managers."
    PrintOne "Not all display managers work well with all desktop environments."
    PrintOne "If in doubt, choose LightDM."
    PrintOne "If you do not install a display manager, you will have"
    PrintOne "to launch your desktop environment manually."
    echo
    listgen1 "${DMList}" "Display_Manager/Greeter" "None"
    Reply=$Response
    for item in ${DMList}
    do
      Counter=$((Counter+1))
      if [ $Counter -eq $Reply ]
      then
        SelectedDM=$item
        case $SelectedDM in
          "GDM") DisplayManager="gdm"
            ;;
          "LightDM") DisplayManager="lightdm"
                Greeter="lightdm-gtk-greeter"
            ;;
          "LXDM") DisplayManager="lxdm"
            ;;
          "sddm") DisplayManager="sddm"
            ;;
          "SLIM") DisplayManager="slim"
            ;;
          "XDM") DisplayManager="xdm"
            ;;
          *) DisplayManager=""
        esac
        break
      fi
    done
  "reserved") # Indicating that either KDE or Gnome DE is set and will install own DM
    Greeter=""
    ;;
  *) # Warn that DM already set, and offer option to change it
    print_heading
    PrintOne "Display manager is already set as: $DisplayManager."
    PrintOne "Only one display manager can be active"
    echo
    PrintOne "Do you wish to change it?: "
    echo
    listgen1 "Yes No" "" "nodone"
    echo
    if [ $Response -eq 1 ]; then    # User wishes to change DM
      DisplayManager=""        # Clear DM variable
      Greeter=""               # and greeter
      ChooseDM                 # Call this function again
    fi
  esac
}

AddDEextras() {
  print_heading
  echo
  case $DesktopEnvironment in
    "Deepin") PrintOne "The deepin-extras pack includes the Deepin game center, media"
      PrintOne "players, terminal and screenshot tools."
      echo
      ;;
    "Enlightenment") PrintOne "It is suggested that the Connman network utility, and"
        PrintOne "Terminology terminal emulator are installed for usability."
      echo
      ;;
    "Gnome") PrintOne "The gnome-extras pack includes games, a text"
      PrintOne "editor and some utilities."
      echo
      ;;
    "Openbox") PrintOne "Tint2 is a system panel/taskbar that can be configured"
      PrintOne "to include a system tray, task list, battery monitor, clock, etc."
      echo
      ;;
    "Xfce") PrintOne "The xfce4-goodies pack includes includes the Whisker menu, extra"
      PrintOne "plugins and a number of utilities such as the mousepad editor"
      echo
      ;;
    *) echo
  esac
  PrintOne "Include the extras pack?"
  echo
  listgen1 "Yes No" "" "nodone"
}

FinalCheck() {
  while :
  do
    print_heading
    PrintOne "These are the settings you have entered. Please check them ..."
    echo
    PrintOne "1)  Root partition ... $RootPartition : $RootType" 50
    if [ $SwapPartition ] || [ $SwapFile ]; then
      PrintMany "2)  Swap partition ... $SwapPartition $SwapFile"
    else
      PrintMany "2)  No provision has been made for swap"
    fi
    if [ ${#AddPartList[@]} ]; then
      Counter=0
      PrintMany "3)  Extra partitions ..."
      for i in ${AddPartList[@]}
      do
        PrintMany "     ${AddPartMount[$Counter]} : ${AddPartList[$Counter]} : ${AddPartType[$Counter]}" 50
        Counter=$((Counter+1))
      done
    else
      PrintMany "3)  No additional partitions have been allocated"
    fi
    case $Kernel in
      1) PrintMany "4)  The LTS kernel will be installed"
      ;;
      *) PrintMany "4)  The latest kernel will be installed"
    esac
    if [ $GrubDevice ]; then
    PrintMany "5)  Grub will be installed to $GrubDevice" 50
    else
      PrintMany "5)  No provision has been made for Grub"
    fi
    PrintMany "6)  Keyboard is $Countrykbd"
    PrintMany "7)  Locale will be set to $CountryLocale"
    PrintMany "8)  Zone/subZone will be $ZONE/$SUBZONE"
    case ${IsInVbox} in
      "VirtualBox") PrintMany "9)  Virtualbox guest utilities will be installed"
      ;;
      *) PrintMany "9)  Virtualbox guest utilities will not be installed"
    esac
    if [ -z $DisplayManager ]; then
      PrintMany "10)  No Display Manager selected"
    else
      PrintMany "10)  Display Manager = $DisplayManager"
    fi
    PrintMany "11)  Root and user settings ..."
    PrintMany "     Hostname = '$HostName'"
    PrintMany "     User = '$UserName'"
    PrintMany "12) The following extras have been selected ..."
    PrintOne "${LuxuriesList}"
    echo
    PrintOne "Press [Enter] to install with these settings, or"
    Response=20
    TPread "enter an item number if you wish to change it: "
    Change=$Response
    case $Change in
      1) ChangeRootPartition
        AllocateRoot
        continue
      ;;
      2) ChangeSwapPartition
        AllocateSwap
        continue
      ;;
      3) ChangePartitions
        MorePartitions
        continue
      ;;
      4) SetKernel
        continue
      ;;
      5) SetGrubDevice
        continue
      ;;
      6) getkeymap
        continue
      ;;
      7) setlocale
        continue
      ;;
      8) SetTimeZone
        continue
      ;;
      9) ConfirmVbox
        continue
      ;;
      10) DisplayManager=""
        ChooseDM
        continue
      ;;
      11) ManualSettings
        continue
      ;;
      12) PickLuxuries
        continue
      ;;
      *) break
    esac
  done
}

ManualSettings() {
  Retry="Y"
  Response=3
  while [ $Retry = "Y" ]
  do
    print_heading
    PrintOne "Enter number for data to change, or [Enter] to finish:"
    echo
    PrintOne "1) Hostname (currently $HostName)"
    PrintMany "2) Username (currently $UserName)"
    echo
    TPread "Enter the number of your selection : "
    echo
    case $Response in
      1) TPread "Enter new Hostname (currently $HostName) : "
         HostName=$Response
        ;;
      2) TPread "Enter new username to be created (currently $UserName) : "
         UserName=$Response
        ;;
      *) Retry="N"
         break
    esac
  done
}
