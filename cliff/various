#!/bin/bash

# felizfuncs - Various functions

# Developed by Elizabeth Mills, incorporating some code adapted from
# the excellent Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# -------------------------      -------------------------
# Functions           Line       Functions           Line
# -------------------------      -------------------------
# SetLanguage
# Various input/output  22       arch_chroot          242
# Internet connection   87       SetGrubDevice        246
# Various input/output  22       SetGrubDevice        246
# Internet connection   87       MountPartitions      174
# Mirrorlist           131       InstallKernel        232
# SetScope             159       TestExistingDM       264
# SetKernel            193       SetRootPassword      293
# ConfirmVbox          206       SetUserPassword      335
# MakePartitionList    229

SetLanguage() { # User selects language, which is then fixed
  LanguageList="English French Polish Portuguese Romanian Spanish Serbian"
  LanguageArray[1]="English"
  LanguageArray[2]="Francais"
  LanguageArray[3]="Polski"
  LanguageArray[4]="Português"
  LanguageArray[5]="Română"
  LanguageArray[6]="Espanhol"
  LanguageArray[7]="Srpski"
  Response=""
  listgen2 "$LanguageList" "Languages" "nodone" "LanguageArray"
  if [ -n $Response ]; then
    Language=$Result
    Language="${Language,,}"        # Make lower case
    LanguageFile="feliz.${Language}"
    cp $LanguageFile feliz.language # Set for future use
  else
    cp feliz.english feliz.language # Set default language to English
  fi
  source feliz.language
}

print_heading() {
  clear
  T_COLS=`tput cols`
  tput cup 1 $((($T_COLS/2)-20))
  printf "~ ${_Backtitle} ~\n"
  printf "%$(tput cols)s\n"|tr ' ' '-'
}

invalid_option() { # (from AUI scripts)
  echo
  read_timed "${_Invalid_entry} ${_Try_again} ..." 1
}

TPread() { # Aligned prompt for user-entry
  # $1 = prompt ... Returns result through $Response
  T_COLS=`tput cols`
  lov=${#1}
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 2 ))
  elif [ ${lov} -gt ${T_COLS} ]; then
    stpt=0
  else
    stpt=$(( ($T_COLS - 10) / 2 ))
  fi
  EMPTY="$(printf '%*s' $stpt)"
  read -p "$EMPTY $1" Response
}

DisplayProgress() { # For compatibility with Squiff
  TPecho "$1" "$2"
}

TPecho() { # For displaying status while running on auto
  echo
  CurrentTime=$(date +%s)
  Difference=$(( $CurrentTime-$StartTime ))
  DIFFMIN=$(( $Difference/60 ))
  DIFFSEC=$(( $Difference % 60 ))
  T_COLS=`tput cols`
  EMPTY=" "
  lov=${#1}
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 3 ))
    EMPTY="$(printf '%*s' $stpt)"
  fi
  tput bold
  echo -e "$EMPTY $1 \n"
  tput sgr0
  echo -e "$EMPTY $2 \n"
  echo
}

read_timed() { # $1 = text to display; $2 = duration
  T_COLS=`tput cols`
  lov=${#1}
  if [ $2 ]; then
    tim=$2
  else
    tim=2
  fi
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 2 ))
    EMPTY="$(printf '%*s' $stpt)"
  else
    EMPTY=""
  fi
  read -t ${tim} -p "$EMPTY $1"
  echo
}

SetKernel() {
  print_heading
  echo
  PrintOne "${_Choose_kernel}"
  PrintOne "${_SetKernel1}"
  PrintOne "${_SetKernel2}"
  PrintOne "${_SetKernel3}"
  echo
  local Counter=0
  listgen1 "${_LTS_kernel} ${_Latest_kernel}" "${_Kernels}" "nodone"
  Kernel=${Response} # Set the Kernel variable (1 = LTS; 2 = Latest)
}

ConfirmVbox() {
  Retry="Y"
  until [ $Retry = "N" ]
  do
    print_heading
    PrintOne "${_ConfirmVbox1}"
    PrintOne "${_ConfirmVbox2}"
    PrintOne "${_ConfirmVbox3}"
    echo

    Message="${_ConfirmVbox4}: "
    listgen1 "${_Yes} ${_No}" "Virtualbox" "nodone"

    echo
    case $Response in
      1) IsInVbox="VirtualBox"
        Retry="N"
      ;;
      "") invalid_option
      ;;
      *) IsInVbox=""
        Retry="N"
    esac
  done
}

MakePartitionList() {
# Call BuildPartitionLists function to generate an array of partitions
# This is not a first call, so first empty the existing array
  local x=0
  local HowMany="${#PartitionArray[@]}"
  until [ ${x} -eq ${HowMany} ]
  do
    unset PartitionArray[$x]
    x=$((x+1))
  done
  BuildPartitionLists # Then rebuild
}

arch_chroot() {  # From Lution AIS
  arch-chroot /mnt /bin/bash -c "${1}" 2>> feliz.log
}

SetGrubDevice() {
  DEVICE=""
  DevicesList="$(lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd')";
  print_heading
  GrubDevice=""
  Counter=0
  PrintOne "${_SetGrubDevice1}"
  PrintOne "${_SetGrubDevice1}"
  PrintOne "${_SetGrubDevice1}"
  PrintOne "${_SetGrubDevice1}"
  echo
  listgen1 "${DevicesList}" "${_Devices}" "${_None}"
  Reply=$Response
  for i in ${DevicesList}
  do
    Item=$i
    Counter=$((Counter+1))
    if [ $Counter -eq $Reply ]; then
      if [ $Item = "$Done" ]; then
        GrubDevice=""
      else
        GrubDevice=$Item
      fi
      break
    fi
  done
}

MountPartitions() {
  case $RootType in
    "") TPecho "${_Not_formatting_root}"
    ;;
    *) TPecho "${_Formatting_root}"
      umount ${RootPartition} /mnt >/dev/null 2>> feliz.log
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${RootPartition} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${CurrentType} ] && [ $RootType = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${RootPartition}
    elif [ $RootType = "btrfs" ]; then
      mkfs.btrfs -f ${RootPartition} 2>> feliz.log
    else
      Partition=`echo $RootPartition | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${RootType} ${RootPartition}
    fi
  esac
  TPecho "${_Mounting_root}"
  mount ${RootPartition} /mnt 2>> feliz.log # eg: mount /dev/sda1 /mnt
  if [ ${SwapPartition} ]; then
    swapoff -a 2>> feliz.log
    if [ $MakeSwap = "Y" ]; then
      TPecho "${_Making_swap}"
      Partition=`echo $SwapPartition | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mkswap ${Label} ${SwapPartition} # eg: mkswap -L Arch-Swap /dev/sda2
    fi
    TPecho "Activating /swap"
    swapon ${SwapPartition} 2>> feliz.log # eg: swapon /dev/sda2
  fi

  local Counter=0
  for id in ${AddPartList}
  do
    TPecho "${_Mounting} ${id} ${_as} ${AddPartMount[$Counter]}"
    umount ${id} /mnt${AddPartMount[$Counter]} >/dev/null 2>> feliz.log
    mkdir -p /mnt${AddPartMount[$Counter]} 2>> feliz.log  # eg: mkdir -p /mnt/home
    # Check if replacing existing ext3/4 partition with btrfs
    CurrentType=`file -sL ${AddPartType[$Counter]} | grep 'ext\|btrfs' | cut -c26-30`
    if [ ${AddPartType[$Counter]} = "btrfs" ] && [ ${CurrentType} != "btrfs" ]; then
      btrfs-convert ${id}
    elif [ ${AddPartType[$Counter]} = "btrfs" ]; then
      mkfs.btrfs -f ${id} 2>> feliz.log
    elif [ ${AddPartType[$Counter]} != "" ]; then
      Partition=`echo ${id} | cut -c 6-`
      Label="${LabellingArray[${Partition}]}"
      if [ -n "${Label}" ]; then
        Label="-L ${Label}"
      fi
      mke2fs ${Label} -t ${AddPartType[$Counter]} ${id} # eg: mke2fs -L Arch-Home -t ext4 /dev/sda3
    fi
    mount ${id} /mnt${AddPartMount[$Counter]} 2>> feliz.log # eg: mount /dev/sda3 /mnt/home
    Counter=$((Counter+1))
  done
}

InstallKernel() {
  TPecho "${_Installing} ${_cli_tools}"
  pacstrap /mnt  base-devel bash  btrfs-progs bzip2 coreutils cryptsetup device-mapper dhcpcd diffutils e2fsprogs file filesystem findutils gawk gcc-libs gettext gksu glibc grep gzip inetutils iproute2 iputils jfsutils less licenses logrotate lvm2 man-db man-pages mdadm nano netctl ntp openssh pacman pciutils pcmciautils perl procps-ng psmisc reflector reiserfsprogs s-nail screenfetch sed shadow sudo sysfsutils systemd-sysvcompat tar texinfo unrar unzip usbutils util-linux vi vim wget which xfsprogs xarchiver xorg-xedit xterm 2>> feliz.log
  arch_chroot "systemctl enable sshd.service" >/dev/null
  case $Kernel in
    1) TPecho "${_Installing} ${_LTS} ${_kernel}"
        pacstrap /mnt linux-lts
        if [ -n ${IsInVbox} ] && [ $Scope != "Basic" ]; then # Installing in Virtualbox
          TPecho "${_Installing} virtualbox guest modules"
          pacstrap /mnt virtualbox-guest-utils virtualbox-guest-modules-lts  virtualbox-guest-dkms
          echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf 2>> feliz.log  # To overcome piix4 Virtualbox error
          cp virtualbox.conf /mnt/etc/modules-load.d/ 2>> feliz.log
        fi
      ;;
    *) TPecho "${_Installing} ${_Latest} ${_kernel}"
        pacstrap /mnt linux
        if [ -n ${IsInVbox} ] && [ $Scope != "Basic" ]; then # Installing latest kernel in Virtualbox
          TPecho "${_Installing} ${_VBox_guest_modules}"
          pacstrap /mnt virtualbox-guest-utils virtualbox-guest-dkms
          echo blacklist i2c_piix4 > /mnt/etc/modprobe.d/modprobe.conf 2>> feliz.log  # To overcome piix4 Virtualbox error
          cp virtualbox.conf /mnt/etc/modules-load.d/ 2>> feliz.log
        fi
  esac
  TPecho "${_Installing} ${_video_drivers}"
  pacstrap /mnt xf86-video-vesa xf86-video-nouveau 2>> feliz.log # Install opensource video drivers
}

TestExistingDM() {
  # Test for existing display manager and disable if necessary
  arch-chroot /mnt touch etc/output.log # Create empty file
  arch-chroot /mnt systemctl list-unit-files | grep '(*dm|slim)\.service' > mnt/etc/output.log
  DMLine=`cat /mnt/etc/output.log`
  local Counter=1
  case ${DMLine} in
    "") echo "No previous DM discovered" >> feliz.log
    ;;
    *) local Continue="Y"
      while [ ${Continue} = "Y" ]
      do
        ExDM=`echo $DMLine  | cut -f ${Counter} -d ' '` # First of pair is DM
        if [ -z ${ExDM} ]; then
          Continue="N" # Quit if no further entries
          break
        fi
        Counter=$((Counter+1))
        ExDMStatus=`echo $DMLine  | cut -f ${Counter} -d ' '` # Second is status
        case ${ExDMStatus} in
          "enabled") arch_chroot "systemctl disable ${ExDM}" >/dev/null
          ;;
          *) echo "${ExDM} already disabled" >> feliz.log
        esac
        Counter=$((Counter+1))
      done
  esac
}

SetRootPassword() {
  print_heading
  echo
  PrintOne "${_Success}"
  echo
  PrintOne "${_Finished} $DIFFMIN ${_minutes} $DIFFSEC ${_seconds}"
  echo
  PrintOne "-----------------------"
  echo
  PrintOne "${_passwords} ..."
  echo
  PrintOne "${_Note1}"
  PrintOne "${_Note2} ..."
  echo
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    read -s -p "${_enter_password} ${_root}: " Pass1
    echo
    read -s -p "${_enter_again} ${_root}: " Pass2
    echo
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      read_timed "${_no_blank} ${_Try_again} ..." 1
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
     echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
     arch_chroot "passwd root" < /tmp/.passwd >/dev/null
     rm /tmp/.passwd 2>> feliz.log
     Repeat="N"
    else
      print_heading
      PrintOne "${_no_match} ${_Try_again}"
    fi
  done
}

SetUserPassword() {
  print_heading
  echo
  Repeat="Y"
  while [ $Repeat = "Y" ]
  do
    read -s -p "${_enter_password} $UserName: " Pass1
    echo
    read -s -p "${_enter_again} $UserName: " Pass2
    echo
    if [ -z ${Pass1} ] || [ -z ${Pass2} ]; then
      read_timed "${_no_blank} ${_Try_again} ..." 1
      continue
    fi
    if [ $Pass1 = $Pass2 ]; then
      echo -e "${Pass1}\n${Pass2}" > /tmp/.passwd
      arch_chroot "passwd ${UserName}" < /tmp/.passwd >/dev/null
      rm /tmp/.passwd 2>> feliz.log
      Repeat="N"
    else
      echo "${_no_match} ${_Try_again}"
    fi
  done
}
