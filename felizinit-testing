#!/bin/bash

# Feliz (formerly Achoo!) Arch Linux Installation Script
# Initialising module: tests the internet connection and downloads the files

# Developed by Elizabeth Mills, incorporating some code adapted from the
# excellent Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

#
# Basic cli functions required for this script
#
Centre() { # Aligned text according to screen size
  width=`tput cols`
  lov=${#1}
  if [ ${lov} -lt ${width} ]; then
    stpt=$(( ($width - $lov) / 2 ))
    EMPTY="$(printf '%*s' $stpt)"
    echo "$EMPTY $1"
  else
    echo "$1"
  fi
}

TPread() { # Aligned prompt for user-entry - returns result through $Response
  T_COLS=`tput cols`
  lov=${#1}
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 2 ))
  elif [ ${lov} -gt ${T_COLS} ]; then
    stpt=0
  else
    stpt=$(( ($T_COLS - 10) / 2 ))
  fi
  EMPTY="$(printf '%*s' $stpt)"
  read -p "$EMPTY $1" Response
}

read_timed() { # $1 = text to display; $2 = duration
  T_COLS=`tput cols`
  lov=${#1}
  if [ $2 ]; then
    tim=$2
  else
    tim=2
  fi
  if [ ${lov} -lt ${T_COLS} ]; then
    stpt=$(( ($T_COLS - $lov) / 2 ))
    EMPTY="$(printf '%*s' $stpt)"
  else
    EMPTY=""
  fi
  read -t ${tim} -p "$EMPTY $1"
  echo
}

CheckInternet() { 
  Service="N"
  while [ $Service = "N" ]
  do
    case $Chosen in
    1) Centre "$Backtitle" # CLI welcome screen
      Centre "$Needed"
      Centre "$Checking"
      CheckConnection
      case $Service in
        "N") read_timed "$Sorry"
          exit
        ;;
        *) Centre "$Downloading"
        break
      esac
    ;;
    *) dialog --backtitle "$Backtitle" --title "$Title" \
          --infobox "$Needed\n\n$Checking" 8 50
      CheckConnection
      case $Service in
        "N") read_timed 
          dialog --backtitle"$Backtitle" --title "$Title" \
          --infobox "$Sorry" 5 40
          exit
        ;;
        *) dialog --backtitle "$Backtitle" --title "$Title" \
          --infobox "$Downloading" 5 30
        break
      esac
    esac
  done
}

CheckConnection() {
while [ $Service = "N" ]
do
  case $Chosen in
    1) if [[ ! $(ping -c 3 google.com) ]]; then
        wifi-menu &>> feliz.log 
        if [[ ! $(ping -c 3 google.com) ]]; then
          Centre "$Unable"
          Centre "$Ensure"
          TPread "Try again? (y/n): "
          Retry=$Response
          if [ $Retry != "Y" ] && [ $Retry != "y" ]; then
            exit
            break
          fi
        else
          read_timed "$Connection"
          Service="Y"
        fi
      else
        read_timed "$Connection"
        Service="Y"
      fi
    ;;
    *) if [[ ! $(ping -c 3 google.com) ]]; then
        wifi-menu &>> feliz.log 
        if [[ ! $(ping -c 3 google.com) ]]; then
          dialog --backtitle "$Backtitle" --title "$Title" --nocancel \
          --yesno "$Unable\n$Ensure\nTry again?" 10 50
          if [ $? -eq 1 ]; then
            exit
            break
          fi
        else
          dialog --backtitle "$Backtitle" --title "$Title" \
          --infobox "$Connection" 5 30
          Service="Y"
        fi
      else
          dialog --backtitle "$Backtitle" --title "$Title" \
          --infobox "$Connection" 5 30
          Service="Y"
      fi
  esac
done
}

UIselection() {
  dialog --backtitle "$Backtitle" --title " Installer Version " --nocancel \
  --menu "You can now choose between feliz's traditional, helpful, \
command-line interface (from the Achoo project), or a new, semi-graphical, dialog system ..." 12 52 2 \
  "cli" "Traditional command line" \
  "s-g" "Semi-graphical interface" 2> output.file
    Chosen=$(cat output.file)
    clear
}

#
# Execute
#
clear
Backtitle="Welcome to the Feliz Arch Linux installation script"
# Offer user alternative UI
UIselection
Title=" Internet Connection "
Needed="A working internet connection is needed for installation."
Checking="Checking your connection now ..."
Connection="Connection detected"
Downloading="Downloading files - please wait ..."
Unable="Unable to establish a connection."
Ensure="Ensure that your computer is able to access the internet."
Sorry="Sorry, installation cannot continue without an internet connection."
CheckInternet

# Download and unzip the complete testing archive from Github
wget -N https://github.com/angeltoast/feliz-testing/archive/master.zip &>> feliz.log
unzip -o master.zip &>> feliz.log
cp feliz-testing-master/common/* . &>> feliz.log

# Copy the appropriate files to working directory
  case $Chosen in
    "cli") cp feliz-testing-master/cliff/* . &>> feliz.log # CLI
    ;;
    *) cp feliz-testing-master/squiff/* . &>> feliz.log # Semi-graphical
  esac

# Clean up then run main feliz function
rm -rf feliz-testing-master &>> feliz.log
rm *.zip &>> feliz.log
./feliz
